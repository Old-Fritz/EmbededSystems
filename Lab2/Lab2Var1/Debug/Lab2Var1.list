
Lab2Var1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004800  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  20011990  20011990  00011990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  20012054  20012054  000120e4  2**0
                  CONTENTS
  4 .ARM          00000008  20012054  20012054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2001205c  200120e4  000120e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2001205c  2001205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  20012060  20012060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20012064  20012064  00012064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200120e4  200120e4  000120e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200124c4  200124c4  000120e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa40  00000000  00000000  00012114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4e  00000000  00000000  00021b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  00024aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  00025408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000227d5  00000000  00000000  00025be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000deaf  00000000  00000000  000483b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3db7  00000000  00000000  00056264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011a01b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a34  00000000  00000000  0011a070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	200120e4 	.word	0x200120e4
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	20011978 	.word	0x20011978

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	200120e8 	.word	0x200120e8
2000d1cc:	20011978 	.word	0x20011978

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295
2000d290:	f04f 30ff 	movne.w	r0, #4294967295
2000d294:	f000 b96e 	b.w	2000d574 <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9d08      	ldr	r5, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	468c      	mov	ip, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	f040 8083 	bne.w	2000d3c6 <__udivmoddi4+0x116>
2000d2c0:	428a      	cmp	r2, r1
2000d2c2:	4617      	mov	r7, r2
2000d2c4:	d947      	bls.n	2000d356 <__udivmoddi4+0xa6>
2000d2c6:	fab2 f282 	clz	r2, r2
2000d2ca:	b142      	cbz	r2, 2000d2de <__udivmoddi4+0x2e>
2000d2cc:	f1c2 0020 	rsb	r0, r2, #32
2000d2d0:	fa24 f000 	lsr.w	r0, r4, r0
2000d2d4:	4091      	lsls	r1, r2
2000d2d6:	4097      	lsls	r7, r2
2000d2d8:	ea40 0c01 	orr.w	ip, r0, r1
2000d2dc:	4094      	lsls	r4, r2
2000d2de:	ea4f 4817 	mov.w	r8, r7, lsr #16
2000d2e2:	0c23      	lsrs	r3, r4, #16
2000d2e4:	fbbc f6f8 	udiv	r6, ip, r8
2000d2e8:	fa1f fe87 	uxth.w	lr, r7
2000d2ec:	fb08 c116 	mls	r1, r8, r6, ip
2000d2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d2f4:	fb06 f10e 	mul.w	r1, r6, lr
2000d2f8:	4299      	cmp	r1, r3
2000d2fa:	d909      	bls.n	2000d310 <__udivmoddi4+0x60>
2000d2fc:	18fb      	adds	r3, r7, r3
2000d2fe:	f106 30ff 	add.w	r0, r6, #4294967295
2000d302:	f080 8119 	bcs.w	2000d538 <__udivmoddi4+0x288>
2000d306:	4299      	cmp	r1, r3
2000d308:	f240 8116 	bls.w	2000d538 <__udivmoddi4+0x288>
2000d30c:	3e02      	subs	r6, #2
2000d30e:	443b      	add	r3, r7
2000d310:	1a5b      	subs	r3, r3, r1
2000d312:	b2a4      	uxth	r4, r4
2000d314:	fbb3 f0f8 	udiv	r0, r3, r8
2000d318:	fb08 3310 	mls	r3, r8, r0, r3
2000d31c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d320:	fb00 fe0e 	mul.w	lr, r0, lr
2000d324:	45a6      	cmp	lr, r4
2000d326:	d909      	bls.n	2000d33c <__udivmoddi4+0x8c>
2000d328:	193c      	adds	r4, r7, r4
2000d32a:	f100 33ff 	add.w	r3, r0, #4294967295
2000d32e:	f080 8105 	bcs.w	2000d53c <__udivmoddi4+0x28c>
2000d332:	45a6      	cmp	lr, r4
2000d334:	f240 8102 	bls.w	2000d53c <__udivmoddi4+0x28c>
2000d338:	3802      	subs	r0, #2
2000d33a:	443c      	add	r4, r7
2000d33c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000d340:	eba4 040e 	sub.w	r4, r4, lr
2000d344:	2600      	movs	r6, #0
2000d346:	b11d      	cbz	r5, 2000d350 <__udivmoddi4+0xa0>
2000d348:	40d4      	lsrs	r4, r2
2000d34a:	2300      	movs	r3, #0
2000d34c:	e9c5 4300 	strd	r4, r3, [r5]
2000d350:	4631      	mov	r1, r6
2000d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d356:	b902      	cbnz	r2, 2000d35a <__udivmoddi4+0xaa>
2000d358:	deff      	udf	#255	; 0xff
2000d35a:	fab2 f282 	clz	r2, r2
2000d35e:	2a00      	cmp	r2, #0
2000d360:	d150      	bne.n	2000d404 <__udivmoddi4+0x154>
2000d362:	1bcb      	subs	r3, r1, r7
2000d364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
2000d368:	fa1f f887 	uxth.w	r8, r7
2000d36c:	2601      	movs	r6, #1
2000d36e:	fbb3 fcfe 	udiv	ip, r3, lr
2000d372:	0c21      	lsrs	r1, r4, #16
2000d374:	fb0e 331c 	mls	r3, lr, ip, r3
2000d378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d37c:	fb08 f30c 	mul.w	r3, r8, ip
2000d380:	428b      	cmp	r3, r1
2000d382:	d907      	bls.n	2000d394 <__udivmoddi4+0xe4>
2000d384:	1879      	adds	r1, r7, r1
2000d386:	f10c 30ff 	add.w	r0, ip, #4294967295
2000d38a:	d202      	bcs.n	2000d392 <__udivmoddi4+0xe2>
2000d38c:	428b      	cmp	r3, r1
2000d38e:	f200 80e9 	bhi.w	2000d564 <__udivmoddi4+0x2b4>
2000d392:	4684      	mov	ip, r0
2000d394:	1ac9      	subs	r1, r1, r3
2000d396:	b2a3      	uxth	r3, r4
2000d398:	fbb1 f0fe 	udiv	r0, r1, lr
2000d39c:	fb0e 1110 	mls	r1, lr, r0, r1
2000d3a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
2000d3a4:	fb08 f800 	mul.w	r8, r8, r0
2000d3a8:	45a0      	cmp	r8, r4
2000d3aa:	d907      	bls.n	2000d3bc <__udivmoddi4+0x10c>
2000d3ac:	193c      	adds	r4, r7, r4
2000d3ae:	f100 33ff 	add.w	r3, r0, #4294967295
2000d3b2:	d202      	bcs.n	2000d3ba <__udivmoddi4+0x10a>
2000d3b4:	45a0      	cmp	r8, r4
2000d3b6:	f200 80d9 	bhi.w	2000d56c <__udivmoddi4+0x2bc>
2000d3ba:	4618      	mov	r0, r3
2000d3bc:	eba4 0408 	sub.w	r4, r4, r8
2000d3c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000d3c4:	e7bf      	b.n	2000d346 <__udivmoddi4+0x96>
2000d3c6:	428b      	cmp	r3, r1
2000d3c8:	d909      	bls.n	2000d3de <__udivmoddi4+0x12e>
2000d3ca:	2d00      	cmp	r5, #0
2000d3cc:	f000 80b1 	beq.w	2000d532 <__udivmoddi4+0x282>
2000d3d0:	2600      	movs	r6, #0
2000d3d2:	e9c5 0100 	strd	r0, r1, [r5]
2000d3d6:	4630      	mov	r0, r6
2000d3d8:	4631      	mov	r1, r6
2000d3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d3de:	fab3 f683 	clz	r6, r3
2000d3e2:	2e00      	cmp	r6, #0
2000d3e4:	d14a      	bne.n	2000d47c <__udivmoddi4+0x1cc>
2000d3e6:	428b      	cmp	r3, r1
2000d3e8:	d302      	bcc.n	2000d3f0 <__udivmoddi4+0x140>
2000d3ea:	4282      	cmp	r2, r0
2000d3ec:	f200 80b8 	bhi.w	2000d560 <__udivmoddi4+0x2b0>
2000d3f0:	1a84      	subs	r4, r0, r2
2000d3f2:	eb61 0103 	sbc.w	r1, r1, r3
2000d3f6:	2001      	movs	r0, #1
2000d3f8:	468c      	mov	ip, r1
2000d3fa:	2d00      	cmp	r5, #0
2000d3fc:	d0a8      	beq.n	2000d350 <__udivmoddi4+0xa0>
2000d3fe:	e9c5 4c00 	strd	r4, ip, [r5]
2000d402:	e7a5      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d404:	f1c2 0320 	rsb	r3, r2, #32
2000d408:	fa20 f603 	lsr.w	r6, r0, r3
2000d40c:	4097      	lsls	r7, r2
2000d40e:	fa01 f002 	lsl.w	r0, r1, r2
2000d412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
2000d416:	40d9      	lsrs	r1, r3
2000d418:	4330      	orrs	r0, r6
2000d41a:	0c03      	lsrs	r3, r0, #16
2000d41c:	fbb1 f6fe 	udiv	r6, r1, lr
2000d420:	fa1f f887 	uxth.w	r8, r7
2000d424:	fb0e 1116 	mls	r1, lr, r6, r1
2000d428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d42c:	fb06 f108 	mul.w	r1, r6, r8
2000d430:	4299      	cmp	r1, r3
2000d432:	fa04 f402 	lsl.w	r4, r4, r2
2000d436:	d909      	bls.n	2000d44c <__udivmoddi4+0x19c>
2000d438:	18fb      	adds	r3, r7, r3
2000d43a:	f106 3cff 	add.w	ip, r6, #4294967295
2000d43e:	f080 808d 	bcs.w	2000d55c <__udivmoddi4+0x2ac>
2000d442:	4299      	cmp	r1, r3
2000d444:	f240 808a 	bls.w	2000d55c <__udivmoddi4+0x2ac>
2000d448:	3e02      	subs	r6, #2
2000d44a:	443b      	add	r3, r7
2000d44c:	1a5b      	subs	r3, r3, r1
2000d44e:	b281      	uxth	r1, r0
2000d450:	fbb3 f0fe 	udiv	r0, r3, lr
2000d454:	fb0e 3310 	mls	r3, lr, r0, r3
2000d458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d45c:	fb00 f308 	mul.w	r3, r0, r8
2000d460:	428b      	cmp	r3, r1
2000d462:	d907      	bls.n	2000d474 <__udivmoddi4+0x1c4>
2000d464:	1879      	adds	r1, r7, r1
2000d466:	f100 3cff 	add.w	ip, r0, #4294967295
2000d46a:	d273      	bcs.n	2000d554 <__udivmoddi4+0x2a4>
2000d46c:	428b      	cmp	r3, r1
2000d46e:	d971      	bls.n	2000d554 <__udivmoddi4+0x2a4>
2000d470:	3802      	subs	r0, #2
2000d472:	4439      	add	r1, r7
2000d474:	1acb      	subs	r3, r1, r3
2000d476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
2000d47a:	e778      	b.n	2000d36e <__udivmoddi4+0xbe>
2000d47c:	f1c6 0c20 	rsb	ip, r6, #32
2000d480:	fa03 f406 	lsl.w	r4, r3, r6
2000d484:	fa22 f30c 	lsr.w	r3, r2, ip
2000d488:	431c      	orrs	r4, r3
2000d48a:	fa20 f70c 	lsr.w	r7, r0, ip
2000d48e:	fa01 f306 	lsl.w	r3, r1, r6
2000d492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
2000d496:	fa21 f10c 	lsr.w	r1, r1, ip
2000d49a:	431f      	orrs	r7, r3
2000d49c:	0c3b      	lsrs	r3, r7, #16
2000d49e:	fbb1 f9fe 	udiv	r9, r1, lr
2000d4a2:	fa1f f884 	uxth.w	r8, r4
2000d4a6:	fb0e 1119 	mls	r1, lr, r9, r1
2000d4aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
2000d4ae:	fb09 fa08 	mul.w	sl, r9, r8
2000d4b2:	458a      	cmp	sl, r1
2000d4b4:	fa02 f206 	lsl.w	r2, r2, r6
2000d4b8:	fa00 f306 	lsl.w	r3, r0, r6
2000d4bc:	d908      	bls.n	2000d4d0 <__udivmoddi4+0x220>
2000d4be:	1861      	adds	r1, r4, r1
2000d4c0:	f109 30ff 	add.w	r0, r9, #4294967295
2000d4c4:	d248      	bcs.n	2000d558 <__udivmoddi4+0x2a8>
2000d4c6:	458a      	cmp	sl, r1
2000d4c8:	d946      	bls.n	2000d558 <__udivmoddi4+0x2a8>
2000d4ca:	f1a9 0902 	sub.w	r9, r9, #2
2000d4ce:	4421      	add	r1, r4
2000d4d0:	eba1 010a 	sub.w	r1, r1, sl
2000d4d4:	b2bf      	uxth	r7, r7
2000d4d6:	fbb1 f0fe 	udiv	r0, r1, lr
2000d4da:	fb0e 1110 	mls	r1, lr, r0, r1
2000d4de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
2000d4e2:	fb00 f808 	mul.w	r8, r0, r8
2000d4e6:	45b8      	cmp	r8, r7
2000d4e8:	d907      	bls.n	2000d4fa <__udivmoddi4+0x24a>
2000d4ea:	19e7      	adds	r7, r4, r7
2000d4ec:	f100 31ff 	add.w	r1, r0, #4294967295
2000d4f0:	d22e      	bcs.n	2000d550 <__udivmoddi4+0x2a0>
2000d4f2:	45b8      	cmp	r8, r7
2000d4f4:	d92c      	bls.n	2000d550 <__udivmoddi4+0x2a0>
2000d4f6:	3802      	subs	r0, #2
2000d4f8:	4427      	add	r7, r4
2000d4fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000d4fe:	eba7 0708 	sub.w	r7, r7, r8
2000d502:	fba0 8902 	umull	r8, r9, r0, r2
2000d506:	454f      	cmp	r7, r9
2000d508:	46c6      	mov	lr, r8
2000d50a:	4649      	mov	r1, r9
2000d50c:	d31a      	bcc.n	2000d544 <__udivmoddi4+0x294>
2000d50e:	d017      	beq.n	2000d540 <__udivmoddi4+0x290>
2000d510:	b15d      	cbz	r5, 2000d52a <__udivmoddi4+0x27a>
2000d512:	ebb3 020e 	subs.w	r2, r3, lr
2000d516:	eb67 0701 	sbc.w	r7, r7, r1
2000d51a:	fa07 fc0c 	lsl.w	ip, r7, ip
2000d51e:	40f2      	lsrs	r2, r6
2000d520:	ea4c 0202 	orr.w	r2, ip, r2
2000d524:	40f7      	lsrs	r7, r6
2000d526:	e9c5 2700 	strd	r2, r7, [r5]
2000d52a:	2600      	movs	r6, #0
2000d52c:	4631      	mov	r1, r6
2000d52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d532:	462e      	mov	r6, r5
2000d534:	4628      	mov	r0, r5
2000d536:	e70b      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d538:	4606      	mov	r6, r0
2000d53a:	e6e9      	b.n	2000d310 <__udivmoddi4+0x60>
2000d53c:	4618      	mov	r0, r3
2000d53e:	e6fd      	b.n	2000d33c <__udivmoddi4+0x8c>
2000d540:	4543      	cmp	r3, r8
2000d542:	d2e5      	bcs.n	2000d510 <__udivmoddi4+0x260>
2000d544:	ebb8 0e02 	subs.w	lr, r8, r2
2000d548:	eb69 0104 	sbc.w	r1, r9, r4
2000d54c:	3801      	subs	r0, #1
2000d54e:	e7df      	b.n	2000d510 <__udivmoddi4+0x260>
2000d550:	4608      	mov	r0, r1
2000d552:	e7d2      	b.n	2000d4fa <__udivmoddi4+0x24a>
2000d554:	4660      	mov	r0, ip
2000d556:	e78d      	b.n	2000d474 <__udivmoddi4+0x1c4>
2000d558:	4681      	mov	r9, r0
2000d55a:	e7b9      	b.n	2000d4d0 <__udivmoddi4+0x220>
2000d55c:	4666      	mov	r6, ip
2000d55e:	e775      	b.n	2000d44c <__udivmoddi4+0x19c>
2000d560:	4630      	mov	r0, r6
2000d562:	e74a      	b.n	2000d3fa <__udivmoddi4+0x14a>
2000d564:	f1ac 0c02 	sub.w	ip, ip, #2
2000d568:	4439      	add	r1, r7
2000d56a:	e713      	b.n	2000d394 <__udivmoddi4+0xe4>
2000d56c:	3802      	subs	r0, #2
2000d56e:	443c      	add	r4, r7
2000d570:	e724      	b.n	2000d3bc <__udivmoddi4+0x10c>
2000d572:	bf00      	nop

2000d574 <__aeabi_idiv0>:
2000d574:	4770      	bx	lr
2000d576:	bf00      	nop

2000d578 <SDK_MAIN_PreLoop>:
#include "App/semaphore.h"
#include "App/commands.h"

///  API  ///
void SDK_MAIN_PreLoop()
{
2000d578:	b580      	push	{r7, lr}
2000d57a:	af00      	add	r7, sp, #0
	// init semaphore
	SEM_Init();
2000d57c:	f000 fad2 	bl	2000db24 <SEM_Init>

#if SDK_REMOTE_MODE
	// simulate button press
	SDK_TIM_AddInterrupt(&SDK_BTN_SetDown, SEM_BTN_PERIOD, true);
2000d580:	2201      	movs	r2, #1
2000d582:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
2000d586:	480f      	ldr	r0, [pc, #60]	; (2000d5c4 <SDK_MAIN_PreLoop+0x4c>)
2000d588:	f000 fcf4 	bl	2000df74 <SDK_TIM_AddInterrupt>

	// simulate command input
	SDK_TIM_AddDataInterrupt(&SDK_MAIN_ProcessCommand, "set interrupts 0", 100,  false);
2000d58c:	2300      	movs	r3, #0
2000d58e:	2264      	movs	r2, #100	; 0x64
2000d590:	490d      	ldr	r1, [pc, #52]	; (2000d5c8 <SDK_MAIN_PreLoop+0x50>)
2000d592:	480e      	ldr	r0, [pc, #56]	; (2000d5cc <SDK_MAIN_PreLoop+0x54>)
2000d594:	f000 fd28 	bl	2000dfe8 <SDK_TIM_AddDataInterrupt>
	SDK_TIM_AddDataInterrupt(&SDK_MAIN_ProcessCommand, "set timeout 100", 100,  false);
2000d598:	2300      	movs	r3, #0
2000d59a:	2264      	movs	r2, #100	; 0x64
2000d59c:	490c      	ldr	r1, [pc, #48]	; (2000d5d0 <SDK_MAIN_PreLoop+0x58>)
2000d59e:	480b      	ldr	r0, [pc, #44]	; (2000d5cc <SDK_MAIN_PreLoop+0x54>)
2000d5a0:	f000 fd22 	bl	2000dfe8 <SDK_TIM_AddDataInterrupt>
	SDK_TIM_AddDataInterrupt(&SDK_MAIN_ProcessCommand, "set mode 2", 700,  false);
2000d5a4:	2300      	movs	r3, #0
2000d5a6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
2000d5aa:	490a      	ldr	r1, [pc, #40]	; (2000d5d4 <SDK_MAIN_PreLoop+0x5c>)
2000d5ac:	4807      	ldr	r0, [pc, #28]	; (2000d5cc <SDK_MAIN_PreLoop+0x54>)
2000d5ae:	f000 fd1b 	bl	2000dfe8 <SDK_TIM_AddDataInterrupt>
	SDK_TIM_AddDataInterrupt(&SDK_MAIN_ProcessCommand, "?", 1000, false);
2000d5b2:	2300      	movs	r3, #0
2000d5b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
2000d5b8:	4907      	ldr	r1, [pc, #28]	; (2000d5d8 <SDK_MAIN_PreLoop+0x60>)
2000d5ba:	4804      	ldr	r0, [pc, #16]	; (2000d5cc <SDK_MAIN_PreLoop+0x54>)
2000d5bc:	f000 fd14 	bl	2000dfe8 <SDK_TIM_AddDataInterrupt>
#endif
}
2000d5c0:	bf00      	nop
2000d5c2:	bd80      	pop	{r7, pc}
2000d5c4:	2000dda5 	.word	0x2000dda5
2000d5c8:	20011990 	.word	0x20011990
2000d5cc:	2000d609 	.word	0x2000d609
2000d5d0:	200119a4 	.word	0x200119a4
2000d5d4:	200119b4 	.word	0x200119b4
2000d5d8:	200119c0 	.word	0x200119c0

2000d5dc <SDK_MAIN_LoopFunc>:
void SDK_MAIN_LoopFunc()
{
2000d5dc:	b580      	push	{r7, lr}
2000d5de:	af00      	add	r7, sp, #0
	SEM_Cycle();
2000d5e0:	f000 fab4 	bl	2000db4c <SEM_Cycle>
}
2000d5e4:	bf00      	nop
2000d5e6:	bd80      	pop	{r7, pc}

2000d5e8 <SDK_MAIN_PostLoop>:
void SDK_MAIN_PostLoop()
{
2000d5e8:	b580      	push	{r7, lr}
2000d5ea:	af00      	add	r7, sp, #0
	// turn off all colors
	SDK_LED_Set(SDK_LED_GREEN, SDK_LED_OFF);
2000d5ec:	2100      	movs	r1, #0
2000d5ee:	2001      	movs	r0, #1
2000d5f0:	f000 fc80 	bl	2000def4 <SDK_LED_Set>
	SDK_LED_Set(SDK_LED_YELLOW, SDK_LED_OFF);
2000d5f4:	2100      	movs	r1, #0
2000d5f6:	2002      	movs	r0, #2
2000d5f8:	f000 fc7c 	bl	2000def4 <SDK_LED_Set>
	SDK_LED_Set(SDK_LED_RED, SDK_LED_OFF);
2000d5fc:	2100      	movs	r1, #0
2000d5fe:	2003      	movs	r0, #3
2000d600:	f000 fc78 	bl	2000def4 <SDK_LED_Set>
}
2000d604:	bf00      	nop
2000d606:	bd80      	pop	{r7, pc}

2000d608 <SDK_MAIN_ProcessCommand>:

void SDK_MAIN_ProcessCommand(const char* command)
{
2000d608:	b580      	push	{r7, lr}
2000d60a:	b082      	sub	sp, #8
2000d60c:	af00      	add	r7, sp, #0
2000d60e:	6078      	str	r0, [r7, #4]
	CMD_ProcessCommand(command);
2000d610:	6878      	ldr	r0, [r7, #4]
2000d612:	f000 f865 	bl	2000d6e0 <CMD_ProcessCommand>
}
2000d616:	bf00      	nop
2000d618:	3708      	adds	r7, #8
2000d61a:	46bd      	mov	sp, r7
2000d61c:	bd80      	pop	{r7, pc}
	...

2000d620 <MapColorStateToName>:
#include <ctype.h>
#include <stdio.h>

/// STATIC ///
static char* MapColorStateToName(eColorState color)
{
2000d620:	b480      	push	{r7}
2000d622:	b083      	sub	sp, #12
2000d624:	af00      	add	r7, sp, #0
2000d626:	4603      	mov	r3, r0
2000d628:	71fb      	strb	r3, [r7, #7]
	switch(color)
2000d62a:	79fb      	ldrb	r3, [r7, #7]
2000d62c:	2b03      	cmp	r3, #3
2000d62e:	d813      	bhi.n	2000d658 <MapColorStateToName+0x38>
2000d630:	a201      	add	r2, pc, #4	; (adr r2, 2000d638 <MapColorStateToName+0x18>)
2000d632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000d636:	bf00      	nop
2000d638:	2000d649 	.word	0x2000d649
2000d63c:	2000d64d 	.word	0x2000d64d
2000d640:	2000d651 	.word	0x2000d651
2000d644:	2000d655 	.word	0x2000d655
	{
	case ECS_Green:
		return "Green";
2000d648:	4b07      	ldr	r3, [pc, #28]	; (2000d668 <MapColorStateToName+0x48>)
2000d64a:	e006      	b.n	2000d65a <MapColorStateToName+0x3a>
	case ECS_Yellow:
		return "Yellow";
2000d64c:	4b07      	ldr	r3, [pc, #28]	; (2000d66c <MapColorStateToName+0x4c>)
2000d64e:	e004      	b.n	2000d65a <MapColorStateToName+0x3a>
	case ECS_Red:
		return "Red";
2000d650:	4b07      	ldr	r3, [pc, #28]	; (2000d670 <MapColorStateToName+0x50>)
2000d652:	e002      	b.n	2000d65a <MapColorStateToName+0x3a>
	case ECS_BlinkingGreen:
		return "Blinking Green";
2000d654:	4b07      	ldr	r3, [pc, #28]	; (2000d674 <MapColorStateToName+0x54>)
2000d656:	e000      	b.n	2000d65a <MapColorStateToName+0x3a>
	}
	return "";
2000d658:	4b07      	ldr	r3, [pc, #28]	; (2000d678 <MapColorStateToName+0x58>)
}
2000d65a:	4618      	mov	r0, r3
2000d65c:	370c      	adds	r7, #12
2000d65e:	46bd      	mov	sp, r7
2000d660:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d664:	4770      	bx	lr
2000d666:	bf00      	nop
2000d668:	200119c4 	.word	0x200119c4
2000d66c:	200119cc 	.word	0x200119cc
2000d670:	200119d4 	.word	0x200119d4
2000d674:	200119d8 	.word	0x200119d8
2000d678:	200119e8 	.word	0x200119e8

2000d67c <MapModeToName>:
static char* MapModeToName(eSemaphoreMode mode)
{
2000d67c:	b480      	push	{r7}
2000d67e:	b083      	sub	sp, #12
2000d680:	af00      	add	r7, sp, #0
2000d682:	4603      	mov	r3, r0
2000d684:	71fb      	strb	r3, [r7, #7]
	switch(mode)
2000d686:	79fb      	ldrb	r3, [r7, #7]
2000d688:	2b01      	cmp	r3, #1
2000d68a:	d002      	beq.n	2000d692 <MapModeToName+0x16>
2000d68c:	2b02      	cmp	r3, #2
2000d68e:	d002      	beq.n	2000d696 <MapModeToName+0x1a>
2000d690:	e003      	b.n	2000d69a <MapModeToName+0x1e>
	{
	case ESM_ProcessPress:
		return "Process";
2000d692:	4b05      	ldr	r3, [pc, #20]	; (2000d6a8 <MapModeToName+0x2c>)
2000d694:	e002      	b.n	2000d69c <MapModeToName+0x20>
	case ESM_IgnorePress:
		return "Ignore";
2000d696:	4b05      	ldr	r3, [pc, #20]	; (2000d6ac <MapModeToName+0x30>)
2000d698:	e000      	b.n	2000d69c <MapModeToName+0x20>
	}
	return "";
2000d69a:	4b05      	ldr	r3, [pc, #20]	; (2000d6b0 <MapModeToName+0x34>)
}
2000d69c:	4618      	mov	r0, r3
2000d69e:	370c      	adds	r7, #12
2000d6a0:	46bd      	mov	sp, r7
2000d6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d6a6:	4770      	bx	lr
2000d6a8:	200119ec 	.word	0x200119ec
2000d6ac:	200119f4 	.word	0x200119f4
2000d6b0:	200119e8 	.word	0x200119e8

2000d6b4 <MapBool>:
static char* MapBool(bool value)
{
2000d6b4:	b480      	push	{r7}
2000d6b6:	b083      	sub	sp, #12
2000d6b8:	af00      	add	r7, sp, #0
2000d6ba:	4603      	mov	r3, r0
2000d6bc:	71fb      	strb	r3, [r7, #7]
	if(value)
2000d6be:	79fb      	ldrb	r3, [r7, #7]
2000d6c0:	2b00      	cmp	r3, #0
2000d6c2:	d001      	beq.n	2000d6c8 <MapBool+0x14>
	{
		return "true";
2000d6c4:	4b04      	ldr	r3, [pc, #16]	; (2000d6d8 <MapBool+0x24>)
2000d6c6:	e000      	b.n	2000d6ca <MapBool+0x16>
	}
	return "false";
2000d6c8:	4b04      	ldr	r3, [pc, #16]	; (2000d6dc <MapBool+0x28>)
}
2000d6ca:	4618      	mov	r0, r3
2000d6cc:	370c      	adds	r7, #12
2000d6ce:	46bd      	mov	sp, r7
2000d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d6d4:	4770      	bx	lr
2000d6d6:	bf00      	nop
2000d6d8:	200119fc 	.word	0x200119fc
2000d6dc:	20011a04 	.word	0x20011a04

2000d6e0 <CMD_ProcessCommand>:

/// API ///
void CMD_ProcessCommand(const char* command)
{
2000d6e0:	b580      	push	{r7, lr}
2000d6e2:	b084      	sub	sp, #16
2000d6e4:	af00      	add	r7, sp, #0
2000d6e6:	6078      	str	r0, [r7, #4]
	CmdData data = CMD_ParseComand(command);
2000d6e8:	f107 0308 	add.w	r3, r7, #8
2000d6ec:	6879      	ldr	r1, [r7, #4]
2000d6ee:	4618      	mov	r0, r3
2000d6f0:	f000 f862 	bl	2000d7b8 <CMD_ParseComand>
	switch(data.m_type)
2000d6f4:	7a3b      	ldrb	r3, [r7, #8]
2000d6f6:	2b03      	cmp	r3, #3
2000d6f8:	d822      	bhi.n	2000d740 <CMD_ProcessCommand+0x60>
2000d6fa:	a201      	add	r2, pc, #4	; (adr r2, 2000d700 <CMD_ProcessCommand+0x20>)
2000d6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000d700:	2000d711 	.word	0x2000d711
2000d704:	2000d717 	.word	0x2000d717
2000d708:	2000d723 	.word	0x2000d723
2000d70c:	2000d72d 	.word	0x2000d72d
	{
	case ECT_GetInfo:
		CMD_GetInfo();
2000d710:	f000 f81c 	bl	2000d74c <CMD_GetInfo>
		break;
2000d714:	e015      	b.n	2000d742 <CMD_ProcessCommand+0x62>
	case ECT_SetMode:
		SEM_SetMode(data.m_arg);
2000d716:	68fb      	ldr	r3, [r7, #12]
2000d718:	b2db      	uxtb	r3, r3
2000d71a:	4618      	mov	r0, r3
2000d71c:	f000 faba 	bl	2000dc94 <SEM_SetMode>
		break;
2000d720:	e00f      	b.n	2000d742 <CMD_ProcessCommand+0x62>
	case ECT_SetTimeout:
		SEM_SetRedTimeout(data.m_arg);
2000d722:	68fb      	ldr	r3, [r7, #12]
2000d724:	4618      	mov	r0, r3
2000d726:	f000 fac5 	bl	2000dcb4 <SEM_SetRedTimeout>
		break;
2000d72a:	e00a      	b.n	2000d742 <CMD_ProcessCommand+0x62>
	case ECT_SetInterrupts:
		SDK_UART_EnableInterrupts(data.m_arg);
2000d72c:	68fb      	ldr	r3, [r7, #12]
2000d72e:	2b00      	cmp	r3, #0
2000d730:	bf14      	ite	ne
2000d732:	2301      	movne	r3, #1
2000d734:	2300      	moveq	r3, #0
2000d736:	b2db      	uxtb	r3, r3
2000d738:	4618      	mov	r0, r3
2000d73a:	f000 ff0b 	bl	2000e554 <SDK_UART_EnableInterrupts>
		break;
2000d73e:	e000      	b.n	2000d742 <CMD_ProcessCommand+0x62>
	default:
		break;
2000d740:	bf00      	nop
	}
}
2000d742:	bf00      	nop
2000d744:	3710      	adds	r7, #16
2000d746:	46bd      	mov	sp, r7
2000d748:	bd80      	pop	{r7, pc}
2000d74a:	bf00      	nop

2000d74c <CMD_GetInfo>:
void CMD_GetInfo()
{
2000d74c:	b5f0      	push	{r4, r5, r6, r7, lr}
2000d74e:	b0a5      	sub	sp, #148	; 0x94
2000d750:	af02      	add	r7, sp, #8
	SemaphoreState info = SEM_GetState();
2000d752:	f107 0380 	add.w	r3, r7, #128	; 0x80
2000d756:	4618      	mov	r0, r3
2000d758:	f000 fa8a 	bl	2000dc70 <SEM_GetState>
	char buffer[128];

	sprintf(buffer, "\nColor: %s \nModeOnPress: %s \nRed timeout: %u \nInterrupts: %s \n",
2000d75c:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
2000d760:	4618      	mov	r0, r3
2000d762:	f7ff ff5d 	bl	2000d620 <MapColorStateToName>
2000d766:	4605      	mov	r5, r0
2000d768:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
2000d76c:	4618      	mov	r0, r3
2000d76e:	f7ff ff85 	bl	2000d67c <MapModeToName>
2000d772:	4606      	mov	r6, r0
2000d774:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
2000d778:	f000 ff40 	bl	2000e5fc <SDK_UART_IsInterruptible>
2000d77c:	4603      	mov	r3, r0
2000d77e:	4618      	mov	r0, r3
2000d780:	f7ff ff98 	bl	2000d6b4 <MapBool>
2000d784:	4603      	mov	r3, r0
2000d786:	4638      	mov	r0, r7
2000d788:	9301      	str	r3, [sp, #4]
2000d78a:	9400      	str	r4, [sp, #0]
2000d78c:	4633      	mov	r3, r6
2000d78e:	462a      	mov	r2, r5
2000d790:	4908      	ldr	r1, [pc, #32]	; (2000d7b4 <CMD_GetInfo+0x68>)
2000d792:	f002 ffbb 	bl	2001070c <siprintf>
			MapColorStateToName(info.m_color), MapModeToName(info.m_mode),
			info.m_redTimeout, MapBool(SDK_UART_IsInterruptible()));

	SDK_UART_Transmit((uint8_t*)buffer, strlen(buffer));
2000d796:	463b      	mov	r3, r7
2000d798:	4618      	mov	r0, r3
2000d79a:	f7ff fd19 	bl	2000d1d0 <strlen>
2000d79e:	4602      	mov	r2, r0
2000d7a0:	463b      	mov	r3, r7
2000d7a2:	4611      	mov	r1, r2
2000d7a4:	4618      	mov	r0, r3
2000d7a6:	f000 fee5 	bl	2000e574 <SDK_UART_Transmit>
}
2000d7aa:	bf00      	nop
2000d7ac:	378c      	adds	r7, #140	; 0x8c
2000d7ae:	46bd      	mov	sp, r7
2000d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000d7b2:	bf00      	nop
2000d7b4:	20011a0c 	.word	0x20011a0c

2000d7b8 <CMD_ParseComand>:

// parsing
CmdData CMD_ParseComand(const char* command)
{
2000d7b8:	b580      	push	{r7, lr}
2000d7ba:	b086      	sub	sp, #24
2000d7bc:	af00      	add	r7, sp, #0
2000d7be:	6078      	str	r0, [r7, #4]
2000d7c0:	6039      	str	r1, [r7, #0]
	CmdData data;
	data.m_type = ECT_Undefined;
2000d7c2:	2304      	movs	r3, #4
2000d7c4:	723b      	strb	r3, [r7, #8]
	data.m_arg = 0;
2000d7c6:	2300      	movs	r3, #0
2000d7c8:	60fb      	str	r3, [r7, #12]

	size_t strSize = strlen(command);
2000d7ca:	6838      	ldr	r0, [r7, #0]
2000d7cc:	f7ff fd00 	bl	2000d1d0 <strlen>
2000d7d0:	6138      	str	r0, [r7, #16]
	uint32_t commandStart = 0;
2000d7d2:	2300      	movs	r3, #0
2000d7d4:	617b      	str	r3, [r7, #20]

	// find first non-space symbol
	while (commandStart < strSize && isspace((int)command[commandStart]))
2000d7d6:	e002      	b.n	2000d7de <CMD_ParseComand+0x26>
	{
		commandStart++;
2000d7d8:	697b      	ldr	r3, [r7, #20]
2000d7da:	3301      	adds	r3, #1
2000d7dc:	617b      	str	r3, [r7, #20]
	while (commandStart < strSize && isspace((int)command[commandStart]))
2000d7de:	697a      	ldr	r2, [r7, #20]
2000d7e0:	693b      	ldr	r3, [r7, #16]
2000d7e2:	429a      	cmp	r2, r3
2000d7e4:	d20b      	bcs.n	2000d7fe <CMD_ParseComand+0x46>
2000d7e6:	683a      	ldr	r2, [r7, #0]
2000d7e8:	697b      	ldr	r3, [r7, #20]
2000d7ea:	4413      	add	r3, r2
2000d7ec:	781b      	ldrb	r3, [r3, #0]
2000d7ee:	3301      	adds	r3, #1
2000d7f0:	4a26      	ldr	r2, [pc, #152]	; (2000d88c <CMD_ParseComand+0xd4>)
2000d7f2:	4413      	add	r3, r2
2000d7f4:	781b      	ldrb	r3, [r3, #0]
2000d7f6:	f003 0308 	and.w	r3, r3, #8
2000d7fa:	2b00      	cmp	r3, #0
2000d7fc:	d1ec      	bne.n	2000d7d8 <CMD_ParseComand+0x20>
	}
	if (commandStart == strSize)
2000d7fe:	697a      	ldr	r2, [r7, #20]
2000d800:	693b      	ldr	r3, [r7, #16]
2000d802:	429a      	cmp	r2, r3
2000d804:	d108      	bne.n	2000d818 <CMD_ParseComand+0x60>
	{
		return data;
2000d806:	687b      	ldr	r3, [r7, #4]
2000d808:	461a      	mov	r2, r3
2000d80a:	f107 0308 	add.w	r3, r7, #8
2000d80e:	e893 0003 	ldmia.w	r3, {r0, r1}
2000d812:	e882 0003 	stmia.w	r2, {r0, r1}
2000d816:	e035      	b.n	2000d884 <CMD_ParseComand+0xcc>
	}
	command = command + commandStart;
2000d818:	683a      	ldr	r2, [r7, #0]
2000d81a:	697b      	ldr	r3, [r7, #20]
2000d81c:	4413      	add	r3, r2
2000d81e:	603b      	str	r3, [r7, #0]
	strSize -= commandStart;
2000d820:	693a      	ldr	r2, [r7, #16]
2000d822:	697b      	ldr	r3, [r7, #20]
2000d824:	1ad3      	subs	r3, r2, r3
2000d826:	613b      	str	r3, [r7, #16]

	// try parse as different commands
	if (CMD_ParseGetInfo(command, strSize, &data))
2000d828:	693b      	ldr	r3, [r7, #16]
2000d82a:	f107 0208 	add.w	r2, r7, #8
2000d82e:	4619      	mov	r1, r3
2000d830:	6838      	ldr	r0, [r7, #0]
2000d832:	f000 f82d 	bl	2000d890 <CMD_ParseGetInfo>
2000d836:	4603      	mov	r3, r0
2000d838:	2b00      	cmp	r3, #0
2000d83a:	d008      	beq.n	2000d84e <CMD_ParseComand+0x96>
	{
		return data;
2000d83c:	687b      	ldr	r3, [r7, #4]
2000d83e:	461a      	mov	r2, r3
2000d840:	f107 0308 	add.w	r3, r7, #8
2000d844:	e893 0003 	ldmia.w	r3, {r0, r1}
2000d848:	e882 0003 	stmia.w	r2, {r0, r1}
2000d84c:	e01a      	b.n	2000d884 <CMD_ParseComand+0xcc>
	}
	if (CMD_ParseSet(command, strSize, &data))
2000d84e:	693b      	ldr	r3, [r7, #16]
2000d850:	f107 0208 	add.w	r2, r7, #8
2000d854:	4619      	mov	r1, r3
2000d856:	6838      	ldr	r0, [r7, #0]
2000d858:	f000 f84a 	bl	2000d8f0 <CMD_ParseSet>
2000d85c:	4603      	mov	r3, r0
2000d85e:	2b00      	cmp	r3, #0
2000d860:	d008      	beq.n	2000d874 <CMD_ParseComand+0xbc>
	{
		return data;
2000d862:	687b      	ldr	r3, [r7, #4]
2000d864:	461a      	mov	r2, r3
2000d866:	f107 0308 	add.w	r3, r7, #8
2000d86a:	e893 0003 	ldmia.w	r3, {r0, r1}
2000d86e:	e882 0003 	stmia.w	r2, {r0, r1}
2000d872:	e007      	b.n	2000d884 <CMD_ParseComand+0xcc>
	}

	return data;
2000d874:	687b      	ldr	r3, [r7, #4]
2000d876:	461a      	mov	r2, r3
2000d878:	f107 0308 	add.w	r3, r7, #8
2000d87c:	e893 0003 	ldmia.w	r3, {r0, r1}
2000d880:	e882 0003 	stmia.w	r2, {r0, r1}
}
2000d884:	6878      	ldr	r0, [r7, #4]
2000d886:	3718      	adds	r7, #24
2000d888:	46bd      	mov	sp, r7
2000d88a:	bd80      	pop	{r7, pc}
2000d88c:	20011ea4 	.word	0x20011ea4

2000d890 <CMD_ParseGetInfo>:

bool CMD_ParseGetInfo(const char* command, int strSize, CmdData* data)
{
2000d890:	b580      	push	{r7, lr}
2000d892:	b086      	sub	sp, #24
2000d894:	af00      	add	r7, sp, #0
2000d896:	60f8      	str	r0, [r7, #12]
2000d898:	60b9      	str	r1, [r7, #8]
2000d89a:	607a      	str	r2, [r7, #4]
	char* pCh = strstr(command, "?");
2000d89c:	213f      	movs	r1, #63	; 0x3f
2000d89e:	68f8      	ldr	r0, [r7, #12]
2000d8a0:	f002 ff82 	bl	200107a8 <strchr>
2000d8a4:	6178      	str	r0, [r7, #20]
	if (command && pCh == command &&
2000d8a6:	68fb      	ldr	r3, [r7, #12]
2000d8a8:	2b00      	cmp	r3, #0
2000d8aa:	d019      	beq.n	2000d8e0 <CMD_ParseGetInfo+0x50>
2000d8ac:	697a      	ldr	r2, [r7, #20]
2000d8ae:	68fb      	ldr	r3, [r7, #12]
2000d8b0:	429a      	cmp	r2, r3
2000d8b2:	d115      	bne.n	2000d8e0 <CMD_ParseGetInfo+0x50>
2000d8b4:	68bb      	ldr	r3, [r7, #8]
2000d8b6:	2b01      	cmp	r3, #1
2000d8b8:	d00a      	beq.n	2000d8d0 <CMD_ParseGetInfo+0x40>
		(strSize == 1 || isspace((int)command[1])))
2000d8ba:	68fb      	ldr	r3, [r7, #12]
2000d8bc:	3301      	adds	r3, #1
2000d8be:	781b      	ldrb	r3, [r3, #0]
2000d8c0:	3301      	adds	r3, #1
2000d8c2:	4a0a      	ldr	r2, [pc, #40]	; (2000d8ec <CMD_ParseGetInfo+0x5c>)
2000d8c4:	4413      	add	r3, r2
2000d8c6:	781b      	ldrb	r3, [r3, #0]
2000d8c8:	f003 0308 	and.w	r3, r3, #8
2000d8cc:	2b00      	cmp	r3, #0
2000d8ce:	d007      	beq.n	2000d8e0 <CMD_ParseGetInfo+0x50>
	{
		data->m_type = ECT_GetInfo;
2000d8d0:	687b      	ldr	r3, [r7, #4]
2000d8d2:	2200      	movs	r2, #0
2000d8d4:	701a      	strb	r2, [r3, #0]
		data->m_arg = 0;
2000d8d6:	687b      	ldr	r3, [r7, #4]
2000d8d8:	2200      	movs	r2, #0
2000d8da:	605a      	str	r2, [r3, #4]
		return true;
2000d8dc:	2301      	movs	r3, #1
2000d8de:	e000      	b.n	2000d8e2 <CMD_ParseGetInfo+0x52>
	}
	return false;
2000d8e0:	2300      	movs	r3, #0
}
2000d8e2:	4618      	mov	r0, r3
2000d8e4:	3718      	adds	r7, #24
2000d8e6:	46bd      	mov	sp, r7
2000d8e8:	bd80      	pop	{r7, pc}
2000d8ea:	bf00      	nop
2000d8ec:	20011ea4 	.word	0x20011ea4

2000d8f0 <CMD_ParseSet>:

bool CMD_ParseSet(const char* command, int strSize, CmdData* data)
{
2000d8f0:	b580      	push	{r7, lr}
2000d8f2:	b086      	sub	sp, #24
2000d8f4:	af00      	add	r7, sp, #0
2000d8f6:	60f8      	str	r0, [r7, #12]
2000d8f8:	60b9      	str	r1, [r7, #8]
2000d8fa:	607a      	str	r2, [r7, #4]
	char* pCh = strstr(command, "set");
2000d8fc:	4930      	ldr	r1, [pc, #192]	; (2000d9c0 <CMD_ParseSet+0xd0>)
2000d8fe:	68f8      	ldr	r0, [r7, #12]
2000d900:	f002 ff5f 	bl	200107c2 <strstr>
2000d904:	6138      	str	r0, [r7, #16]
	if (command && pCh == command &&
2000d906:	68fb      	ldr	r3, [r7, #12]
2000d908:	2b00      	cmp	r3, #0
2000d90a:	d053      	beq.n	2000d9b4 <CMD_ParseSet+0xc4>
2000d90c:	693a      	ldr	r2, [r7, #16]
2000d90e:	68fb      	ldr	r3, [r7, #12]
2000d910:	429a      	cmp	r2, r3
2000d912:	d14f      	bne.n	2000d9b4 <CMD_ParseSet+0xc4>
2000d914:	68bb      	ldr	r3, [r7, #8]
2000d916:	2b03      	cmp	r3, #3
2000d918:	dd4c      	ble.n	2000d9b4 <CMD_ParseSet+0xc4>
		strSize > 3 && isspace((int)command[3]))
2000d91a:	68fb      	ldr	r3, [r7, #12]
2000d91c:	3303      	adds	r3, #3
2000d91e:	781b      	ldrb	r3, [r3, #0]
2000d920:	3301      	adds	r3, #1
2000d922:	4a28      	ldr	r2, [pc, #160]	; (2000d9c4 <CMD_ParseSet+0xd4>)
2000d924:	4413      	add	r3, r2
2000d926:	781b      	ldrb	r3, [r3, #0]
2000d928:	f003 0308 	and.w	r3, r3, #8
2000d92c:	2b00      	cmp	r3, #0
2000d92e:	d041      	beq.n	2000d9b4 <CMD_ParseSet+0xc4>
	{
		uint32_t commandStart = 3;
2000d930:	2303      	movs	r3, #3
2000d932:	617b      	str	r3, [r7, #20]
		while (commandStart < strSize && isspace((int)command[commandStart]))
2000d934:	e002      	b.n	2000d93c <CMD_ParseSet+0x4c>
		{
			commandStart++;
2000d936:	697b      	ldr	r3, [r7, #20]
2000d938:	3301      	adds	r3, #1
2000d93a:	617b      	str	r3, [r7, #20]
		while (commandStart < strSize && isspace((int)command[commandStart]))
2000d93c:	68bb      	ldr	r3, [r7, #8]
2000d93e:	697a      	ldr	r2, [r7, #20]
2000d940:	429a      	cmp	r2, r3
2000d942:	d20b      	bcs.n	2000d95c <CMD_ParseSet+0x6c>
2000d944:	68fa      	ldr	r2, [r7, #12]
2000d946:	697b      	ldr	r3, [r7, #20]
2000d948:	4413      	add	r3, r2
2000d94a:	781b      	ldrb	r3, [r3, #0]
2000d94c:	3301      	adds	r3, #1
2000d94e:	4a1d      	ldr	r2, [pc, #116]	; (2000d9c4 <CMD_ParseSet+0xd4>)
2000d950:	4413      	add	r3, r2
2000d952:	781b      	ldrb	r3, [r3, #0]
2000d954:	f003 0308 	and.w	r3, r3, #8
2000d958:	2b00      	cmp	r3, #0
2000d95a:	d1ec      	bne.n	2000d936 <CMD_ParseSet+0x46>
		}
		if (commandStart == strSize)
2000d95c:	68bb      	ldr	r3, [r7, #8]
2000d95e:	697a      	ldr	r2, [r7, #20]
2000d960:	429a      	cmp	r2, r3
2000d962:	d101      	bne.n	2000d968 <CMD_ParseSet+0x78>
		{
			return false;
2000d964:	2300      	movs	r3, #0
2000d966:	e026      	b.n	2000d9b6 <CMD_ParseSet+0xc6>
		}
		command = command + commandStart;
2000d968:	68fa      	ldr	r2, [r7, #12]
2000d96a:	697b      	ldr	r3, [r7, #20]
2000d96c:	4413      	add	r3, r2
2000d96e:	60fb      	str	r3, [r7, #12]
		strSize -= commandStart;
2000d970:	68ba      	ldr	r2, [r7, #8]
2000d972:	697b      	ldr	r3, [r7, #20]
2000d974:	1ad3      	subs	r3, r2, r3
2000d976:	60bb      	str	r3, [r7, #8]


		if (CMD_ParseSetMode(command, strSize, data))
2000d978:	687a      	ldr	r2, [r7, #4]
2000d97a:	68b9      	ldr	r1, [r7, #8]
2000d97c:	68f8      	ldr	r0, [r7, #12]
2000d97e:	f000 f823 	bl	2000d9c8 <CMD_ParseSetMode>
2000d982:	4603      	mov	r3, r0
2000d984:	2b00      	cmp	r3, #0
2000d986:	d001      	beq.n	2000d98c <CMD_ParseSet+0x9c>
		{
			return true;
2000d988:	2301      	movs	r3, #1
2000d98a:	e014      	b.n	2000d9b6 <CMD_ParseSet+0xc6>
		}
		if (CMD_ParseSetTimeout(command, strSize, data))
2000d98c:	687a      	ldr	r2, [r7, #4]
2000d98e:	68b9      	ldr	r1, [r7, #8]
2000d990:	68f8      	ldr	r0, [r7, #12]
2000d992:	f000 f83b 	bl	2000da0c <CMD_ParseSetTimeout>
2000d996:	4603      	mov	r3, r0
2000d998:	2b00      	cmp	r3, #0
2000d99a:	d001      	beq.n	2000d9a0 <CMD_ParseSet+0xb0>
		{
			return true;
2000d99c:	2301      	movs	r3, #1
2000d99e:	e00a      	b.n	2000d9b6 <CMD_ParseSet+0xc6>
		}
		if (CMD_ParseSetInterrupts(command, strSize, data))
2000d9a0:	687a      	ldr	r2, [r7, #4]
2000d9a2:	68b9      	ldr	r1, [r7, #8]
2000d9a4:	68f8      	ldr	r0, [r7, #12]
2000d9a6:	f000 f853 	bl	2000da50 <CMD_ParseSetInterrupts>
2000d9aa:	4603      	mov	r3, r0
2000d9ac:	2b00      	cmp	r3, #0
2000d9ae:	d001      	beq.n	2000d9b4 <CMD_ParseSet+0xc4>
		{
			return true;
2000d9b0:	2301      	movs	r3, #1
2000d9b2:	e000      	b.n	2000d9b6 <CMD_ParseSet+0xc6>
		}
	}
	return false;
2000d9b4:	2300      	movs	r3, #0
}
2000d9b6:	4618      	mov	r0, r3
2000d9b8:	3718      	adds	r7, #24
2000d9ba:	46bd      	mov	sp, r7
2000d9bc:	bd80      	pop	{r7, pc}
2000d9be:	bf00      	nop
2000d9c0:	20011a4c 	.word	0x20011a4c
2000d9c4:	20011ea4 	.word	0x20011ea4

2000d9c8 <CMD_ParseSetMode>:

bool CMD_ParseSetMode(const char* command, int strSize, CmdData* data)
{
2000d9c8:	b580      	push	{r7, lr}
2000d9ca:	b086      	sub	sp, #24
2000d9cc:	af00      	add	r7, sp, #0
2000d9ce:	60f8      	str	r0, [r7, #12]
2000d9d0:	60b9      	str	r1, [r7, #8]
2000d9d2:	607a      	str	r2, [r7, #4]
	int value;
	uint32_t success = sscanf(command, "mode %d", &value);
2000d9d4:	f107 0310 	add.w	r3, r7, #16
2000d9d8:	461a      	mov	r2, r3
2000d9da:	490b      	ldr	r1, [pc, #44]	; (2000da08 <CMD_ParseSetMode+0x40>)
2000d9dc:	68f8      	ldr	r0, [r7, #12]
2000d9de:	f002 feb5 	bl	2001074c <siscanf>
2000d9e2:	4603      	mov	r3, r0
2000d9e4:	617b      	str	r3, [r7, #20]
	if (success == 1)
2000d9e6:	697b      	ldr	r3, [r7, #20]
2000d9e8:	2b01      	cmp	r3, #1
2000d9ea:	d108      	bne.n	2000d9fe <CMD_ParseSetMode+0x36>
	{
		data->m_type = ECT_SetMode;
2000d9ec:	687b      	ldr	r3, [r7, #4]
2000d9ee:	2201      	movs	r2, #1
2000d9f0:	701a      	strb	r2, [r3, #0]
		data->m_arg = value;
2000d9f2:	693b      	ldr	r3, [r7, #16]
2000d9f4:	461a      	mov	r2, r3
2000d9f6:	687b      	ldr	r3, [r7, #4]
2000d9f8:	605a      	str	r2, [r3, #4]
		return true;
2000d9fa:	2301      	movs	r3, #1
2000d9fc:	e000      	b.n	2000da00 <CMD_ParseSetMode+0x38>
	}
	return false;
2000d9fe:	2300      	movs	r3, #0
}
2000da00:	4618      	mov	r0, r3
2000da02:	3718      	adds	r7, #24
2000da04:	46bd      	mov	sp, r7
2000da06:	bd80      	pop	{r7, pc}
2000da08:	20011a50 	.word	0x20011a50

2000da0c <CMD_ParseSetTimeout>:
bool CMD_ParseSetTimeout(const char* command, int strSize, CmdData* data)
{
2000da0c:	b580      	push	{r7, lr}
2000da0e:	b086      	sub	sp, #24
2000da10:	af00      	add	r7, sp, #0
2000da12:	60f8      	str	r0, [r7, #12]
2000da14:	60b9      	str	r1, [r7, #8]
2000da16:	607a      	str	r2, [r7, #4]
	int value;
	uint32_t success = sscanf(command, "timeout %d", &value);
2000da18:	f107 0310 	add.w	r3, r7, #16
2000da1c:	461a      	mov	r2, r3
2000da1e:	490b      	ldr	r1, [pc, #44]	; (2000da4c <CMD_ParseSetTimeout+0x40>)
2000da20:	68f8      	ldr	r0, [r7, #12]
2000da22:	f002 fe93 	bl	2001074c <siscanf>
2000da26:	4603      	mov	r3, r0
2000da28:	617b      	str	r3, [r7, #20]
	if (success == 1)
2000da2a:	697b      	ldr	r3, [r7, #20]
2000da2c:	2b01      	cmp	r3, #1
2000da2e:	d108      	bne.n	2000da42 <CMD_ParseSetTimeout+0x36>
	{
		data->m_type = ECT_SetTimeout;
2000da30:	687b      	ldr	r3, [r7, #4]
2000da32:	2202      	movs	r2, #2
2000da34:	701a      	strb	r2, [r3, #0]
		data->m_arg = value;
2000da36:	693b      	ldr	r3, [r7, #16]
2000da38:	461a      	mov	r2, r3
2000da3a:	687b      	ldr	r3, [r7, #4]
2000da3c:	605a      	str	r2, [r3, #4]
		return true;
2000da3e:	2301      	movs	r3, #1
2000da40:	e000      	b.n	2000da44 <CMD_ParseSetTimeout+0x38>
	}
	return false;
2000da42:	2300      	movs	r3, #0
}
2000da44:	4618      	mov	r0, r3
2000da46:	3718      	adds	r7, #24
2000da48:	46bd      	mov	sp, r7
2000da4a:	bd80      	pop	{r7, pc}
2000da4c:	20011a58 	.word	0x20011a58

2000da50 <CMD_ParseSetInterrupts>:
bool CMD_ParseSetInterrupts(const char* command, int strSize, CmdData* data)
{
2000da50:	b580      	push	{r7, lr}
2000da52:	b086      	sub	sp, #24
2000da54:	af00      	add	r7, sp, #0
2000da56:	60f8      	str	r0, [r7, #12]
2000da58:	60b9      	str	r1, [r7, #8]
2000da5a:	607a      	str	r2, [r7, #4]
	int value;
	uint32_t success = sscanf(command, "interrupts %d", &value);
2000da5c:	f107 0310 	add.w	r3, r7, #16
2000da60:	461a      	mov	r2, r3
2000da62:	490b      	ldr	r1, [pc, #44]	; (2000da90 <CMD_ParseSetInterrupts+0x40>)
2000da64:	68f8      	ldr	r0, [r7, #12]
2000da66:	f002 fe71 	bl	2001074c <siscanf>
2000da6a:	4603      	mov	r3, r0
2000da6c:	617b      	str	r3, [r7, #20]
	if (success == 1)
2000da6e:	697b      	ldr	r3, [r7, #20]
2000da70:	2b01      	cmp	r3, #1
2000da72:	d108      	bne.n	2000da86 <CMD_ParseSetInterrupts+0x36>
	{
		data->m_type = ECT_SetInterrupts;
2000da74:	687b      	ldr	r3, [r7, #4]
2000da76:	2203      	movs	r2, #3
2000da78:	701a      	strb	r2, [r3, #0]
		data->m_arg = value;
2000da7a:	693b      	ldr	r3, [r7, #16]
2000da7c:	461a      	mov	r2, r3
2000da7e:	687b      	ldr	r3, [r7, #4]
2000da80:	605a      	str	r2, [r3, #4]
		return true;
2000da82:	2301      	movs	r3, #1
2000da84:	e000      	b.n	2000da88 <CMD_ParseSetInterrupts+0x38>
	}
	return false;
2000da86:	2300      	movs	r3, #0
}
2000da88:	4618      	mov	r0, r3
2000da8a:	3718      	adds	r7, #24
2000da8c:	46bd      	mov	sp, r7
2000da8e:	bd80      	pop	{r7, pc}
2000da90:	20011a64 	.word	0x20011a64

2000da94 <MapColorStateToLed>:

/// STATIC ///
static SemaphoreState s_semaphoreState;

static uint16_t MapColorStateToLed(eColorState color)
{
2000da94:	b480      	push	{r7}
2000da96:	b083      	sub	sp, #12
2000da98:	af00      	add	r7, sp, #0
2000da9a:	4603      	mov	r3, r0
2000da9c:	71fb      	strb	r3, [r7, #7]
	switch(color)
2000da9e:	79fb      	ldrb	r3, [r7, #7]
2000daa0:	2b03      	cmp	r3, #3
2000daa2:	d813      	bhi.n	2000dacc <MapColorStateToLed+0x38>
2000daa4:	a201      	add	r2, pc, #4	; (adr r2, 2000daac <MapColorStateToLed+0x18>)
2000daa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
2000daaa:	bf00      	nop
2000daac:	2000dabd 	.word	0x2000dabd
2000dab0:	2000dac1 	.word	0x2000dac1
2000dab4:	2000dac5 	.word	0x2000dac5
2000dab8:	2000dac9 	.word	0x2000dac9
	{
	case ECS_Green:
		return SDK_LED_GREEN;
2000dabc:	2301      	movs	r3, #1
2000dabe:	e006      	b.n	2000dace <MapColorStateToLed+0x3a>
	case ECS_Yellow:
		return SDK_LED_YELLOW;
2000dac0:	2302      	movs	r3, #2
2000dac2:	e004      	b.n	2000dace <MapColorStateToLed+0x3a>
	case ECS_Red:
		return SDK_LED_RED;
2000dac4:	2303      	movs	r3, #3
2000dac6:	e002      	b.n	2000dace <MapColorStateToLed+0x3a>
	case ECS_BlinkingGreen:
		return SDK_LED_GREEN;
2000dac8:	2301      	movs	r3, #1
2000daca:	e000      	b.n	2000dace <MapColorStateToLed+0x3a>
	}
	return 0;
2000dacc:	2300      	movs	r3, #0
}
2000dace:	4618      	mov	r0, r3
2000dad0:	370c      	adds	r7, #12
2000dad2:	46bd      	mov	sp, r7
2000dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dad8:	4770      	bx	lr
2000dada:	bf00      	nop

2000dadc <MapLedToColorState>:
static eColorState MapLedToColorState(uint16_t led, bool isBlinking)
{
2000dadc:	b480      	push	{r7}
2000dade:	b083      	sub	sp, #12
2000dae0:	af00      	add	r7, sp, #0
2000dae2:	4603      	mov	r3, r0
2000dae4:	460a      	mov	r2, r1
2000dae6:	80fb      	strh	r3, [r7, #6]
2000dae8:	4613      	mov	r3, r2
2000daea:	717b      	strb	r3, [r7, #5]
	switch(led)
2000daec:	88fb      	ldrh	r3, [r7, #6]
2000daee:	2b03      	cmp	r3, #3
2000daf0:	d00f      	beq.n	2000db12 <MapLedToColorState+0x36>
2000daf2:	2b03      	cmp	r3, #3
2000daf4:	dc0f      	bgt.n	2000db16 <MapLedToColorState+0x3a>
2000daf6:	2b01      	cmp	r3, #1
2000daf8:	d002      	beq.n	2000db00 <MapLedToColorState+0x24>
2000dafa:	2b02      	cmp	r3, #2
2000dafc:	d007      	beq.n	2000db0e <MapLedToColorState+0x32>
2000dafe:	e00a      	b.n	2000db16 <MapLedToColorState+0x3a>
	{
	case SDK_LED_GREEN:
		return isBlinking ? ECS_BlinkingGreen : ECS_Green;
2000db00:	797b      	ldrb	r3, [r7, #5]
2000db02:	2b00      	cmp	r3, #0
2000db04:	d001      	beq.n	2000db0a <MapLedToColorState+0x2e>
2000db06:	2303      	movs	r3, #3
2000db08:	e006      	b.n	2000db18 <MapLedToColorState+0x3c>
2000db0a:	2300      	movs	r3, #0
2000db0c:	e004      	b.n	2000db18 <MapLedToColorState+0x3c>
	case SDK_LED_YELLOW:
		return ECS_Yellow;
2000db0e:	2301      	movs	r3, #1
2000db10:	e002      	b.n	2000db18 <MapLedToColorState+0x3c>
	case SDK_LED_RED:
		return ECS_Red;
2000db12:	2302      	movs	r3, #2
2000db14:	e000      	b.n	2000db18 <MapLedToColorState+0x3c>
	}
	return 0;
2000db16:	2300      	movs	r3, #0
}
2000db18:	4618      	mov	r0, r3
2000db1a:	370c      	adds	r7, #12
2000db1c:	46bd      	mov	sp, r7
2000db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db22:	4770      	bx	lr

2000db24 <SEM_Init>:

/// API ///
void SEM_Init()
{
2000db24:	b480      	push	{r7}
2000db26:	af00      	add	r7, sp, #0
	s_semaphoreState.m_color = ECS_Red;
2000db28:	4b07      	ldr	r3, [pc, #28]	; (2000db48 <SEM_Init+0x24>)
2000db2a:	2202      	movs	r2, #2
2000db2c:	701a      	strb	r2, [r3, #0]
	s_semaphoreState.m_mode = ESM_ProcessPress;
2000db2e:	4b06      	ldr	r3, [pc, #24]	; (2000db48 <SEM_Init+0x24>)
2000db30:	2201      	movs	r2, #1
2000db32:	705a      	strb	r2, [r3, #1]
	s_semaphoreState.m_redTimeout = SEM_RED_PERIOD;
2000db34:	4b04      	ldr	r3, [pc, #16]	; (2000db48 <SEM_Init+0x24>)
2000db36:	f240 228a 	movw	r2, #650	; 0x28a
2000db3a:	605a      	str	r2, [r3, #4]
}
2000db3c:	bf00      	nop
2000db3e:	46bd      	mov	sp, r7
2000db40:	f85d 7b04 	ldr.w	r7, [sp], #4
2000db44:	4770      	bx	lr
2000db46:	bf00      	nop
2000db48:	20012100 	.word	0x20012100

2000db4c <SEM_Cycle>:

void SEM_Cycle()
{
2000db4c:	b580      	push	{r7, lr}
2000db4e:	af00      	add	r7, sp, #0
	// green
	SEM_Show(SDK_LED_GREEN, SEM_GREEN_PERIOD, false);
2000db50:	2200      	movs	r2, #0
2000db52:	21c8      	movs	r1, #200	; 0xc8
2000db54:	2001      	movs	r0, #1
2000db56:	f000 f81b 	bl	2000db90 <SEM_Show>
	// blinking green
	SEM_Blink(SDK_LED_GREEN, SEM_BLINK_PERIOD, SEM_BLINK_COUNT);
2000db5a:	2202      	movs	r2, #2
2000db5c:	2132      	movs	r1, #50	; 0x32
2000db5e:	2001      	movs	r0, #1
2000db60:	f000 f84a 	bl	2000dbf8 <SEM_Blink>

	// yellow
	SEM_Show(SDK_LED_YELLOW, SEM_YELLOW_PERIOD, false);
2000db64:	2200      	movs	r2, #0
2000db66:	2132      	movs	r1, #50	; 0x32
2000db68:	2002      	movs	r0, #2
2000db6a:	f000 f811 	bl	2000db90 <SEM_Show>

	// red
	SEM_Show(SDK_LED_RED, s_semaphoreState.m_redTimeout, s_semaphoreState.m_mode == ESM_ProcessPress);
2000db6e:	4b07      	ldr	r3, [pc, #28]	; (2000db8c <SEM_Cycle+0x40>)
2000db70:	6859      	ldr	r1, [r3, #4]
2000db72:	4b06      	ldr	r3, [pc, #24]	; (2000db8c <SEM_Cycle+0x40>)
2000db74:	785b      	ldrb	r3, [r3, #1]
2000db76:	2b01      	cmp	r3, #1
2000db78:	bf0c      	ite	eq
2000db7a:	2301      	moveq	r3, #1
2000db7c:	2300      	movne	r3, #0
2000db7e:	b2db      	uxtb	r3, r3
2000db80:	461a      	mov	r2, r3
2000db82:	2003      	movs	r0, #3
2000db84:	f000 f804 	bl	2000db90 <SEM_Show>
}
2000db88:	bf00      	nop
2000db8a:	bd80      	pop	{r7, pc}
2000db8c:	20012100 	.word	0x20012100

2000db90 <SEM_Show>:

void SEM_Show(uint16_t color, uint32_t delay, bool interruptible)
{
2000db90:	b580      	push	{r7, lr}
2000db92:	b082      	sub	sp, #8
2000db94:	af00      	add	r7, sp, #0
2000db96:	4603      	mov	r3, r0
2000db98:	6039      	str	r1, [r7, #0]
2000db9a:	80fb      	strh	r3, [r7, #6]
2000db9c:	4613      	mov	r3, r2
2000db9e:	717b      	strb	r3, [r7, #5]
	// turn off previous color
	SDK_LED_Set(MapColorStateToLed(s_semaphoreState.m_color), SDK_LED_OFF);
2000dba0:	4b14      	ldr	r3, [pc, #80]	; (2000dbf4 <SEM_Show+0x64>)
2000dba2:	781b      	ldrb	r3, [r3, #0]
2000dba4:	4618      	mov	r0, r3
2000dba6:	f7ff ff75 	bl	2000da94 <MapColorStateToLed>
2000dbaa:	4603      	mov	r3, r0
2000dbac:	2100      	movs	r1, #0
2000dbae:	4618      	mov	r0, r3
2000dbb0:	f000 f9a0 	bl	2000def4 <SDK_LED_Set>

	// update current state
	s_semaphoreState.m_color = MapLedToColorState(color, false);
2000dbb4:	88fb      	ldrh	r3, [r7, #6]
2000dbb6:	2100      	movs	r1, #0
2000dbb8:	4618      	mov	r0, r3
2000dbba:	f7ff ff8f 	bl	2000dadc <MapLedToColorState>
2000dbbe:	4603      	mov	r3, r0
2000dbc0:	461a      	mov	r2, r3
2000dbc2:	4b0c      	ldr	r3, [pc, #48]	; (2000dbf4 <SEM_Show+0x64>)
2000dbc4:	701a      	strb	r2, [r3, #0]

	// turn on color
	SDK_LED_Set(color, SDK_LED_ON);
2000dbc6:	88fb      	ldrh	r3, [r7, #6]
2000dbc8:	2101      	movs	r1, #1
2000dbca:	4618      	mov	r0, r3
2000dbcc:	f000 f992 	bl	2000def4 <SDK_LED_Set>

	// perform delay
	if(interruptible)
2000dbd0:	797b      	ldrb	r3, [r7, #5]
2000dbd2:	2b00      	cmp	r3, #0
2000dbd4:	d006      	beq.n	2000dbe4 <SEM_Show+0x54>
	{
		SDK_TIM_InterruptDelay(delay / 4, delay);
2000dbd6:	683b      	ldr	r3, [r7, #0]
2000dbd8:	089b      	lsrs	r3, r3, #2
2000dbda:	6839      	ldr	r1, [r7, #0]
2000dbdc:	4618      	mov	r0, r3
2000dbde:	f000 fb2b 	bl	2000e238 <SDK_TIM_InterruptDelay>
	}
	else
	{
		SDK_TIM_Delay(delay);
	}
}
2000dbe2:	e002      	b.n	2000dbea <SEM_Show+0x5a>
		SDK_TIM_Delay(delay);
2000dbe4:	6838      	ldr	r0, [r7, #0]
2000dbe6:	f000 fb1b 	bl	2000e220 <SDK_TIM_Delay>
}
2000dbea:	bf00      	nop
2000dbec:	3708      	adds	r7, #8
2000dbee:	46bd      	mov	sp, r7
2000dbf0:	bd80      	pop	{r7, pc}
2000dbf2:	bf00      	nop
2000dbf4:	20012100 	.word	0x20012100

2000dbf8 <SEM_Blink>:

void SEM_Blink(uint16_t color, uint32_t delay, uint32_t count)
{
2000dbf8:	b580      	push	{r7, lr}
2000dbfa:	b086      	sub	sp, #24
2000dbfc:	af00      	add	r7, sp, #0
2000dbfe:	4603      	mov	r3, r0
2000dc00:	60b9      	str	r1, [r7, #8]
2000dc02:	607a      	str	r2, [r7, #4]
2000dc04:	81fb      	strh	r3, [r7, #14]
	// turn off previous color
	SDK_LED_Set(MapColorStateToLed(s_semaphoreState.m_color), SDK_LED_OFF);
2000dc06:	4b19      	ldr	r3, [pc, #100]	; (2000dc6c <SEM_Blink+0x74>)
2000dc08:	781b      	ldrb	r3, [r3, #0]
2000dc0a:	4618      	mov	r0, r3
2000dc0c:	f7ff ff42 	bl	2000da94 <MapColorStateToLed>
2000dc10:	4603      	mov	r3, r0
2000dc12:	2100      	movs	r1, #0
2000dc14:	4618      	mov	r0, r3
2000dc16:	f000 f96d 	bl	2000def4 <SDK_LED_Set>

	// update current state
	s_semaphoreState.m_color = MapLedToColorState(color, true);
2000dc1a:	89fb      	ldrh	r3, [r7, #14]
2000dc1c:	2101      	movs	r1, #1
2000dc1e:	4618      	mov	r0, r3
2000dc20:	f7ff ff5c 	bl	2000dadc <MapLedToColorState>
2000dc24:	4603      	mov	r3, r0
2000dc26:	461a      	mov	r2, r3
2000dc28:	4b10      	ldr	r3, [pc, #64]	; (2000dc6c <SEM_Blink+0x74>)
2000dc2a:	701a      	strb	r2, [r3, #0]

	// turn off-on some times
	for(int i = 0; i < count; i++)
2000dc2c:	2300      	movs	r3, #0
2000dc2e:	617b      	str	r3, [r7, #20]
2000dc30:	e012      	b.n	2000dc58 <SEM_Blink+0x60>
	{
		SDK_LED_Set(color, SDK_LED_OFF);
2000dc32:	89fb      	ldrh	r3, [r7, #14]
2000dc34:	2100      	movs	r1, #0
2000dc36:	4618      	mov	r0, r3
2000dc38:	f000 f95c 	bl	2000def4 <SDK_LED_Set>
		SDK_TIM_Delay(delay);
2000dc3c:	68b8      	ldr	r0, [r7, #8]
2000dc3e:	f000 faef 	bl	2000e220 <SDK_TIM_Delay>
		SDK_LED_Set(color, SDK_LED_ON);
2000dc42:	89fb      	ldrh	r3, [r7, #14]
2000dc44:	2101      	movs	r1, #1
2000dc46:	4618      	mov	r0, r3
2000dc48:	f000 f954 	bl	2000def4 <SDK_LED_Set>
		SDK_TIM_Delay(delay);
2000dc4c:	68b8      	ldr	r0, [r7, #8]
2000dc4e:	f000 fae7 	bl	2000e220 <SDK_TIM_Delay>
	for(int i = 0; i < count; i++)
2000dc52:	697b      	ldr	r3, [r7, #20]
2000dc54:	3301      	adds	r3, #1
2000dc56:	617b      	str	r3, [r7, #20]
2000dc58:	697b      	ldr	r3, [r7, #20]
2000dc5a:	687a      	ldr	r2, [r7, #4]
2000dc5c:	429a      	cmp	r2, r3
2000dc5e:	d8e8      	bhi.n	2000dc32 <SEM_Blink+0x3a>
	}
}
2000dc60:	bf00      	nop
2000dc62:	bf00      	nop
2000dc64:	3718      	adds	r7, #24
2000dc66:	46bd      	mov	sp, r7
2000dc68:	bd80      	pop	{r7, pc}
2000dc6a:	bf00      	nop
2000dc6c:	20012100 	.word	0x20012100

2000dc70 <SEM_GetState>:


SemaphoreState SEM_GetState()
{
2000dc70:	b480      	push	{r7}
2000dc72:	b083      	sub	sp, #12
2000dc74:	af00      	add	r7, sp, #0
2000dc76:	6078      	str	r0, [r7, #4]
	return s_semaphoreState;
2000dc78:	687b      	ldr	r3, [r7, #4]
2000dc7a:	4a05      	ldr	r2, [pc, #20]	; (2000dc90 <SEM_GetState+0x20>)
2000dc7c:	e892 0003 	ldmia.w	r2, {r0, r1}
2000dc80:	e883 0003 	stmia.w	r3, {r0, r1}
}
2000dc84:	6878      	ldr	r0, [r7, #4]
2000dc86:	370c      	adds	r7, #12
2000dc88:	46bd      	mov	sp, r7
2000dc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dc8e:	4770      	bx	lr
2000dc90:	20012100 	.word	0x20012100

2000dc94 <SEM_SetMode>:
void SEM_SetMode(eSemaphoreMode mode)
{
2000dc94:	b480      	push	{r7}
2000dc96:	b083      	sub	sp, #12
2000dc98:	af00      	add	r7, sp, #0
2000dc9a:	4603      	mov	r3, r0
2000dc9c:	71fb      	strb	r3, [r7, #7]
	s_semaphoreState.m_mode = mode;
2000dc9e:	4a04      	ldr	r2, [pc, #16]	; (2000dcb0 <SEM_SetMode+0x1c>)
2000dca0:	79fb      	ldrb	r3, [r7, #7]
2000dca2:	7053      	strb	r3, [r2, #1]
}
2000dca4:	bf00      	nop
2000dca6:	370c      	adds	r7, #12
2000dca8:	46bd      	mov	sp, r7
2000dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dcae:	4770      	bx	lr
2000dcb0:	20012100 	.word	0x20012100

2000dcb4 <SEM_SetRedTimeout>:
void SEM_SetRedTimeout(uint32_t timeout)
{
2000dcb4:	b480      	push	{r7}
2000dcb6:	b083      	sub	sp, #12
2000dcb8:	af00      	add	r7, sp, #0
2000dcba:	6078      	str	r0, [r7, #4]
	s_semaphoreState.m_redTimeout = timeout;
2000dcbc:	4a04      	ldr	r2, [pc, #16]	; (2000dcd0 <SEM_SetRedTimeout+0x1c>)
2000dcbe:	687b      	ldr	r3, [r7, #4]
2000dcc0:	6053      	str	r3, [r2, #4]
}
2000dcc2:	bf00      	nop
2000dcc4:	370c      	adds	r7, #12
2000dcc6:	46bd      	mov	sp, r7
2000dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dccc:	4770      	bx	lr
2000dcce:	bf00      	nop
2000dcd0:	20012100 	.word	0x20012100

2000dcd4 <SDK_BTN_ClearState>:
/// STATIC ///
static BtnState s_btnState;

///  API  ///
void SDK_BTN_ClearState()
{
2000dcd4:	b480      	push	{r7}
2000dcd6:	af00      	add	r7, sp, #0
	s_btnState.m_pressed = false;
2000dcd8:	4b06      	ldr	r3, [pc, #24]	; (2000dcf4 <SDK_BTN_ClearState+0x20>)
2000dcda:	2200      	movs	r2, #0
2000dcdc:	701a      	strb	r2, [r3, #0]
	s_btnState.m_up = false;
2000dcde:	4b05      	ldr	r3, [pc, #20]	; (2000dcf4 <SDK_BTN_ClearState+0x20>)
2000dce0:	2200      	movs	r2, #0
2000dce2:	709a      	strb	r2, [r3, #2]
	s_btnState.m_down = false;
2000dce4:	4b03      	ldr	r3, [pc, #12]	; (2000dcf4 <SDK_BTN_ClearState+0x20>)
2000dce6:	2200      	movs	r2, #0
2000dce8:	705a      	strb	r2, [r3, #1]
}
2000dcea:	bf00      	nop
2000dcec:	46bd      	mov	sp, r7
2000dcee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dcf2:	4770      	bx	lr
2000dcf4:	20012108 	.word	0x20012108

2000dcf8 <SDK_BTN_Update>:
void SDK_BTN_Update()
{
2000dcf8:	b580      	push	{r7, lr}
2000dcfa:	b082      	sub	sp, #8
2000dcfc:	af00      	add	r7, sp, #0
	bool btn = HAL_GPIO_ReadPin(SDK_BTN_GPIO, SDK_BTN_PIN) == GPIO_PIN_RESET;
2000dcfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000dd02:	4820      	ldr	r0, [pc, #128]	; (2000dd84 <SDK_BTN_Update+0x8c>)
2000dd04:	f001 fa5e 	bl	2000f1c4 <HAL_GPIO_ReadPin>
2000dd08:	4603      	mov	r3, r0
2000dd0a:	2b00      	cmp	r3, #0
2000dd0c:	bf0c      	ite	eq
2000dd0e:	2301      	moveq	r3, #1
2000dd10:	2300      	movne	r3, #0
2000dd12:	71fb      	strb	r3, [r7, #7]
	s_btnState.m_up = s_btnState.m_pressed && !btn;
2000dd14:	4b1c      	ldr	r3, [pc, #112]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd16:	781b      	ldrb	r3, [r3, #0]
2000dd18:	2b00      	cmp	r3, #0
2000dd1a:	d007      	beq.n	2000dd2c <SDK_BTN_Update+0x34>
2000dd1c:	79fb      	ldrb	r3, [r7, #7]
2000dd1e:	f083 0301 	eor.w	r3, r3, #1
2000dd22:	b2db      	uxtb	r3, r3
2000dd24:	2b00      	cmp	r3, #0
2000dd26:	d001      	beq.n	2000dd2c <SDK_BTN_Update+0x34>
2000dd28:	2301      	movs	r3, #1
2000dd2a:	e000      	b.n	2000dd2e <SDK_BTN_Update+0x36>
2000dd2c:	2300      	movs	r3, #0
2000dd2e:	f003 0301 	and.w	r3, r3, #1
2000dd32:	b2da      	uxtb	r2, r3
2000dd34:	4b14      	ldr	r3, [pc, #80]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd36:	709a      	strb	r2, [r3, #2]
	s_btnState.m_down = !s_btnState.m_pressed && btn;
2000dd38:	4b13      	ldr	r3, [pc, #76]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd3a:	781b      	ldrb	r3, [r3, #0]
2000dd3c:	f083 0301 	eor.w	r3, r3, #1
2000dd40:	b2db      	uxtb	r3, r3
2000dd42:	2b00      	cmp	r3, #0
2000dd44:	d004      	beq.n	2000dd50 <SDK_BTN_Update+0x58>
2000dd46:	79fb      	ldrb	r3, [r7, #7]
2000dd48:	2b00      	cmp	r3, #0
2000dd4a:	d001      	beq.n	2000dd50 <SDK_BTN_Update+0x58>
2000dd4c:	2301      	movs	r3, #1
2000dd4e:	e000      	b.n	2000dd52 <SDK_BTN_Update+0x5a>
2000dd50:	2300      	movs	r3, #0
2000dd52:	f003 0301 	and.w	r3, r3, #1
2000dd56:	b2da      	uxtb	r2, r3
2000dd58:	4b0b      	ldr	r3, [pc, #44]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd5a:	705a      	strb	r2, [r3, #1]
	s_btnState.m_pressed = btn;
2000dd5c:	4a0a      	ldr	r2, [pc, #40]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd5e:	79fb      	ldrb	r3, [r7, #7]
2000dd60:	7013      	strb	r3, [r2, #0]

#if SDK_REMOTE_MODE
	if(s_btnState.m_down || s_btnState.m_up)
2000dd62:	4b09      	ldr	r3, [pc, #36]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd64:	785b      	ldrb	r3, [r3, #1]
2000dd66:	2b00      	cmp	r3, #0
2000dd68:	d103      	bne.n	2000dd72 <SDK_BTN_Update+0x7a>
2000dd6a:	4b07      	ldr	r3, [pc, #28]	; (2000dd88 <SDK_BTN_Update+0x90>)
2000dd6c:	789b      	ldrb	r3, [r3, #2]
2000dd6e:	2b00      	cmp	r3, #0
2000dd70:	d004      	beq.n	2000dd7c <SDK_BTN_Update+0x84>
	{
		SDK_TRACE_Timestamp(SDK_BTN, btn);
2000dd72:	79fb      	ldrb	r3, [r7, #7]
2000dd74:	4619      	mov	r1, r3
2000dd76:	2010      	movs	r0, #16
2000dd78:	f000 fafe 	bl	2000e378 <SDK_TRACE_Timestamp>
	}
#endif
}
2000dd7c:	bf00      	nop
2000dd7e:	3708      	adds	r7, #8
2000dd80:	46bd      	mov	sp, r7
2000dd82:	bd80      	pop	{r7, pc}
2000dd84:	40020800 	.word	0x40020800
2000dd88:	20012108 	.word	0x20012108

2000dd8c <SDK_BTN_IsDown>:
bool SDK_BTN_IsUp()
{
	return s_btnState.m_up;
}
bool SDK_BTN_IsDown()
{
2000dd8c:	b480      	push	{r7}
2000dd8e:	af00      	add	r7, sp, #0
	return s_btnState.m_down;
2000dd90:	4b03      	ldr	r3, [pc, #12]	; (2000dda0 <SDK_BTN_IsDown+0x14>)
2000dd92:	785b      	ldrb	r3, [r3, #1]
}
2000dd94:	4618      	mov	r0, r3
2000dd96:	46bd      	mov	sp, r7
2000dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dd9c:	4770      	bx	lr
2000dd9e:	bf00      	nop
2000dda0:	20012108 	.word	0x20012108

2000dda4 <SDK_BTN_SetDown>:
void SDK_BTN_SetDown()
{
2000dda4:	b580      	push	{r7, lr}
2000dda6:	af00      	add	r7, sp, #0
	s_btnState.m_pressed = true;
2000dda8:	4b07      	ldr	r3, [pc, #28]	; (2000ddc8 <SDK_BTN_SetDown+0x24>)
2000ddaa:	2201      	movs	r2, #1
2000ddac:	701a      	strb	r2, [r3, #0]
	s_btnState.m_up = false;
2000ddae:	4b06      	ldr	r3, [pc, #24]	; (2000ddc8 <SDK_BTN_SetDown+0x24>)
2000ddb0:	2200      	movs	r2, #0
2000ddb2:	709a      	strb	r2, [r3, #2]
	s_btnState.m_down = true;
2000ddb4:	4b04      	ldr	r3, [pc, #16]	; (2000ddc8 <SDK_BTN_SetDown+0x24>)
2000ddb6:	2201      	movs	r2, #1
2000ddb8:	705a      	strb	r2, [r3, #1]

#if SDK_REMOTE_MODE
	SDK_TRACE_Timestamp(SDK_BTN, true);
2000ddba:	2101      	movs	r1, #1
2000ddbc:	2010      	movs	r0, #16
2000ddbe:	f000 fadb 	bl	2000e378 <SDK_TRACE_Timestamp>
#endif
}
2000ddc2:	bf00      	nop
2000ddc4:	bd80      	pop	{r7, pc}
2000ddc6:	bf00      	nop
2000ddc8:	20012108 	.word	0x20012108

2000ddcc <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000ddcc:	b480      	push	{r7}
2000ddce:	b083      	sub	sp, #12
2000ddd0:	af00      	add	r7, sp, #0
2000ddd2:	4603      	mov	r3, r0
2000ddd4:	6039      	str	r1, [r7, #0]
2000ddd6:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000ddd8:	683b      	ldr	r3, [r7, #0]
2000ddda:	0a1a      	lsrs	r2, r3, #8
2000dddc:	79f9      	ldrb	r1, [r7, #7]
2000ddde:	683b      	ldr	r3, [r7, #0]
2000dde0:	404b      	eors	r3, r1
2000dde2:	b2db      	uxtb	r3, r3
2000dde4:	4906      	ldr	r1, [pc, #24]	; (2000de00 <crc32stream+0x34>)
2000dde6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000ddea:	4053      	eors	r3, r2
2000ddec:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000ddee:	683b      	ldr	r3, [r7, #0]
2000ddf0:	43db      	mvns	r3, r3
}
2000ddf2:	4618      	mov	r0, r3
2000ddf4:	370c      	adds	r7, #12
2000ddf6:	46bd      	mov	sp, r7
2000ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ddfc:	4770      	bx	lr
2000ddfe:	bf00      	nop
2000de00:	20011a8c 	.word	0x20011a8c

2000de04 <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000de04:	b580      	push	{r7, lr}
2000de06:	b086      	sub	sp, #24
2000de08:	af00      	add	r7, sp, #0
2000de0a:	60f8      	str	r0, [r7, #12]
2000de0c:	60b9      	str	r1, [r7, #8]
2000de0e:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000de10:	2300      	movs	r3, #0
2000de12:	617b      	str	r3, [r7, #20]
2000de14:	e00b      	b.n	2000de2e <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000de16:	68fa      	ldr	r2, [r7, #12]
2000de18:	697b      	ldr	r3, [r7, #20]
2000de1a:	4413      	add	r3, r2
2000de1c:	781b      	ldrb	r3, [r3, #0]
2000de1e:	6879      	ldr	r1, [r7, #4]
2000de20:	4618      	mov	r0, r3
2000de22:	f7ff ffd3 	bl	2000ddcc <crc32stream>
2000de26:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000de28:	697b      	ldr	r3, [r7, #20]
2000de2a:	3301      	adds	r3, #1
2000de2c:	617b      	str	r3, [r7, #20]
2000de2e:	697a      	ldr	r2, [r7, #20]
2000de30:	68bb      	ldr	r3, [r7, #8]
2000de32:	429a      	cmp	r2, r3
2000de34:	d3ef      	bcc.n	2000de16 <crc32+0x12>
	}

    return crc;
2000de36:	687b      	ldr	r3, [r7, #4]
}
2000de38:	4618      	mov	r0, r3
2000de3a:	3718      	adds	r7, #24
2000de3c:	46bd      	mov	sp, r7
2000de3e:	bd80      	pop	{r7, pc}

2000de40 <SDK_MAIN_Wrapper>:
/// INCLUDES ///
#include "SDK/interface.h"

///  API  ///
void SDK_MAIN_Wrapper()
{
2000de40:	b580      	push	{r7, lr}
2000de42:	af00      	add	r7, sp, #0
	SDK_SYS_Init();
2000de44:	f000 f81d 	bl	2000de82 <SDK_SYS_Init>

	// must be overriden by app
	SDK_MAIN_PreLoop();
2000de48:	f7ff fb96 	bl	2000d578 <SDK_MAIN_PreLoop>
	SDK_MAIN_Loop();
2000de4c:	f000 f806 	bl	2000de5c <SDK_MAIN_Loop>
	SDK_MAIN_PostLoop();
2000de50:	f7ff fbca 	bl	2000d5e8 <SDK_MAIN_PostLoop>

	SDK_SYS_Shutdown();
2000de54:	f000 f821 	bl	2000de9a <SDK_SYS_Shutdown>
}
2000de58:	bf00      	nop
2000de5a:	bd80      	pop	{r7, pc}

2000de5c <SDK_MAIN_Loop>:

void SDK_MAIN_Loop()
{
2000de5c:	b580      	push	{r7, lr}
2000de5e:	b082      	sub	sp, #8
2000de60:	af00      	add	r7, sp, #0
#if !SDK_REMOTE_MODE
	while(true)
#else
	for(int i = 0; i < SDK_MAIN_LOOP_REPEATS; i++)
2000de62:	2300      	movs	r3, #0
2000de64:	607b      	str	r3, [r7, #4]
2000de66:	e004      	b.n	2000de72 <SDK_MAIN_Loop+0x16>
#endif
	{
		SDK_MAIN_LoopFunc();
2000de68:	f7ff fbb8 	bl	2000d5dc <SDK_MAIN_LoopFunc>
	for(int i = 0; i < SDK_MAIN_LOOP_REPEATS; i++)
2000de6c:	687b      	ldr	r3, [r7, #4]
2000de6e:	3301      	adds	r3, #1
2000de70:	607b      	str	r3, [r7, #4]
2000de72:	687b      	ldr	r3, [r7, #4]
2000de74:	2b02      	cmp	r3, #2
2000de76:	ddf7      	ble.n	2000de68 <SDK_MAIN_Loop+0xc>
	}
}
2000de78:	bf00      	nop
2000de7a:	bf00      	nop
2000de7c:	3708      	adds	r7, #8
2000de7e:	46bd      	mov	sp, r7
2000de80:	bd80      	pop	{r7, pc}

2000de82 <SDK_SYS_Init>:
#include "SDK/interface.h"

///  API  ///
// system API
void SDK_SYS_Init()
{
2000de82:	b580      	push	{r7, lr}
2000de84:	af00      	add	r7, sp, #0
#if SDK_REMOTE_MODE
	MX_TRACE_Init();
2000de86:	f000 fa1d 	bl	2000e2c4 <MX_TRACE_Init>
	SDK_TRACE_Start();
2000de8a:	f000 fa3d 	bl	2000e308 <SDK_TRACE_Start>
#endif
	SDK_BTN_ClearState();
2000de8e:	f7ff ff21 	bl	2000dcd4 <SDK_BTN_ClearState>
	SDK_UART_Init();
2000de92:	f000 fb53 	bl	2000e53c <SDK_UART_Init>
}
2000de96:	bf00      	nop
2000de98:	bd80      	pop	{r7, pc}

2000de9a <SDK_SYS_Shutdown>:
void SDK_SYS_Shutdown()
{
2000de9a:	b580      	push	{r7, lr}
2000de9c:	af00      	add	r7, sp, #0
#if SDK_REMOTE_MODE
	SDK_TRACE_Stop();
2000de9e:	f000 fa43 	bl	2000e328 <SDK_TRACE_Stop>
#endif
}
2000dea2:	bf00      	nop
2000dea4:	bd80      	pop	{r7, pc}

2000dea6 <SDK_SYS_Tick>:
void SDK_SYS_Tick()
{
2000dea6:	b580      	push	{r7, lr}
2000dea8:	af00      	add	r7, sp, #0
	SDK_BTN_Update();
2000deaa:	f7ff ff25 	bl	2000dcf8 <SDK_BTN_Update>
	SDK_TIM_Update();
2000deae:	f000 f8eb 	bl	2000e088 <SDK_TIM_Update>
}
2000deb2:	bf00      	nop
2000deb4:	bd80      	pop	{r7, pc}

2000deb6 <LED_MapLedToPin>:

// led API
static uint16_t LED_MapLedToPin(uint16_t led)
{
2000deb6:	b480      	push	{r7}
2000deb8:	b083      	sub	sp, #12
2000deba:	af00      	add	r7, sp, #0
2000debc:	4603      	mov	r3, r0
2000debe:	80fb      	strh	r3, [r7, #6]
	switch(led)
2000dec0:	88fb      	ldrh	r3, [r7, #6]
2000dec2:	2b03      	cmp	r3, #3
2000dec4:	d00c      	beq.n	2000dee0 <LED_MapLedToPin+0x2a>
2000dec6:	2b03      	cmp	r3, #3
2000dec8:	dc0d      	bgt.n	2000dee6 <LED_MapLedToPin+0x30>
2000deca:	2b01      	cmp	r3, #1
2000decc:	d002      	beq.n	2000ded4 <LED_MapLedToPin+0x1e>
2000dece:	2b02      	cmp	r3, #2
2000ded0:	d003      	beq.n	2000deda <LED_MapLedToPin+0x24>
2000ded2:	e008      	b.n	2000dee6 <LED_MapLedToPin+0x30>
	{
	case SDK_LED_GREEN:
		return SDK_LED_GREEN_PIN;
2000ded4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2000ded8:	e006      	b.n	2000dee8 <LED_MapLedToPin+0x32>
	case SDK_LED_YELLOW:
		return SDK_LED_YELLOW_PIN;
2000deda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
2000dede:	e003      	b.n	2000dee8 <LED_MapLedToPin+0x32>
	case SDK_LED_RED:
		return SDK_LED_RED_PIN;
2000dee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2000dee4:	e000      	b.n	2000dee8 <LED_MapLedToPin+0x32>
	default:
		return 0;
2000dee6:	2300      	movs	r3, #0
	};
}
2000dee8:	4618      	mov	r0, r3
2000deea:	370c      	adds	r7, #12
2000deec:	46bd      	mov	sp, r7
2000deee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000def2:	4770      	bx	lr

2000def4 <SDK_LED_Set>:
void SDK_LED_Set(uint16_t led, GPIO_PinState state)
{
2000def4:	b590      	push	{r4, r7, lr}
2000def6:	b085      	sub	sp, #20
2000def8:	af00      	add	r7, sp, #0
2000defa:	4603      	mov	r3, r0
2000defc:	460a      	mov	r2, r1
2000defe:	80fb      	strh	r3, [r7, #6]
2000df00:	4613      	mov	r3, r2
2000df02:	717b      	strb	r3, [r7, #5]
	uint16_t pin = LED_MapLedToPin(led);
2000df04:	88fb      	ldrh	r3, [r7, #6]
2000df06:	4618      	mov	r0, r3
2000df08:	f7ff ffd5 	bl	2000deb6 <LED_MapLedToPin>
2000df0c:	4603      	mov	r3, r0
2000df0e:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(SDK_LED_GPIO, pin, state);
2000df10:	797a      	ldrb	r2, [r7, #5]
2000df12:	89fb      	ldrh	r3, [r7, #14]
2000df14:	4619      	mov	r1, r3
2000df16:	4809      	ldr	r0, [pc, #36]	; (2000df3c <SDK_LED_Set+0x48>)
2000df18:	f001 f96c 	bl	2000f1f4 <HAL_GPIO_WritePin>
#if SDK_REMOTE_MODE
	SDK_TRACE_Timestamp(led, HAL_GPIO_ReadPin(SDK_LED_GPIO, pin));
2000df1c:	88fb      	ldrh	r3, [r7, #6]
2000df1e:	b2dc      	uxtb	r4, r3
2000df20:	89fb      	ldrh	r3, [r7, #14]
2000df22:	4619      	mov	r1, r3
2000df24:	4805      	ldr	r0, [pc, #20]	; (2000df3c <SDK_LED_Set+0x48>)
2000df26:	f001 f94d 	bl	2000f1c4 <HAL_GPIO_ReadPin>
2000df2a:	4603      	mov	r3, r0
2000df2c:	4619      	mov	r1, r3
2000df2e:	4620      	mov	r0, r4
2000df30:	f000 fa22 	bl	2000e378 <SDK_TRACE_Timestamp>
#endif
}
2000df34:	bf00      	nop
2000df36:	3714      	adds	r7, #20
2000df38:	46bd      	mov	sp, r7
2000df3a:	bd90      	pop	{r4, r7, pc}
2000df3c:	40020c00 	.word	0x40020c00

2000df40 <SDK_DBG_Print>:
#endif
}

// debug API
void SDK_DBG_Print(char * format, ...)
{
2000df40:	b40f      	push	{r0, r1, r2, r3}
2000df42:	b580      	push	{r7, lr}
2000df44:	b082      	sub	sp, #8
2000df46:	af00      	add	r7, sp, #0
#if SDK_REMOTE_MODE
	va_list args;
	va_start(args, format);
2000df48:	f107 0314 	add.w	r3, r7, #20
2000df4c:	607b      	str	r3, [r7, #4]

	SDK_TRACE_Timestamp(PRINT, 1);
2000df4e:	2101      	movs	r1, #1
2000df50:	2004      	movs	r0, #4
2000df52:	f000 fa11 	bl	2000e378 <SDK_TRACE_Timestamp>
	SDK_TRACE_VPrint(format, args);
2000df56:	6879      	ldr	r1, [r7, #4]
2000df58:	6938      	ldr	r0, [r7, #16]
2000df5a:	f000 fa5f 	bl	2000e41c <SDK_TRACE_VPrint>
	SDK_TRACE_Timestamp(PRINT, 0);
2000df5e:	2100      	movs	r1, #0
2000df60:	2004      	movs	r0, #4
2000df62:	f000 fa09 	bl	2000e378 <SDK_TRACE_Timestamp>
#endif
}
2000df66:	bf00      	nop
2000df68:	3708      	adds	r7, #8
2000df6a:	46bd      	mov	sp, r7
2000df6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
2000df70:	b004      	add	sp, #16
2000df72:	4770      	bx	lr

2000df74 <SDK_TIM_AddInterrupt>:
static DataInterrupt s_dataInterrupt[SDK_TIM_DATA_INTERRUPT_MAX];
static uint32_t s_dataInterruptCount = 0;

/// API ///
void SDK_TIM_AddInterrupt(void(*callbackPtr)(), uint32_t delay, bool periodic)
{
2000df74:	b480      	push	{r7}
2000df76:	b085      	sub	sp, #20
2000df78:	af00      	add	r7, sp, #0
2000df7a:	60f8      	str	r0, [r7, #12]
2000df7c:	60b9      	str	r1, [r7, #8]
2000df7e:	4613      	mov	r3, r2
2000df80:	71fb      	strb	r3, [r7, #7]
	if(s_interruptCount < SDK_TIM_INTERRUPT_MAX)
2000df82:	4b17      	ldr	r3, [pc, #92]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000df84:	681b      	ldr	r3, [r3, #0]
2000df86:	2b04      	cmp	r3, #4
2000df88:	d823      	bhi.n	2000dfd2 <SDK_TIM_AddInterrupt+0x5e>
	{
		s_interrupt[s_interruptCount].m_callbackPtr = callbackPtr;
2000df8a:	4b15      	ldr	r3, [pc, #84]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000df8c:	681b      	ldr	r3, [r3, #0]
2000df8e:	4a15      	ldr	r2, [pc, #84]	; (2000dfe4 <SDK_TIM_AddInterrupt+0x70>)
2000df90:	011b      	lsls	r3, r3, #4
2000df92:	4413      	add	r3, r2
2000df94:	68fa      	ldr	r2, [r7, #12]
2000df96:	601a      	str	r2, [r3, #0]
		s_interrupt[s_interruptCount].m_delay = delay;
2000df98:	4b11      	ldr	r3, [pc, #68]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000df9a:	681b      	ldr	r3, [r3, #0]
2000df9c:	4a11      	ldr	r2, [pc, #68]	; (2000dfe4 <SDK_TIM_AddInterrupt+0x70>)
2000df9e:	011b      	lsls	r3, r3, #4
2000dfa0:	4413      	add	r3, r2
2000dfa2:	3304      	adds	r3, #4
2000dfa4:	68ba      	ldr	r2, [r7, #8]
2000dfa6:	601a      	str	r2, [r3, #0]
		s_interrupt[s_interruptCount].m_timer = 0;
2000dfa8:	4b0d      	ldr	r3, [pc, #52]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000dfaa:	681b      	ldr	r3, [r3, #0]
2000dfac:	4a0d      	ldr	r2, [pc, #52]	; (2000dfe4 <SDK_TIM_AddInterrupt+0x70>)
2000dfae:	011b      	lsls	r3, r3, #4
2000dfb0:	4413      	add	r3, r2
2000dfb2:	3308      	adds	r3, #8
2000dfb4:	2200      	movs	r2, #0
2000dfb6:	601a      	str	r2, [r3, #0]
		s_interrupt[s_interruptCount].m_periodic = periodic;
2000dfb8:	4b09      	ldr	r3, [pc, #36]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000dfba:	681b      	ldr	r3, [r3, #0]
2000dfbc:	4a09      	ldr	r2, [pc, #36]	; (2000dfe4 <SDK_TIM_AddInterrupt+0x70>)
2000dfbe:	011b      	lsls	r3, r3, #4
2000dfc0:	4413      	add	r3, r2
2000dfc2:	330c      	adds	r3, #12
2000dfc4:	79fa      	ldrb	r2, [r7, #7]
2000dfc6:	701a      	strb	r2, [r3, #0]

		s_interruptCount++;
2000dfc8:	4b05      	ldr	r3, [pc, #20]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000dfca:	681b      	ldr	r3, [r3, #0]
2000dfcc:	3301      	adds	r3, #1
2000dfce:	4a04      	ldr	r2, [pc, #16]	; (2000dfe0 <SDK_TIM_AddInterrupt+0x6c>)
2000dfd0:	6013      	str	r3, [r2, #0]
	}
}
2000dfd2:	bf00      	nop
2000dfd4:	3714      	adds	r7, #20
2000dfd6:	46bd      	mov	sp, r7
2000dfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dfdc:	4770      	bx	lr
2000dfde:	bf00      	nop
2000dfe0:	2001215c 	.word	0x2001215c
2000dfe4:	2001210c 	.word	0x2001210c

2000dfe8 <SDK_TIM_AddDataInterrupt>:
void SDK_TIM_AddDataInterrupt(void(*callbackPtr)(void* data), void* data, uint32_t delay, bool periodic)
{
2000dfe8:	b480      	push	{r7}
2000dfea:	b085      	sub	sp, #20
2000dfec:	af00      	add	r7, sp, #0
2000dfee:	60f8      	str	r0, [r7, #12]
2000dff0:	60b9      	str	r1, [r7, #8]
2000dff2:	607a      	str	r2, [r7, #4]
2000dff4:	70fb      	strb	r3, [r7, #3]
	if(s_dataInterruptCount < SDK_TIM_DATA_INTERRUPT_MAX)
2000dff6:	4b22      	ldr	r3, [pc, #136]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000dff8:	681b      	ldr	r3, [r3, #0]
2000dffa:	2b0e      	cmp	r3, #14
2000dffc:	d83a      	bhi.n	2000e074 <SDK_TIM_AddDataInterrupt+0x8c>
	{
		s_dataInterrupt[s_dataInterruptCount].m_callbackPtr = callbackPtr;
2000dffe:	4b20      	ldr	r3, [pc, #128]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e000:	681a      	ldr	r2, [r3, #0]
2000e002:	4920      	ldr	r1, [pc, #128]	; (2000e084 <SDK_TIM_AddDataInterrupt+0x9c>)
2000e004:	4613      	mov	r3, r2
2000e006:	009b      	lsls	r3, r3, #2
2000e008:	4413      	add	r3, r2
2000e00a:	009b      	lsls	r3, r3, #2
2000e00c:	440b      	add	r3, r1
2000e00e:	68fa      	ldr	r2, [r7, #12]
2000e010:	601a      	str	r2, [r3, #0]
		s_dataInterrupt[s_dataInterruptCount].m_data = data;
2000e012:	4b1b      	ldr	r3, [pc, #108]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e014:	681a      	ldr	r2, [r3, #0]
2000e016:	491b      	ldr	r1, [pc, #108]	; (2000e084 <SDK_TIM_AddDataInterrupt+0x9c>)
2000e018:	4613      	mov	r3, r2
2000e01a:	009b      	lsls	r3, r3, #2
2000e01c:	4413      	add	r3, r2
2000e01e:	009b      	lsls	r3, r3, #2
2000e020:	440b      	add	r3, r1
2000e022:	3304      	adds	r3, #4
2000e024:	68ba      	ldr	r2, [r7, #8]
2000e026:	601a      	str	r2, [r3, #0]
		s_dataInterrupt[s_dataInterruptCount].m_delay = delay;
2000e028:	4b15      	ldr	r3, [pc, #84]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e02a:	681a      	ldr	r2, [r3, #0]
2000e02c:	4915      	ldr	r1, [pc, #84]	; (2000e084 <SDK_TIM_AddDataInterrupt+0x9c>)
2000e02e:	4613      	mov	r3, r2
2000e030:	009b      	lsls	r3, r3, #2
2000e032:	4413      	add	r3, r2
2000e034:	009b      	lsls	r3, r3, #2
2000e036:	440b      	add	r3, r1
2000e038:	3308      	adds	r3, #8
2000e03a:	687a      	ldr	r2, [r7, #4]
2000e03c:	601a      	str	r2, [r3, #0]
		s_dataInterrupt[s_dataInterruptCount].m_timer = 0;
2000e03e:	4b10      	ldr	r3, [pc, #64]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e040:	681a      	ldr	r2, [r3, #0]
2000e042:	4910      	ldr	r1, [pc, #64]	; (2000e084 <SDK_TIM_AddDataInterrupt+0x9c>)
2000e044:	4613      	mov	r3, r2
2000e046:	009b      	lsls	r3, r3, #2
2000e048:	4413      	add	r3, r2
2000e04a:	009b      	lsls	r3, r3, #2
2000e04c:	440b      	add	r3, r1
2000e04e:	330c      	adds	r3, #12
2000e050:	2200      	movs	r2, #0
2000e052:	601a      	str	r2, [r3, #0]
		s_dataInterrupt[s_dataInterruptCount].m_periodic = periodic;
2000e054:	4b0a      	ldr	r3, [pc, #40]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e056:	681a      	ldr	r2, [r3, #0]
2000e058:	490a      	ldr	r1, [pc, #40]	; (2000e084 <SDK_TIM_AddDataInterrupt+0x9c>)
2000e05a:	4613      	mov	r3, r2
2000e05c:	009b      	lsls	r3, r3, #2
2000e05e:	4413      	add	r3, r2
2000e060:	009b      	lsls	r3, r3, #2
2000e062:	440b      	add	r3, r1
2000e064:	3310      	adds	r3, #16
2000e066:	78fa      	ldrb	r2, [r7, #3]
2000e068:	701a      	strb	r2, [r3, #0]

		s_dataInterruptCount++;
2000e06a:	4b05      	ldr	r3, [pc, #20]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e06c:	681b      	ldr	r3, [r3, #0]
2000e06e:	3301      	adds	r3, #1
2000e070:	4a03      	ldr	r2, [pc, #12]	; (2000e080 <SDK_TIM_AddDataInterrupt+0x98>)
2000e072:	6013      	str	r3, [r2, #0]
	}
}
2000e074:	bf00      	nop
2000e076:	3714      	adds	r7, #20
2000e078:	46bd      	mov	sp, r7
2000e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e07e:	4770      	bx	lr
2000e080:	2001228c 	.word	0x2001228c
2000e084:	20012160 	.word	0x20012160

2000e088 <SDK_TIM_Update>:

void SDK_TIM_Update()
{
2000e088:	b580      	push	{r7, lr}
2000e08a:	b082      	sub	sp, #8
2000e08c:	af00      	add	r7, sp, #0
	for(int i = 0; i < s_interruptCount; ++i)
2000e08e:	2300      	movs	r3, #0
2000e090:	607b      	str	r3, [r7, #4]
2000e092:	e042      	b.n	2000e11a <SDK_TIM_Update+0x92>
	{
		if(s_interrupt[i].m_callbackPtr && ++s_interrupt[i].m_timer >= s_interrupt[i].m_delay)
2000e094:	4a5e      	ldr	r2, [pc, #376]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e096:	687b      	ldr	r3, [r7, #4]
2000e098:	011b      	lsls	r3, r3, #4
2000e09a:	4413      	add	r3, r2
2000e09c:	681b      	ldr	r3, [r3, #0]
2000e09e:	2b00      	cmp	r3, #0
2000e0a0:	d038      	beq.n	2000e114 <SDK_TIM_Update+0x8c>
2000e0a2:	4a5b      	ldr	r2, [pc, #364]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0a4:	687b      	ldr	r3, [r7, #4]
2000e0a6:	011b      	lsls	r3, r3, #4
2000e0a8:	4413      	add	r3, r2
2000e0aa:	3308      	adds	r3, #8
2000e0ac:	681b      	ldr	r3, [r3, #0]
2000e0ae:	1c5a      	adds	r2, r3, #1
2000e0b0:	4957      	ldr	r1, [pc, #348]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0b2:	687b      	ldr	r3, [r7, #4]
2000e0b4:	011b      	lsls	r3, r3, #4
2000e0b6:	440b      	add	r3, r1
2000e0b8:	3308      	adds	r3, #8
2000e0ba:	601a      	str	r2, [r3, #0]
2000e0bc:	4a54      	ldr	r2, [pc, #336]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0be:	687b      	ldr	r3, [r7, #4]
2000e0c0:	011b      	lsls	r3, r3, #4
2000e0c2:	4413      	add	r3, r2
2000e0c4:	3308      	adds	r3, #8
2000e0c6:	681a      	ldr	r2, [r3, #0]
2000e0c8:	4951      	ldr	r1, [pc, #324]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0ca:	687b      	ldr	r3, [r7, #4]
2000e0cc:	011b      	lsls	r3, r3, #4
2000e0ce:	440b      	add	r3, r1
2000e0d0:	3304      	adds	r3, #4
2000e0d2:	681b      	ldr	r3, [r3, #0]
2000e0d4:	429a      	cmp	r2, r3
2000e0d6:	d31d      	bcc.n	2000e114 <SDK_TIM_Update+0x8c>
		{
			s_interrupt[i].m_timer = 0;
2000e0d8:	4a4d      	ldr	r2, [pc, #308]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0da:	687b      	ldr	r3, [r7, #4]
2000e0dc:	011b      	lsls	r3, r3, #4
2000e0de:	4413      	add	r3, r2
2000e0e0:	3308      	adds	r3, #8
2000e0e2:	2200      	movs	r2, #0
2000e0e4:	601a      	str	r2, [r3, #0]
			s_interrupt[i].m_callbackPtr();
2000e0e6:	4a4a      	ldr	r2, [pc, #296]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0e8:	687b      	ldr	r3, [r7, #4]
2000e0ea:	011b      	lsls	r3, r3, #4
2000e0ec:	4413      	add	r3, r2
2000e0ee:	681b      	ldr	r3, [r3, #0]
2000e0f0:	4798      	blx	r3
			if(!s_interrupt[i].m_periodic)
2000e0f2:	4a47      	ldr	r2, [pc, #284]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e0f4:	687b      	ldr	r3, [r7, #4]
2000e0f6:	011b      	lsls	r3, r3, #4
2000e0f8:	4413      	add	r3, r2
2000e0fa:	330c      	adds	r3, #12
2000e0fc:	781b      	ldrb	r3, [r3, #0]
2000e0fe:	f083 0301 	eor.w	r3, r3, #1
2000e102:	b2db      	uxtb	r3, r3
2000e104:	2b00      	cmp	r3, #0
2000e106:	d005      	beq.n	2000e114 <SDK_TIM_Update+0x8c>
			{
				s_interrupt[i].m_callbackPtr = 0;
2000e108:	4a41      	ldr	r2, [pc, #260]	; (2000e210 <SDK_TIM_Update+0x188>)
2000e10a:	687b      	ldr	r3, [r7, #4]
2000e10c:	011b      	lsls	r3, r3, #4
2000e10e:	4413      	add	r3, r2
2000e110:	2200      	movs	r2, #0
2000e112:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < s_interruptCount; ++i)
2000e114:	687b      	ldr	r3, [r7, #4]
2000e116:	3301      	adds	r3, #1
2000e118:	607b      	str	r3, [r7, #4]
2000e11a:	687a      	ldr	r2, [r7, #4]
2000e11c:	4b3d      	ldr	r3, [pc, #244]	; (2000e214 <SDK_TIM_Update+0x18c>)
2000e11e:	681b      	ldr	r3, [r3, #0]
2000e120:	429a      	cmp	r2, r3
2000e122:	d3b7      	bcc.n	2000e094 <SDK_TIM_Update+0xc>
			}
		}
	}

	for(int i = 0; i < s_dataInterruptCount; ++i)
2000e124:	2300      	movs	r3, #0
2000e126:	603b      	str	r3, [r7, #0]
2000e128:	e067      	b.n	2000e1fa <SDK_TIM_Update+0x172>
	{
		if(s_dataInterrupt[i].m_callbackPtr && ++s_dataInterrupt[i].m_timer >= s_dataInterrupt[i].m_delay)
2000e12a:	493b      	ldr	r1, [pc, #236]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e12c:	683a      	ldr	r2, [r7, #0]
2000e12e:	4613      	mov	r3, r2
2000e130:	009b      	lsls	r3, r3, #2
2000e132:	4413      	add	r3, r2
2000e134:	009b      	lsls	r3, r3, #2
2000e136:	440b      	add	r3, r1
2000e138:	681b      	ldr	r3, [r3, #0]
2000e13a:	2b00      	cmp	r3, #0
2000e13c:	d05a      	beq.n	2000e1f4 <SDK_TIM_Update+0x16c>
2000e13e:	4936      	ldr	r1, [pc, #216]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e140:	683a      	ldr	r2, [r7, #0]
2000e142:	4613      	mov	r3, r2
2000e144:	009b      	lsls	r3, r3, #2
2000e146:	4413      	add	r3, r2
2000e148:	009b      	lsls	r3, r3, #2
2000e14a:	440b      	add	r3, r1
2000e14c:	330c      	adds	r3, #12
2000e14e:	681b      	ldr	r3, [r3, #0]
2000e150:	1c59      	adds	r1, r3, #1
2000e152:	4831      	ldr	r0, [pc, #196]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e154:	683a      	ldr	r2, [r7, #0]
2000e156:	4613      	mov	r3, r2
2000e158:	009b      	lsls	r3, r3, #2
2000e15a:	4413      	add	r3, r2
2000e15c:	009b      	lsls	r3, r3, #2
2000e15e:	4403      	add	r3, r0
2000e160:	330c      	adds	r3, #12
2000e162:	6019      	str	r1, [r3, #0]
2000e164:	492c      	ldr	r1, [pc, #176]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e166:	683a      	ldr	r2, [r7, #0]
2000e168:	4613      	mov	r3, r2
2000e16a:	009b      	lsls	r3, r3, #2
2000e16c:	4413      	add	r3, r2
2000e16e:	009b      	lsls	r3, r3, #2
2000e170:	440b      	add	r3, r1
2000e172:	330c      	adds	r3, #12
2000e174:	6819      	ldr	r1, [r3, #0]
2000e176:	4828      	ldr	r0, [pc, #160]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e178:	683a      	ldr	r2, [r7, #0]
2000e17a:	4613      	mov	r3, r2
2000e17c:	009b      	lsls	r3, r3, #2
2000e17e:	4413      	add	r3, r2
2000e180:	009b      	lsls	r3, r3, #2
2000e182:	4403      	add	r3, r0
2000e184:	3308      	adds	r3, #8
2000e186:	681b      	ldr	r3, [r3, #0]
2000e188:	4299      	cmp	r1, r3
2000e18a:	d333      	bcc.n	2000e1f4 <SDK_TIM_Update+0x16c>
		{
			s_dataInterrupt[i].m_timer = 0;
2000e18c:	4922      	ldr	r1, [pc, #136]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e18e:	683a      	ldr	r2, [r7, #0]
2000e190:	4613      	mov	r3, r2
2000e192:	009b      	lsls	r3, r3, #2
2000e194:	4413      	add	r3, r2
2000e196:	009b      	lsls	r3, r3, #2
2000e198:	440b      	add	r3, r1
2000e19a:	330c      	adds	r3, #12
2000e19c:	2200      	movs	r2, #0
2000e19e:	601a      	str	r2, [r3, #0]
			s_dataInterrupt[i].m_callbackPtr(s_dataInterrupt[i].m_data);
2000e1a0:	491d      	ldr	r1, [pc, #116]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e1a2:	683a      	ldr	r2, [r7, #0]
2000e1a4:	4613      	mov	r3, r2
2000e1a6:	009b      	lsls	r3, r3, #2
2000e1a8:	4413      	add	r3, r2
2000e1aa:	009b      	lsls	r3, r3, #2
2000e1ac:	440b      	add	r3, r1
2000e1ae:	6819      	ldr	r1, [r3, #0]
2000e1b0:	4819      	ldr	r0, [pc, #100]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e1b2:	683a      	ldr	r2, [r7, #0]
2000e1b4:	4613      	mov	r3, r2
2000e1b6:	009b      	lsls	r3, r3, #2
2000e1b8:	4413      	add	r3, r2
2000e1ba:	009b      	lsls	r3, r3, #2
2000e1bc:	4403      	add	r3, r0
2000e1be:	3304      	adds	r3, #4
2000e1c0:	681b      	ldr	r3, [r3, #0]
2000e1c2:	4618      	mov	r0, r3
2000e1c4:	4788      	blx	r1
			if(!s_dataInterrupt[i].m_periodic)
2000e1c6:	4914      	ldr	r1, [pc, #80]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e1c8:	683a      	ldr	r2, [r7, #0]
2000e1ca:	4613      	mov	r3, r2
2000e1cc:	009b      	lsls	r3, r3, #2
2000e1ce:	4413      	add	r3, r2
2000e1d0:	009b      	lsls	r3, r3, #2
2000e1d2:	440b      	add	r3, r1
2000e1d4:	3310      	adds	r3, #16
2000e1d6:	781b      	ldrb	r3, [r3, #0]
2000e1d8:	f083 0301 	eor.w	r3, r3, #1
2000e1dc:	b2db      	uxtb	r3, r3
2000e1de:	2b00      	cmp	r3, #0
2000e1e0:	d008      	beq.n	2000e1f4 <SDK_TIM_Update+0x16c>
			{
				s_dataInterrupt[i].m_callbackPtr = 0;
2000e1e2:	490d      	ldr	r1, [pc, #52]	; (2000e218 <SDK_TIM_Update+0x190>)
2000e1e4:	683a      	ldr	r2, [r7, #0]
2000e1e6:	4613      	mov	r3, r2
2000e1e8:	009b      	lsls	r3, r3, #2
2000e1ea:	4413      	add	r3, r2
2000e1ec:	009b      	lsls	r3, r3, #2
2000e1ee:	440b      	add	r3, r1
2000e1f0:	2200      	movs	r2, #0
2000e1f2:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < s_dataInterruptCount; ++i)
2000e1f4:	683b      	ldr	r3, [r7, #0]
2000e1f6:	3301      	adds	r3, #1
2000e1f8:	603b      	str	r3, [r7, #0]
2000e1fa:	683a      	ldr	r2, [r7, #0]
2000e1fc:	4b07      	ldr	r3, [pc, #28]	; (2000e21c <SDK_TIM_Update+0x194>)
2000e1fe:	681b      	ldr	r3, [r3, #0]
2000e200:	429a      	cmp	r2, r3
2000e202:	d392      	bcc.n	2000e12a <SDK_TIM_Update+0xa2>
			}
		}
	}
}
2000e204:	bf00      	nop
2000e206:	bf00      	nop
2000e208:	3708      	adds	r7, #8
2000e20a:	46bd      	mov	sp, r7
2000e20c:	bd80      	pop	{r7, pc}
2000e20e:	bf00      	nop
2000e210:	2001210c 	.word	0x2001210c
2000e214:	2001215c 	.word	0x2001215c
2000e218:	20012160 	.word	0x20012160
2000e21c:	2001228c 	.word	0x2001228c

2000e220 <SDK_TIM_Delay>:

void SDK_TIM_Delay(uint32_t delay)
{
2000e220:	b580      	push	{r7, lr}
2000e222:	b082      	sub	sp, #8
2000e224:	af00      	add	r7, sp, #0
2000e226:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
2000e228:	6878      	ldr	r0, [r7, #4]
2000e22a:	f000 fd25 	bl	2000ec78 <HAL_Delay>
}
2000e22e:	bf00      	nop
2000e230:	3708      	adds	r7, #8
2000e232:	46bd      	mov	sp, r7
2000e234:	bd80      	pop	{r7, pc}
	...

2000e238 <SDK_TIM_InterruptDelay>:

void SDK_TIM_InterruptDelay(uint32_t minDelay, uint32_t maxDelay)
{
2000e238:	b580      	push	{r7, lr}
2000e23a:	b084      	sub	sp, #16
2000e23c:	af00      	add	r7, sp, #0
2000e23e:	6078      	str	r0, [r7, #4]
2000e240:	6039      	str	r1, [r7, #0]
	uint32_t passed = SDK_TIM_WaitEvent(SDK_BTN_IsDown, minDelay);
2000e242:	6879      	ldr	r1, [r7, #4]
2000e244:	480c      	ldr	r0, [pc, #48]	; (2000e278 <SDK_TIM_InterruptDelay+0x40>)
2000e246:	f000 f819 	bl	2000e27c <SDK_TIM_WaitEvent>
2000e24a:	60f8      	str	r0, [r7, #12]
	if(passed)
2000e24c:	68fb      	ldr	r3, [r7, #12]
2000e24e:	2b00      	cmp	r3, #0
2000e250:	d006      	beq.n	2000e260 <SDK_TIM_InterruptDelay+0x28>
	{
		SDK_TIM_Delay(minDelay - passed);
2000e252:	687a      	ldr	r2, [r7, #4]
2000e254:	68fb      	ldr	r3, [r7, #12]
2000e256:	1ad3      	subs	r3, r2, r3
2000e258:	4618      	mov	r0, r3
2000e25a:	f7ff ffe1 	bl	2000e220 <SDK_TIM_Delay>
	}
	else
	{
		SDK_TIM_WaitEvent(SDK_BTN_IsDown, maxDelay - minDelay);
	}
}
2000e25e:	e006      	b.n	2000e26e <SDK_TIM_InterruptDelay+0x36>
		SDK_TIM_WaitEvent(SDK_BTN_IsDown, maxDelay - minDelay);
2000e260:	683a      	ldr	r2, [r7, #0]
2000e262:	687b      	ldr	r3, [r7, #4]
2000e264:	1ad3      	subs	r3, r2, r3
2000e266:	4619      	mov	r1, r3
2000e268:	4803      	ldr	r0, [pc, #12]	; (2000e278 <SDK_TIM_InterruptDelay+0x40>)
2000e26a:	f000 f807 	bl	2000e27c <SDK_TIM_WaitEvent>
}
2000e26e:	bf00      	nop
2000e270:	3710      	adds	r7, #16
2000e272:	46bd      	mov	sp, r7
2000e274:	bd80      	pop	{r7, pc}
2000e276:	bf00      	nop
2000e278:	2000dd8d 	.word	0x2000dd8d

2000e27c <SDK_TIM_WaitEvent>:

uint32_t SDK_TIM_WaitEvent(bool (*event)(), uint32_t timeout)
{
2000e27c:	b580      	push	{r7, lr}
2000e27e:	b086      	sub	sp, #24
2000e280:	af00      	add	r7, sp, #0
2000e282:	6078      	str	r0, [r7, #4]
2000e284:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
2000e286:	f000 fceb 	bl	2000ec60 <HAL_GetTick>
2000e28a:	6138      	str	r0, [r7, #16]

	// +1 to be sure that return positive if event() is true
	uint32_t wait = timeout + 1;
2000e28c:	683b      	ldr	r3, [r7, #0]
2000e28e:	3301      	adds	r3, #1
2000e290:	60fb      	str	r3, [r7, #12]
	uint32_t passed = 1;
2000e292:	2301      	movs	r3, #1
2000e294:	617b      	str	r3, [r7, #20]

	while( passed < wait)
2000e296:	e00c      	b.n	2000e2b2 <SDK_TIM_WaitEvent+0x36>
	{
		if(event())
2000e298:	687b      	ldr	r3, [r7, #4]
2000e29a:	4798      	blx	r3
2000e29c:	4603      	mov	r3, r0
2000e29e:	2b00      	cmp	r3, #0
2000e2a0:	d001      	beq.n	2000e2a6 <SDK_TIM_WaitEvent+0x2a>
		{
			return passed;
2000e2a2:	697b      	ldr	r3, [r7, #20]
2000e2a4:	e00a      	b.n	2000e2bc <SDK_TIM_WaitEvent+0x40>
		}
		passed = HAL_GetTick() - tickstart;
2000e2a6:	f000 fcdb 	bl	2000ec60 <HAL_GetTick>
2000e2aa:	4602      	mov	r2, r0
2000e2ac:	693b      	ldr	r3, [r7, #16]
2000e2ae:	1ad3      	subs	r3, r2, r3
2000e2b0:	617b      	str	r3, [r7, #20]
	while( passed < wait)
2000e2b2:	697a      	ldr	r2, [r7, #20]
2000e2b4:	68fb      	ldr	r3, [r7, #12]
2000e2b6:	429a      	cmp	r2, r3
2000e2b8:	d3ee      	bcc.n	2000e298 <SDK_TIM_WaitEvent+0x1c>
	}

	return 0;
2000e2ba:	2300      	movs	r3, #0
}
2000e2bc:	4618      	mov	r0, r3
2000e2be:	3718      	adds	r7, #24
2000e2c0:	46bd      	mov	sp, r7
2000e2c2:	bd80      	pop	{r7, pc}

2000e2c4 <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000e2c4:	b480      	push	{r7}
2000e2c6:	af00      	add	r7, sp, #0
	InitCC();
2000e2c8:	4b0c      	ldr	r3, [pc, #48]	; (2000e2fc <MX_TRACE_Init+0x38>)
2000e2ca:	681b      	ldr	r3, [r3, #0]
2000e2cc:	4a0b      	ldr	r2, [pc, #44]	; (2000e2fc <MX_TRACE_Init+0x38>)
2000e2ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000e2d2:	6013      	str	r3, [r2, #0]
	ResetCC();
2000e2d4:	4b0a      	ldr	r3, [pc, #40]	; (2000e300 <MX_TRACE_Init+0x3c>)
2000e2d6:	2200      	movs	r2, #0
2000e2d8:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000e2da:	4b0a      	ldr	r3, [pc, #40]	; (2000e304 <MX_TRACE_Init+0x40>)
2000e2dc:	681b      	ldr	r3, [r3, #0]
2000e2de:	2200      	movs	r2, #0
2000e2e0:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000e2e2:	4b08      	ldr	r3, [pc, #32]	; (2000e304 <MX_TRACE_Init+0x40>)
2000e2e4:	681b      	ldr	r3, [r3, #0]
2000e2e6:	2200      	movs	r2, #0
2000e2e8:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000e2ea:	4b06      	ldr	r3, [pc, #24]	; (2000e304 <MX_TRACE_Init+0x40>)
2000e2ec:	681b      	ldr	r3, [r3, #0]
2000e2ee:	2200      	movs	r2, #0
2000e2f0:	609a      	str	r2, [r3, #8]
}
2000e2f2:	bf00      	nop
2000e2f4:	46bd      	mov	sp, r7
2000e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e2fa:	4770      	bx	lr
2000e2fc:	e000edfc 	.word	0xe000edfc
2000e300:	e0001004 	.word	0xe0001004
2000e304:	20012064 	.word	0x20012064

2000e308 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000e308:	b480      	push	{r7}
2000e30a:	af00      	add	r7, sp, #0
	EnableCC();
2000e30c:	4b05      	ldr	r3, [pc, #20]	; (2000e324 <SDK_TRACE_Start+0x1c>)
2000e30e:	681b      	ldr	r3, [r3, #0]
2000e310:	4a04      	ldr	r2, [pc, #16]	; (2000e324 <SDK_TRACE_Start+0x1c>)
2000e312:	f043 0301 	orr.w	r3, r3, #1
2000e316:	6013      	str	r3, [r2, #0]
}
2000e318:	bf00      	nop
2000e31a:	46bd      	mov	sp, r7
2000e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e320:	4770      	bx	lr
2000e322:	bf00      	nop
2000e324:	e0001000 	.word	0xe0001000

2000e328 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000e328:	b598      	push	{r3, r4, r7, lr}
2000e32a:	af00      	add	r7, sp, #0
	DisableCC();
2000e32c:	4b0c      	ldr	r3, [pc, #48]	; (2000e360 <SDK_TRACE_Stop+0x38>)
2000e32e:	681b      	ldr	r3, [r3, #0]
2000e330:	4a0b      	ldr	r2, [pc, #44]	; (2000e360 <SDK_TRACE_Stop+0x38>)
2000e332:	f023 0301 	bic.w	r3, r3, #1
2000e336:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000e338:	b672      	cpsid	i
}
2000e33a:	bf00      	nop
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000e33c:	4b09      	ldr	r3, [pc, #36]	; (2000e364 <SDK_TRACE_Stop+0x3c>)
2000e33e:	681b      	ldr	r3, [r3, #0]
2000e340:	681b      	ldr	r3, [r3, #0]
2000e342:	3310      	adds	r3, #16
2000e344:	4a08      	ldr	r2, [pc, #32]	; (2000e368 <SDK_TRACE_Stop+0x40>)
2000e346:	6814      	ldr	r4, [r2, #0]
2000e348:	2200      	movs	r2, #0
2000e34a:	4619      	mov	r1, r3
2000e34c:	4807      	ldr	r0, [pc, #28]	; (2000e36c <SDK_TRACE_Stop+0x44>)
2000e34e:	f7ff fd59 	bl	2000de04 <crc32>
2000e352:	4603      	mov	r3, r0
2000e354:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000e356:	4b06      	ldr	r3, [pc, #24]	; (2000e370 <SDK_TRACE_Stop+0x48>)
2000e358:	4a06      	ldr	r2, [pc, #24]	; (2000e374 <SDK_TRACE_Stop+0x4c>)
2000e35a:	60da      	str	r2, [r3, #12]
}
2000e35c:	bf00      	nop
2000e35e:	bd98      	pop	{r3, r4, r7, pc}
2000e360:	e0001000 	.word	0xe0001000
2000e364:	20012064 	.word	0x20012064
2000e368:	2001206c 	.word	0x2001206c
2000e36c:	10000004 	.word	0x10000004
2000e370:	e000ed00 	.word	0xe000ed00
2000e374:	05fa0004 	.word	0x05fa0004

2000e378 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000e378:	b590      	push	{r4, r7, lr}
2000e37a:	b085      	sub	sp, #20
2000e37c:	af00      	add	r7, sp, #0
2000e37e:	4603      	mov	r3, r0
2000e380:	460a      	mov	r2, r1
2000e382:	71fb      	strb	r3, [r7, #7]
2000e384:	4613      	mov	r3, r2
2000e386:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000e388:	2300      	movs	r3, #0
2000e38a:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000e38c:	68fb      	ldr	r3, [r7, #12]
2000e38e:	021b      	lsls	r3, r3, #8
2000e390:	3301      	adds	r3, #1
2000e392:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000e394:	68fb      	ldr	r3, [r7, #12]
2000e396:	021a      	lsls	r2, r3, #8
2000e398:	79bb      	ldrb	r3, [r7, #6]
2000e39a:	4413      	add	r3, r2
2000e39c:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000e39e:	68fb      	ldr	r3, [r7, #12]
2000e3a0:	021a      	lsls	r2, r3, #8
2000e3a2:	79fb      	ldrb	r3, [r7, #7]
2000e3a4:	4413      	add	r3, r2
2000e3a6:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000e3a8:	4b17      	ldr	r3, [pc, #92]	; (2000e408 <SDK_TRACE_Timestamp+0x90>)
2000e3aa:	681c      	ldr	r4, [r3, #0]
2000e3ac:	f001 fb80 	bl	2000fab0 <HAL_RCC_GetHCLKFreq>
2000e3b0:	4603      	mov	r3, r0
2000e3b2:	4a16      	ldr	r2, [pc, #88]	; (2000e40c <SDK_TRACE_Timestamp+0x94>)
2000e3b4:	fba2 2303 	umull	r2, r3, r2, r3
2000e3b8:	0c9a      	lsrs	r2, r3, #18
2000e3ba:	4b15      	ldr	r3, [pc, #84]	; (2000e410 <SDK_TRACE_Timestamp+0x98>)
2000e3bc:	6819      	ldr	r1, [r3, #0]
2000e3be:	4b15      	ldr	r3, [pc, #84]	; (2000e414 <SDK_TRACE_Timestamp+0x9c>)
2000e3c0:	681b      	ldr	r3, [r3, #0]
2000e3c2:	681b      	ldr	r3, [r3, #0]
2000e3c4:	f023 0307 	bic.w	r3, r3, #7
2000e3c8:	440b      	add	r3, r1
2000e3ca:	fbb4 f2f2 	udiv	r2, r4, r2
2000e3ce:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000e3d0:	4b0f      	ldr	r3, [pc, #60]	; (2000e410 <SDK_TRACE_Timestamp+0x98>)
2000e3d2:	681a      	ldr	r2, [r3, #0]
2000e3d4:	4b0f      	ldr	r3, [pc, #60]	; (2000e414 <SDK_TRACE_Timestamp+0x9c>)
2000e3d6:	681b      	ldr	r3, [r3, #0]
2000e3d8:	681b      	ldr	r3, [r3, #0]
2000e3da:	f023 0307 	bic.w	r3, r3, #7
2000e3de:	4413      	add	r3, r2
2000e3e0:	68fa      	ldr	r2, [r7, #12]
2000e3e2:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000e3e4:	4b0b      	ldr	r3, [pc, #44]	; (2000e414 <SDK_TRACE_Timestamp+0x9c>)
2000e3e6:	681b      	ldr	r3, [r3, #0]
2000e3e8:	681a      	ldr	r2, [r3, #0]
2000e3ea:	4b0a      	ldr	r3, [pc, #40]	; (2000e414 <SDK_TRACE_Timestamp+0x9c>)
2000e3ec:	681b      	ldr	r3, [r3, #0]
2000e3ee:	3208      	adds	r2, #8
2000e3f0:	601a      	str	r2, [r3, #0]
	eventId++;
2000e3f2:	4b09      	ldr	r3, [pc, #36]	; (2000e418 <SDK_TRACE_Timestamp+0xa0>)
2000e3f4:	781b      	ldrb	r3, [r3, #0]
2000e3f6:	3301      	adds	r3, #1
2000e3f8:	b2da      	uxtb	r2, r3
2000e3fa:	4b07      	ldr	r3, [pc, #28]	; (2000e418 <SDK_TRACE_Timestamp+0xa0>)
2000e3fc:	701a      	strb	r2, [r3, #0]
}
2000e3fe:	bf00      	nop
2000e400:	3714      	adds	r7, #20
2000e402:	46bd      	mov	sp, r7
2000e404:	bd90      	pop	{r4, r7, pc}
2000e406:	bf00      	nop
2000e408:	e0001004 	.word	0xe0001004
2000e40c:	431bde83 	.word	0x431bde83
2000e410:	20012068 	.word	0x20012068
2000e414:	20012064 	.word	0x20012064
2000e418:	20012290 	.word	0x20012290

2000e41c <SDK_TRACE_VPrint>:
 * ----------------------------------------------------------------------
 * Writes the C string pointed by format to the trace buffer
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_VPrint(char * format, va_list args)
{
2000e41c:	b590      	push	{r4, r7, lr}
2000e41e:	b085      	sub	sp, #20
2000e420:	af00      	add	r7, sp, #0
2000e422:	6078      	str	r0, [r7, #4]
2000e424:	6039      	str	r1, [r7, #0]
	vsprintf( __buf, format, args);
2000e426:	683a      	ldr	r2, [r7, #0]
2000e428:	6879      	ldr	r1, [r7, #4]
2000e42a:	4827      	ldr	r0, [pc, #156]	; (2000e4c8 <SDK_TRACE_VPrint+0xac>)
2000e42c:	f002 f9f6 	bl	2001081c <vsiprintf>

	uint8_t len = strlen(__buf);
2000e430:	4825      	ldr	r0, [pc, #148]	; (2000e4c8 <SDK_TRACE_VPrint+0xac>)
2000e432:	f7fe fecd 	bl	2000d1d0 <strlen>
2000e436:	4603      	mov	r3, r0
2000e438:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000e43a:	4b24      	ldr	r3, [pc, #144]	; (2000e4cc <SDK_TRACE_VPrint+0xb0>)
2000e43c:	681c      	ldr	r4, [r3, #0]
2000e43e:	f001 fb37 	bl	2000fab0 <HAL_RCC_GetHCLKFreq>
2000e442:	4603      	mov	r3, r0
2000e444:	4a22      	ldr	r2, [pc, #136]	; (2000e4d0 <SDK_TRACE_VPrint+0xb4>)
2000e446:	fba2 2303 	umull	r2, r3, r2, r3
2000e44a:	0c9b      	lsrs	r3, r3, #18
2000e44c:	4a21      	ldr	r2, [pc, #132]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e44e:	6812      	ldr	r2, [r2, #0]
2000e450:	6851      	ldr	r1, [r2, #4]
2000e452:	4a21      	ldr	r2, [pc, #132]	; (2000e4d8 <SDK_TRACE_VPrint+0xbc>)
2000e454:	6812      	ldr	r2, [r2, #0]
2000e456:	440a      	add	r2, r1
2000e458:	fbb4 f3f3 	udiv	r3, r4, r3
2000e45c:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000e45e:	4b1d      	ldr	r3, [pc, #116]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e460:	681b      	ldr	r3, [r3, #0]
2000e462:	685a      	ldr	r2, [r3, #4]
2000e464:	4b1b      	ldr	r3, [pc, #108]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e466:	681b      	ldr	r3, [r3, #0]
2000e468:	3204      	adds	r2, #4
2000e46a:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000e46c:	4b19      	ldr	r3, [pc, #100]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e46e:	681b      	ldr	r3, [r3, #0]
2000e470:	685a      	ldr	r2, [r3, #4]
2000e472:	4b19      	ldr	r3, [pc, #100]	; (2000e4d8 <SDK_TRACE_VPrint+0xbc>)
2000e474:	681b      	ldr	r3, [r3, #0]
2000e476:	4413      	add	r3, r2
2000e478:	461a      	mov	r2, r3
2000e47a:	7afb      	ldrb	r3, [r7, #11]
2000e47c:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000e47e:	4b15      	ldr	r3, [pc, #84]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e480:	681b      	ldr	r3, [r3, #0]
2000e482:	685a      	ldr	r2, [r3, #4]
2000e484:	3201      	adds	r2, #1
2000e486:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000e488:	2300      	movs	r3, #0
2000e48a:	60fb      	str	r3, [r7, #12]
2000e48c:	e013      	b.n	2000e4b6 <SDK_TRACE_VPrint+0x9a>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = __buf[i];
2000e48e:	4b11      	ldr	r3, [pc, #68]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e490:	681b      	ldr	r3, [r3, #0]
2000e492:	685a      	ldr	r2, [r3, #4]
2000e494:	4b10      	ldr	r3, [pc, #64]	; (2000e4d8 <SDK_TRACE_VPrint+0xbc>)
2000e496:	681b      	ldr	r3, [r3, #0]
2000e498:	4413      	add	r3, r2
2000e49a:	4619      	mov	r1, r3
2000e49c:	4a0a      	ldr	r2, [pc, #40]	; (2000e4c8 <SDK_TRACE_VPrint+0xac>)
2000e49e:	68fb      	ldr	r3, [r7, #12]
2000e4a0:	4413      	add	r3, r2
2000e4a2:	781b      	ldrb	r3, [r3, #0]
2000e4a4:	700b      	strb	r3, [r1, #0]
		TI->printlog_size++;
2000e4a6:	4b0b      	ldr	r3, [pc, #44]	; (2000e4d4 <SDK_TRACE_VPrint+0xb8>)
2000e4a8:	681b      	ldr	r3, [r3, #0]
2000e4aa:	685a      	ldr	r2, [r3, #4]
2000e4ac:	3201      	adds	r2, #1
2000e4ae:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000e4b0:	68fb      	ldr	r3, [r7, #12]
2000e4b2:	3301      	adds	r3, #1
2000e4b4:	60fb      	str	r3, [r7, #12]
2000e4b6:	7afb      	ldrb	r3, [r7, #11]
2000e4b8:	68fa      	ldr	r2, [r7, #12]
2000e4ba:	429a      	cmp	r2, r3
2000e4bc:	dbe7      	blt.n	2000e48e <SDK_TRACE_VPrint+0x72>
	}
}
2000e4be:	bf00      	nop
2000e4c0:	bf00      	nop
2000e4c2:	3714      	adds	r7, #20
2000e4c4:	46bd      	mov	sp, r7
2000e4c6:	bd90      	pop	{r4, r7, pc}
2000e4c8:	20012324 	.word	0x20012324
2000e4cc:	e0001004 	.word	0xe0001004
2000e4d0:	431bde83 	.word	0x431bde83
2000e4d4:	20012064 	.word	0x20012064
2000e4d8:	20012070 	.word	0x20012070

2000e4dc <SDK_UART_StartReceiving>:
static UartData s_uartData;
static void SDK_UART_StartReceiving();
static void SDK_UART_ContinueReceiving();

static void SDK_UART_StartReceiving()
{
2000e4dc:	b580      	push	{r7, lr}
2000e4de:	af00      	add	r7, sp, #0
	if(s_uartData.m_interrupts)
2000e4e0:	4b0b      	ldr	r3, [pc, #44]	; (2000e510 <SDK_UART_StartReceiving+0x34>)
2000e4e2:	781b      	ldrb	r3, [r3, #0]
2000e4e4:	2b00      	cmp	r3, #0
2000e4e6:	d005      	beq.n	2000e4f4 <SDK_UART_StartReceiving+0x18>
	{
		// will be recieved by callback
		HAL_UART_Receive_IT(&SDK_UART_HANDLE, s_uartData.m_buffer, 1);
2000e4e8:	2201      	movs	r2, #1
2000e4ea:	490a      	ldr	r1, [pc, #40]	; (2000e514 <SDK_UART_StartReceiving+0x38>)
2000e4ec:	480a      	ldr	r0, [pc, #40]	; (2000e518 <SDK_UART_StartReceiving+0x3c>)
2000e4ee:	f001 fc9f 	bl	2000fe30 <HAL_UART_Receive_IT>
	else
	{
		// wait for first byte
		while(HAL_UART_Receive(&SDK_UART_HANDLE, s_uartData.m_buffer, 1, SDK_UART_TIMEOUT) != HAL_OK) { }
		SDK_UART_ContinueReceiving();	}
}
2000e4f2:	e00b      	b.n	2000e50c <SDK_UART_StartReceiving+0x30>
		while(HAL_UART_Receive(&SDK_UART_HANDLE, s_uartData.m_buffer, 1, SDK_UART_TIMEOUT) != HAL_OK) { }
2000e4f4:	bf00      	nop
2000e4f6:	2303      	movs	r3, #3
2000e4f8:	2201      	movs	r2, #1
2000e4fa:	4906      	ldr	r1, [pc, #24]	; (2000e514 <SDK_UART_StartReceiving+0x38>)
2000e4fc:	4806      	ldr	r0, [pc, #24]	; (2000e518 <SDK_UART_StartReceiving+0x3c>)
2000e4fe:	f001 fbf1 	bl	2000fce4 <HAL_UART_Receive>
2000e502:	4603      	mov	r3, r0
2000e504:	2b00      	cmp	r3, #0
2000e506:	d1f6      	bne.n	2000e4f6 <SDK_UART_StartReceiving+0x1a>
		SDK_UART_ContinueReceiving();	}
2000e508:	f000 f808 	bl	2000e51c <SDK_UART_ContinueReceiving>
}
2000e50c:	bf00      	nop
2000e50e:	bd80      	pop	{r7, pc}
2000e510:	20012294 	.word	0x20012294
2000e514:	20012295 	.word	0x20012295
2000e518:	20012430 	.word	0x20012430

2000e51c <SDK_UART_ContinueReceiving>:
static void SDK_UART_ContinueReceiving()
{
2000e51c:	b580      	push	{r7, lr}
2000e51e:	af00      	add	r7, sp, #0
	SDK_UART_Receive(s_uartData.m_buffer, SDK_UART_BUFFER_SIZE, 1 );
2000e520:	2201      	movs	r2, #1
2000e522:	2180      	movs	r1, #128	; 0x80
2000e524:	4804      	ldr	r0, [pc, #16]	; (2000e538 <SDK_UART_ContinueReceiving+0x1c>)
2000e526:	f000 f83d 	bl	2000e5a4 <SDK_UART_Receive>
	SDK_MAIN_ProcessCommand((const char*)s_uartData.m_buffer);
2000e52a:	4803      	ldr	r0, [pc, #12]	; (2000e538 <SDK_UART_ContinueReceiving+0x1c>)
2000e52c:	f7ff f86c 	bl	2000d608 <SDK_MAIN_ProcessCommand>
	SDK_UART_StartReceiving();
2000e530:	f7ff ffd4 	bl	2000e4dc <SDK_UART_StartReceiving>
}
2000e534:	bf00      	nop
2000e536:	bd80      	pop	{r7, pc}
2000e538:	20012295 	.word	0x20012295

2000e53c <SDK_UART_Init>:

/// API ///
void SDK_UART_Init()
{
2000e53c:	b580      	push	{r7, lr}
2000e53e:	af00      	add	r7, sp, #0
	s_uartData.m_interrupts = true;
2000e540:	4b03      	ldr	r3, [pc, #12]	; (2000e550 <SDK_UART_Init+0x14>)
2000e542:	2201      	movs	r2, #1
2000e544:	701a      	strb	r2, [r3, #0]
	SDK_UART_StartReceiving();
2000e546:	f7ff ffc9 	bl	2000e4dc <SDK_UART_StartReceiving>
}
2000e54a:	bf00      	nop
2000e54c:	bd80      	pop	{r7, pc}
2000e54e:	bf00      	nop
2000e550:	20012294 	.word	0x20012294

2000e554 <SDK_UART_EnableInterrupts>:
void SDK_UART_EnableInterrupts(bool interrupts)
{
2000e554:	b480      	push	{r7}
2000e556:	b083      	sub	sp, #12
2000e558:	af00      	add	r7, sp, #0
2000e55a:	4603      	mov	r3, r0
2000e55c:	71fb      	strb	r3, [r7, #7]
	s_uartData.m_interrupts = interrupts;
2000e55e:	4a04      	ldr	r2, [pc, #16]	; (2000e570 <SDK_UART_EnableInterrupts+0x1c>)
2000e560:	79fb      	ldrb	r3, [r7, #7]
2000e562:	7013      	strb	r3, [r2, #0]
}
2000e564:	bf00      	nop
2000e566:	370c      	adds	r7, #12
2000e568:	46bd      	mov	sp, r7
2000e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e56e:	4770      	bx	lr
2000e570:	20012294 	.word	0x20012294

2000e574 <SDK_UART_Transmit>:

void SDK_UART_Transmit(uint8_t* pData, size_t size)
{
2000e574:	b580      	push	{r7, lr}
2000e576:	b082      	sub	sp, #8
2000e578:	af00      	add	r7, sp, #0
2000e57a:	6078      	str	r0, [r7, #4]
2000e57c:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&SDK_UART_HANDLE, pData, size, SDK_UART_TIMEOUT);
2000e57e:	683b      	ldr	r3, [r7, #0]
2000e580:	b29a      	uxth	r2, r3
2000e582:	2303      	movs	r3, #3
2000e584:	6879      	ldr	r1, [r7, #4]
2000e586:	4805      	ldr	r0, [pc, #20]	; (2000e59c <SDK_UART_Transmit+0x28>)
2000e588:	f001 fb13 	bl	2000fbb2 <HAL_UART_Transmit>

	SDK_DBG_Print("Uart: %s", pData);
2000e58c:	6879      	ldr	r1, [r7, #4]
2000e58e:	4804      	ldr	r0, [pc, #16]	; (2000e5a0 <SDK_UART_Transmit+0x2c>)
2000e590:	f7ff fcd6 	bl	2000df40 <SDK_DBG_Print>
}
2000e594:	bf00      	nop
2000e596:	3708      	adds	r7, #8
2000e598:	46bd      	mov	sp, r7
2000e59a:	bd80      	pop	{r7, pc}
2000e59c:	20012430 	.word	0x20012430
2000e5a0:	20011a74 	.word	0x20011a74

2000e5a4 <SDK_UART_Receive>:

void SDK_UART_Receive(uint8_t* pData, size_t size, size_t offset)
{
2000e5a4:	b580      	push	{r7, lr}
2000e5a6:	b086      	sub	sp, #24
2000e5a8:	af00      	add	r7, sp, #0
2000e5aa:	60f8      	str	r0, [r7, #12]
2000e5ac:	60b9      	str	r1, [r7, #8]
2000e5ae:	607a      	str	r2, [r7, #4]
	uint32_t dataInd = offset;
2000e5b0:	687b      	ldr	r3, [r7, #4]
2000e5b2:	617b      	str	r3, [r7, #20]

	while(dataInd < size - 1 &&
2000e5b4:	e002      	b.n	2000e5bc <SDK_UART_Receive+0x18>
			HAL_UART_Receive(&SDK_UART_HANDLE, pData + dataInd, 1, SDK_UART_TIMEOUT) == HAL_OK)
	{
		dataInd++;
2000e5b6:	697b      	ldr	r3, [r7, #20]
2000e5b8:	3301      	adds	r3, #1
2000e5ba:	617b      	str	r3, [r7, #20]
	while(dataInd < size - 1 &&
2000e5bc:	68bb      	ldr	r3, [r7, #8]
2000e5be:	3b01      	subs	r3, #1
2000e5c0:	697a      	ldr	r2, [r7, #20]
2000e5c2:	429a      	cmp	r2, r3
2000e5c4:	d20a      	bcs.n	2000e5dc <SDK_UART_Receive+0x38>
			HAL_UART_Receive(&SDK_UART_HANDLE, pData + dataInd, 1, SDK_UART_TIMEOUT) == HAL_OK)
2000e5c6:	68fa      	ldr	r2, [r7, #12]
2000e5c8:	697b      	ldr	r3, [r7, #20]
2000e5ca:	18d1      	adds	r1, r2, r3
2000e5cc:	2303      	movs	r3, #3
2000e5ce:	2201      	movs	r2, #1
2000e5d0:	4809      	ldr	r0, [pc, #36]	; (2000e5f8 <SDK_UART_Receive+0x54>)
2000e5d2:	f001 fb87 	bl	2000fce4 <HAL_UART_Receive>
2000e5d6:	4603      	mov	r3, r0
	while(dataInd < size - 1 &&
2000e5d8:	2b00      	cmp	r3, #0
2000e5da:	d0ec      	beq.n	2000e5b6 <SDK_UART_Receive+0x12>
	}
	pData[dataInd] = 0;
2000e5dc:	68fa      	ldr	r2, [r7, #12]
2000e5de:	697b      	ldr	r3, [r7, #20]
2000e5e0:	4413      	add	r3, r2
2000e5e2:	2200      	movs	r2, #0
2000e5e4:	701a      	strb	r2, [r3, #0]
	SDK_UART_Transmit(pData, dataInd);
2000e5e6:	6979      	ldr	r1, [r7, #20]
2000e5e8:	68f8      	ldr	r0, [r7, #12]
2000e5ea:	f7ff ffc3 	bl	2000e574 <SDK_UART_Transmit>
}
2000e5ee:	bf00      	nop
2000e5f0:	3718      	adds	r7, #24
2000e5f2:	46bd      	mov	sp, r7
2000e5f4:	bd80      	pop	{r7, pc}
2000e5f6:	bf00      	nop
2000e5f8:	20012430 	.word	0x20012430

2000e5fc <SDK_UART_IsInterruptible>:


bool SDK_UART_IsInterruptible()
{
2000e5fc:	b480      	push	{r7}
2000e5fe:	af00      	add	r7, sp, #0
	return s_uartData.m_interrupts;
2000e600:	4b03      	ldr	r3, [pc, #12]	; (2000e610 <SDK_UART_IsInterruptible+0x14>)
2000e602:	781b      	ldrb	r3, [r3, #0]
}
2000e604:	4618      	mov	r0, r3
2000e606:	46bd      	mov	sp, r7
2000e608:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e60c:	4770      	bx	lr
2000e60e:	bf00      	nop
2000e610:	20012294 	.word	0x20012294

2000e614 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000e614:	b580      	push	{r7, lr}
2000e616:	b08a      	sub	sp, #40	; 0x28
2000e618:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000e61a:	f107 0314 	add.w	r3, r7, #20
2000e61e:	2200      	movs	r2, #0
2000e620:	601a      	str	r2, [r3, #0]
2000e622:	605a      	str	r2, [r3, #4]
2000e624:	609a      	str	r2, [r3, #8]
2000e626:	60da      	str	r2, [r3, #12]
2000e628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
2000e62a:	2300      	movs	r3, #0
2000e62c:	613b      	str	r3, [r7, #16]
2000e62e:	4b35      	ldr	r3, [pc, #212]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e632:	4a34      	ldr	r2, [pc, #208]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e634:	f043 0304 	orr.w	r3, r3, #4
2000e638:	6313      	str	r3, [r2, #48]	; 0x30
2000e63a:	4b32      	ldr	r3, [pc, #200]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e63e:	f003 0304 	and.w	r3, r3, #4
2000e642:	613b      	str	r3, [r7, #16]
2000e644:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000e646:	2300      	movs	r3, #0
2000e648:	60fb      	str	r3, [r7, #12]
2000e64a:	4b2e      	ldr	r3, [pc, #184]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e64e:	4a2d      	ldr	r2, [pc, #180]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000e654:	6313      	str	r3, [r2, #48]	; 0x30
2000e656:	4b2b      	ldr	r3, [pc, #172]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e65a:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000e65e:	60fb      	str	r3, [r7, #12]
2000e660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000e662:	2300      	movs	r3, #0
2000e664:	60bb      	str	r3, [r7, #8]
2000e666:	4b27      	ldr	r3, [pc, #156]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e66a:	4a26      	ldr	r2, [pc, #152]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e66c:	f043 0301 	orr.w	r3, r3, #1
2000e670:	6313      	str	r3, [r2, #48]	; 0x30
2000e672:	4b24      	ldr	r3, [pc, #144]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e676:	f003 0301 	and.w	r3, r3, #1
2000e67a:	60bb      	str	r3, [r7, #8]
2000e67c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000e67e:	2300      	movs	r3, #0
2000e680:	607b      	str	r3, [r7, #4]
2000e682:	4b20      	ldr	r3, [pc, #128]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e686:	4a1f      	ldr	r2, [pc, #124]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e688:	f043 0302 	orr.w	r3, r3, #2
2000e68c:	6313      	str	r3, [r2, #48]	; 0x30
2000e68e:	4b1d      	ldr	r3, [pc, #116]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e692:	f003 0302 	and.w	r3, r3, #2
2000e696:	607b      	str	r3, [r7, #4]
2000e698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000e69a:	2300      	movs	r3, #0
2000e69c:	603b      	str	r3, [r7, #0]
2000e69e:	4b19      	ldr	r3, [pc, #100]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e6a2:	4a18      	ldr	r2, [pc, #96]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e6a4:	f043 0308 	orr.w	r3, r3, #8
2000e6a8:	6313      	str	r3, [r2, #48]	; 0x30
2000e6aa:	4b16      	ldr	r3, [pc, #88]	; (2000e704 <MX_GPIO_Init+0xf0>)
2000e6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000e6ae:	f003 0308 	and.w	r3, r3, #8
2000e6b2:	603b      	str	r3, [r7, #0]
2000e6b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000e6b6:	2200      	movs	r2, #0
2000e6b8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000e6bc:	4812      	ldr	r0, [pc, #72]	; (2000e708 <MX_GPIO_Init+0xf4>)
2000e6be:	f000 fd99 	bl	2000f1f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
2000e6c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
2000e6c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
2000e6c8:	2300      	movs	r3, #0
2000e6ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000e6cc:	2300      	movs	r3, #0
2000e6ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
2000e6d0:	f107 0314 	add.w	r3, r7, #20
2000e6d4:	4619      	mov	r1, r3
2000e6d6:	480d      	ldr	r0, [pc, #52]	; (2000e70c <MX_GPIO_Init+0xf8>)
2000e6d8:	f000 fbd8 	bl	2000ee8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000e6dc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000e6e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000e6e2:	2301      	movs	r3, #1
2000e6e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000e6e6:	2300      	movs	r3, #0
2000e6e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000e6ea:	2302      	movs	r3, #2
2000e6ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000e6ee:	f107 0314 	add.w	r3, r7, #20
2000e6f2:	4619      	mov	r1, r3
2000e6f4:	4804      	ldr	r0, [pc, #16]	; (2000e708 <MX_GPIO_Init+0xf4>)
2000e6f6:	f000 fbc9 	bl	2000ee8c <HAL_GPIO_Init>

}
2000e6fa:	bf00      	nop
2000e6fc:	3728      	adds	r7, #40	; 0x28
2000e6fe:	46bd      	mov	sp, r7
2000e700:	bd80      	pop	{r7, pc}
2000e702:	bf00      	nop
2000e704:	40023800 	.word	0x40023800
2000e708:	40020c00 	.word	0x40020c00
2000e70c:	40020800 	.word	0x40020800

2000e710 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000e710:	b580      	push	{r7, lr}
2000e712:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000e714:	4b09      	ldr	r3, [pc, #36]	; (2000e73c <MX_IWDG_Init+0x2c>)
2000e716:	4a0a      	ldr	r2, [pc, #40]	; (2000e740 <MX_IWDG_Init+0x30>)
2000e718:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000e71a:	4b08      	ldr	r3, [pc, #32]	; (2000e73c <MX_IWDG_Init+0x2c>)
2000e71c:	2204      	movs	r2, #4
2000e71e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000e720:	4b06      	ldr	r3, [pc, #24]	; (2000e73c <MX_IWDG_Init+0x2c>)
2000e722:	f640 72ff 	movw	r2, #4095	; 0xfff
2000e726:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000e728:	4804      	ldr	r0, [pc, #16]	; (2000e73c <MX_IWDG_Init+0x2c>)
2000e72a:	f000 fd7c 	bl	2000f226 <HAL_IWDG_Init>
2000e72e:	4603      	mov	r3, r0
2000e730:	2b00      	cmp	r3, #0
2000e732:	d001      	beq.n	2000e738 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000e734:	f000 f886 	bl	2000e844 <Error_Handler>
  }

}
2000e738:	bf00      	nop
2000e73a:	bd80      	pop	{r7, pc}
2000e73c:	20012424 	.word	0x20012424
2000e740:	40003000 	.word	0x40003000

2000e744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000e744:	b580      	push	{r7, lr}
2000e746:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000e748:	f000 fa24 	bl	2000eb94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000e74c:	f000 f80e 	bl	2000e76c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000e750:	f7ff ff60 	bl	2000e614 <MX_GPIO_Init>
  MX_IWDG_Init();
2000e754:	f7ff ffdc 	bl	2000e710 <MX_IWDG_Init>
  MX_USART2_UART_Init();
2000e758:	f000 f920 	bl	2000e99c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
2000e75c:	f000 f948 	bl	2000e9f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  SDK_MAIN_Wrapper();
2000e760:	f7ff fb6e 	bl	2000de40 <SDK_MAIN_Wrapper>
2000e764:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
2000e766:	4618      	mov	r0, r3
2000e768:	bd80      	pop	{r7, pc}
	...

2000e76c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000e76c:	b580      	push	{r7, lr}
2000e76e:	b094      	sub	sp, #80	; 0x50
2000e770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000e772:	f107 0320 	add.w	r3, r7, #32
2000e776:	2230      	movs	r2, #48	; 0x30
2000e778:	2100      	movs	r1, #0
2000e77a:	4618      	mov	r0, r3
2000e77c:	f001 ffbe 	bl	200106fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000e780:	f107 030c 	add.w	r3, r7, #12
2000e784:	2200      	movs	r2, #0
2000e786:	601a      	str	r2, [r3, #0]
2000e788:	605a      	str	r2, [r3, #4]
2000e78a:	609a      	str	r2, [r3, #8]
2000e78c:	60da      	str	r2, [r3, #12]
2000e78e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000e790:	2300      	movs	r3, #0
2000e792:	60bb      	str	r3, [r7, #8]
2000e794:	4b29      	ldr	r3, [pc, #164]	; (2000e83c <SystemClock_Config+0xd0>)
2000e796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e798:	4a28      	ldr	r2, [pc, #160]	; (2000e83c <SystemClock_Config+0xd0>)
2000e79a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e79e:	6413      	str	r3, [r2, #64]	; 0x40
2000e7a0:	4b26      	ldr	r3, [pc, #152]	; (2000e83c <SystemClock_Config+0xd0>)
2000e7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e7a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e7a8:	60bb      	str	r3, [r7, #8]
2000e7aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000e7ac:	2300      	movs	r3, #0
2000e7ae:	607b      	str	r3, [r7, #4]
2000e7b0:	4b23      	ldr	r3, [pc, #140]	; (2000e840 <SystemClock_Config+0xd4>)
2000e7b2:	681b      	ldr	r3, [r3, #0]
2000e7b4:	4a22      	ldr	r2, [pc, #136]	; (2000e840 <SystemClock_Config+0xd4>)
2000e7b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e7ba:	6013      	str	r3, [r2, #0]
2000e7bc:	4b20      	ldr	r3, [pc, #128]	; (2000e840 <SystemClock_Config+0xd4>)
2000e7be:	681b      	ldr	r3, [r3, #0]
2000e7c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e7c4:	607b      	str	r3, [r7, #4]
2000e7c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000e7c8:	2309      	movs	r3, #9
2000e7ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000e7cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000e7d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000e7d2:	2301      	movs	r3, #1
2000e7d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000e7d6:	2302      	movs	r3, #2
2000e7d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000e7da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000e7de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000e7e0:	2319      	movs	r3, #25
2000e7e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000e7e4:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000e7e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000e7ea:	2302      	movs	r3, #2
2000e7ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000e7ee:	2304      	movs	r3, #4
2000e7f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000e7f2:	f107 0320 	add.w	r3, r7, #32
2000e7f6:	4618      	mov	r0, r3
2000e7f8:	f000 fd4e 	bl	2000f298 <HAL_RCC_OscConfig>
2000e7fc:	4603      	mov	r3, r0
2000e7fe:	2b00      	cmp	r3, #0
2000e800:	d001      	beq.n	2000e806 <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000e802:	f000 f81f 	bl	2000e844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000e806:	230f      	movs	r3, #15
2000e808:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000e80a:	2302      	movs	r3, #2
2000e80c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000e80e:	2300      	movs	r3, #0
2000e810:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000e812:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000e816:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000e818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000e81c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000e81e:	f107 030c 	add.w	r3, r7, #12
2000e822:	2105      	movs	r1, #5
2000e824:	4618      	mov	r0, r3
2000e826:	f000 ffa7 	bl	2000f778 <HAL_RCC_ClockConfig>
2000e82a:	4603      	mov	r3, r0
2000e82c:	2b00      	cmp	r3, #0
2000e82e:	d001      	beq.n	2000e834 <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000e830:	f000 f808 	bl	2000e844 <Error_Handler>
  }
}
2000e834:	bf00      	nop
2000e836:	3750      	adds	r7, #80	; 0x50
2000e838:	46bd      	mov	sp, r7
2000e83a:	bd80      	pop	{r7, pc}
2000e83c:	40023800 	.word	0x40023800
2000e840:	40007000 	.word	0x40007000

2000e844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000e844:	b480      	push	{r7}
2000e846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000e848:	bf00      	nop
2000e84a:	46bd      	mov	sp, r7
2000e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e850:	4770      	bx	lr
	...

2000e854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000e854:	b480      	push	{r7}
2000e856:	b083      	sub	sp, #12
2000e858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e85a:	2300      	movs	r3, #0
2000e85c:	607b      	str	r3, [r7, #4]
2000e85e:	4b10      	ldr	r3, [pc, #64]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e862:	4a0f      	ldr	r2, [pc, #60]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e868:	6453      	str	r3, [r2, #68]	; 0x44
2000e86a:	4b0d      	ldr	r3, [pc, #52]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e86c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e86e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e872:	607b      	str	r3, [r7, #4]
2000e874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000e876:	2300      	movs	r3, #0
2000e878:	603b      	str	r3, [r7, #0]
2000e87a:	4b09      	ldr	r3, [pc, #36]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e87e:	4a08      	ldr	r2, [pc, #32]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e884:	6413      	str	r3, [r2, #64]	; 0x40
2000e886:	4b06      	ldr	r3, [pc, #24]	; (2000e8a0 <HAL_MspInit+0x4c>)
2000e888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e88a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e88e:	603b      	str	r3, [r7, #0]
2000e890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000e892:	bf00      	nop
2000e894:	370c      	adds	r7, #12
2000e896:	46bd      	mov	sp, r7
2000e898:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e89c:	4770      	bx	lr
2000e89e:	bf00      	nop
2000e8a0:	40023800 	.word	0x40023800

2000e8a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000e8a4:	b480      	push	{r7}
2000e8a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000e8a8:	bf00      	nop
2000e8aa:	46bd      	mov	sp, r7
2000e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e8b0:	4770      	bx	lr

2000e8b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000e8b2:	b480      	push	{r7}
2000e8b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000e8b6:	e7fe      	b.n	2000e8b6 <HardFault_Handler+0x4>

2000e8b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000e8b8:	b480      	push	{r7}
2000e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000e8bc:	e7fe      	b.n	2000e8bc <MemManage_Handler+0x4>

2000e8be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000e8be:	b480      	push	{r7}
2000e8c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000e8c2:	e7fe      	b.n	2000e8c2 <BusFault_Handler+0x4>

2000e8c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000e8c4:	b480      	push	{r7}
2000e8c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000e8c8:	e7fe      	b.n	2000e8c8 <UsageFault_Handler+0x4>

2000e8ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000e8ca:	b480      	push	{r7}
2000e8cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000e8ce:	bf00      	nop
2000e8d0:	46bd      	mov	sp, r7
2000e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e8d6:	4770      	bx	lr

2000e8d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000e8d8:	b480      	push	{r7}
2000e8da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000e8dc:	bf00      	nop
2000e8de:	46bd      	mov	sp, r7
2000e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e8e4:	4770      	bx	lr

2000e8e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000e8e6:	b480      	push	{r7}
2000e8e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000e8ea:	bf00      	nop
2000e8ec:	46bd      	mov	sp, r7
2000e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e8f2:	4770      	bx	lr

2000e8f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000e8f4:	b580      	push	{r7, lr}
2000e8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000e8f8:	f000 f99e 	bl	2000ec38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SDK_SYS_Tick();
2000e8fc:	f7ff fad3 	bl	2000dea6 <SDK_SYS_Tick>
  /* USER CODE END SysTick_IRQn 1 */
}
2000e900:	bf00      	nop
2000e902:	bd80      	pop	{r7, pc}

2000e904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000e904:	b580      	push	{r7, lr}
2000e906:	b086      	sub	sp, #24
2000e908:	af00      	add	r7, sp, #0
2000e90a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000e90c:	4a14      	ldr	r2, [pc, #80]	; (2000e960 <_sbrk+0x5c>)
2000e90e:	4b15      	ldr	r3, [pc, #84]	; (2000e964 <_sbrk+0x60>)
2000e910:	1ad3      	subs	r3, r2, r3
2000e912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000e914:	697b      	ldr	r3, [r7, #20]
2000e916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000e918:	4b13      	ldr	r3, [pc, #76]	; (2000e968 <_sbrk+0x64>)
2000e91a:	681b      	ldr	r3, [r3, #0]
2000e91c:	2b00      	cmp	r3, #0
2000e91e:	d102      	bne.n	2000e926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000e920:	4b11      	ldr	r3, [pc, #68]	; (2000e968 <_sbrk+0x64>)
2000e922:	4a12      	ldr	r2, [pc, #72]	; (2000e96c <_sbrk+0x68>)
2000e924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000e926:	4b10      	ldr	r3, [pc, #64]	; (2000e968 <_sbrk+0x64>)
2000e928:	681a      	ldr	r2, [r3, #0]
2000e92a:	687b      	ldr	r3, [r7, #4]
2000e92c:	4413      	add	r3, r2
2000e92e:	693a      	ldr	r2, [r7, #16]
2000e930:	429a      	cmp	r2, r3
2000e932:	d207      	bcs.n	2000e944 <_sbrk+0x40>
  {
    errno = ENOMEM;
2000e934:	f001 feb8 	bl	200106a8 <__errno>
2000e938:	4603      	mov	r3, r0
2000e93a:	220c      	movs	r2, #12
2000e93c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000e93e:	f04f 33ff 	mov.w	r3, #4294967295
2000e942:	e009      	b.n	2000e958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000e944:	4b08      	ldr	r3, [pc, #32]	; (2000e968 <_sbrk+0x64>)
2000e946:	681b      	ldr	r3, [r3, #0]
2000e948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000e94a:	4b07      	ldr	r3, [pc, #28]	; (2000e968 <_sbrk+0x64>)
2000e94c:	681a      	ldr	r2, [r3, #0]
2000e94e:	687b      	ldr	r3, [r7, #4]
2000e950:	4413      	add	r3, r2
2000e952:	4a05      	ldr	r2, [pc, #20]	; (2000e968 <_sbrk+0x64>)
2000e954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000e956:	68fb      	ldr	r3, [r7, #12]
}
2000e958:	4618      	mov	r0, r3
2000e95a:	3718      	adds	r7, #24
2000e95c:	46bd      	mov	sp, r7
2000e95e:	bd80      	pop	{r7, pc}
2000e960:	20020000 	.word	0x20020000
2000e964:	00000400 	.word	0x00000400
2000e968:	20012318 	.word	0x20012318
2000e96c:	200124c8 	.word	0x200124c8

2000e970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000e970:	b480      	push	{r7}
2000e972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000e974:	4b07      	ldr	r3, [pc, #28]	; (2000e994 <SystemInit+0x24>)
2000e976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000e97a:	4a06      	ldr	r2, [pc, #24]	; (2000e994 <SystemInit+0x24>)
2000e97c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000e980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000e984:	4b03      	ldr	r3, [pc, #12]	; (2000e994 <SystemInit+0x24>)
2000e986:	4a04      	ldr	r2, [pc, #16]	; (2000e998 <SystemInit+0x28>)
2000e988:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000e98a:	bf00      	nop
2000e98c:	46bd      	mov	sp, r7
2000e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e992:	4770      	bx	lr
2000e994:	e000ed00 	.word	0xe000ed00
2000e998:	2000d000 	.word	0x2000d000

2000e99c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
2000e99c:	b580      	push	{r7, lr}
2000e99e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
2000e9a0:	4b11      	ldr	r3, [pc, #68]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9a2:	4a12      	ldr	r2, [pc, #72]	; (2000e9ec <MX_USART2_UART_Init+0x50>)
2000e9a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
2000e9a6:	4b10      	ldr	r3, [pc, #64]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
2000e9ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
2000e9ae:	4b0e      	ldr	r3, [pc, #56]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9b0:	2200      	movs	r2, #0
2000e9b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
2000e9b4:	4b0c      	ldr	r3, [pc, #48]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9b6:	2200      	movs	r2, #0
2000e9b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
2000e9ba:	4b0b      	ldr	r3, [pc, #44]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9bc:	2200      	movs	r2, #0
2000e9be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
2000e9c0:	4b09      	ldr	r3, [pc, #36]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9c2:	220c      	movs	r2, #12
2000e9c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
2000e9c6:	4b08      	ldr	r3, [pc, #32]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9c8:	2200      	movs	r2, #0
2000e9ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
2000e9cc:	4b06      	ldr	r3, [pc, #24]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9ce:	2200      	movs	r2, #0
2000e9d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
2000e9d2:	4805      	ldr	r0, [pc, #20]	; (2000e9e8 <MX_USART2_UART_Init+0x4c>)
2000e9d4:	f001 f8a0 	bl	2000fb18 <HAL_UART_Init>
2000e9d8:	4603      	mov	r3, r0
2000e9da:	2b00      	cmp	r3, #0
2000e9dc:	d001      	beq.n	2000e9e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
2000e9de:	f7ff ff31 	bl	2000e844 <Error_Handler>
  }

}
2000e9e2:	bf00      	nop
2000e9e4:	bd80      	pop	{r7, pc}
2000e9e6:	bf00      	nop
2000e9e8:	20012470 	.word	0x20012470
2000e9ec:	40004400 	.word	0x40004400

2000e9f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
2000e9f0:	b580      	push	{r7, lr}
2000e9f2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
2000e9f4:	4b11      	ldr	r3, [pc, #68]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000e9f6:	4a12      	ldr	r2, [pc, #72]	; (2000ea40 <MX_USART3_UART_Init+0x50>)
2000e9f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
2000e9fa:	4b10      	ldr	r3, [pc, #64]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000e9fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
2000ea00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
2000ea02:	4b0e      	ldr	r3, [pc, #56]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea04:	2200      	movs	r2, #0
2000ea06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
2000ea08:	4b0c      	ldr	r3, [pc, #48]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea0a:	2200      	movs	r2, #0
2000ea0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
2000ea0e:	4b0b      	ldr	r3, [pc, #44]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea10:	2200      	movs	r2, #0
2000ea12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
2000ea14:	4b09      	ldr	r3, [pc, #36]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea16:	220c      	movs	r2, #12
2000ea18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
2000ea1a:	4b08      	ldr	r3, [pc, #32]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea1c:	2200      	movs	r2, #0
2000ea1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
2000ea20:	4b06      	ldr	r3, [pc, #24]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea22:	2200      	movs	r2, #0
2000ea24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
2000ea26:	4805      	ldr	r0, [pc, #20]	; (2000ea3c <MX_USART3_UART_Init+0x4c>)
2000ea28:	f001 f876 	bl	2000fb18 <HAL_UART_Init>
2000ea2c:	4603      	mov	r3, r0
2000ea2e:	2b00      	cmp	r3, #0
2000ea30:	d001      	beq.n	2000ea36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
2000ea32:	f7ff ff07 	bl	2000e844 <Error_Handler>
  }

}
2000ea36:	bf00      	nop
2000ea38:	bd80      	pop	{r7, pc}
2000ea3a:	bf00      	nop
2000ea3c:	20012430 	.word	0x20012430
2000ea40:	40004800 	.word	0x40004800

2000ea44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
2000ea44:	b580      	push	{r7, lr}
2000ea46:	b08c      	sub	sp, #48	; 0x30
2000ea48:	af00      	add	r7, sp, #0
2000ea4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000ea4c:	f107 031c 	add.w	r3, r7, #28
2000ea50:	2200      	movs	r2, #0
2000ea52:	601a      	str	r2, [r3, #0]
2000ea54:	605a      	str	r2, [r3, #4]
2000ea56:	609a      	str	r2, [r3, #8]
2000ea58:	60da      	str	r2, [r3, #12]
2000ea5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
2000ea5c:	687b      	ldr	r3, [r7, #4]
2000ea5e:	681b      	ldr	r3, [r3, #0]
2000ea60:	4a32      	ldr	r2, [pc, #200]	; (2000eb2c <HAL_UART_MspInit+0xe8>)
2000ea62:	4293      	cmp	r3, r2
2000ea64:	d12c      	bne.n	2000eac0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
2000ea66:	2300      	movs	r3, #0
2000ea68:	61bb      	str	r3, [r7, #24]
2000ea6a:	4b31      	ldr	r3, [pc, #196]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ea6e:	4a30      	ldr	r2, [pc, #192]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000ea74:	6413      	str	r3, [r2, #64]	; 0x40
2000ea76:	4b2e      	ldr	r3, [pc, #184]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ea7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000ea7e:	61bb      	str	r3, [r7, #24]
2000ea80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
2000ea82:	2300      	movs	r3, #0
2000ea84:	617b      	str	r3, [r7, #20]
2000ea86:	4b2a      	ldr	r3, [pc, #168]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ea8a:	4a29      	ldr	r2, [pc, #164]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea8c:	f043 0301 	orr.w	r3, r3, #1
2000ea90:	6313      	str	r3, [r2, #48]	; 0x30
2000ea92:	4b27      	ldr	r3, [pc, #156]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ea94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000ea96:	f003 0301 	and.w	r3, r3, #1
2000ea9a:	617b      	str	r3, [r7, #20]
2000ea9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
2000ea9e:	230c      	movs	r3, #12
2000eaa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000eaa2:	2302      	movs	r3, #2
2000eaa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000eaa6:	2300      	movs	r3, #0
2000eaa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000eaaa:	2303      	movs	r3, #3
2000eaac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
2000eaae:	2307      	movs	r3, #7
2000eab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
2000eab2:	f107 031c 	add.w	r3, r7, #28
2000eab6:	4619      	mov	r1, r3
2000eab8:	481e      	ldr	r0, [pc, #120]	; (2000eb34 <HAL_UART_MspInit+0xf0>)
2000eaba:	f000 f9e7 	bl	2000ee8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
2000eabe:	e031      	b.n	2000eb24 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART3)
2000eac0:	687b      	ldr	r3, [r7, #4]
2000eac2:	681b      	ldr	r3, [r3, #0]
2000eac4:	4a1c      	ldr	r2, [pc, #112]	; (2000eb38 <HAL_UART_MspInit+0xf4>)
2000eac6:	4293      	cmp	r3, r2
2000eac8:	d12c      	bne.n	2000eb24 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
2000eaca:	2300      	movs	r3, #0
2000eacc:	613b      	str	r3, [r7, #16]
2000eace:	4b18      	ldr	r3, [pc, #96]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ead0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000ead2:	4a17      	ldr	r2, [pc, #92]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000ead4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000ead8:	6413      	str	r3, [r2, #64]	; 0x40
2000eada:	4b15      	ldr	r3, [pc, #84]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000eadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000eade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2000eae2:	613b      	str	r3, [r7, #16]
2000eae4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
2000eae6:	2300      	movs	r3, #0
2000eae8:	60fb      	str	r3, [r7, #12]
2000eaea:	4b11      	ldr	r3, [pc, #68]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000eaec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000eaee:	4a10      	ldr	r2, [pc, #64]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000eaf0:	f043 0302 	orr.w	r3, r3, #2
2000eaf4:	6313      	str	r3, [r2, #48]	; 0x30
2000eaf6:	4b0e      	ldr	r3, [pc, #56]	; (2000eb30 <HAL_UART_MspInit+0xec>)
2000eaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000eafa:	f003 0302 	and.w	r3, r3, #2
2000eafe:	60fb      	str	r3, [r7, #12]
2000eb00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
2000eb02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
2000eb06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
2000eb08:	2302      	movs	r3, #2
2000eb0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
2000eb0c:	2300      	movs	r3, #0
2000eb0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
2000eb10:	2303      	movs	r3, #3
2000eb12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
2000eb14:	2307      	movs	r3, #7
2000eb16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
2000eb18:	f107 031c 	add.w	r3, r7, #28
2000eb1c:	4619      	mov	r1, r3
2000eb1e:	4807      	ldr	r0, [pc, #28]	; (2000eb3c <HAL_UART_MspInit+0xf8>)
2000eb20:	f000 f9b4 	bl	2000ee8c <HAL_GPIO_Init>
}
2000eb24:	bf00      	nop
2000eb26:	3730      	adds	r7, #48	; 0x30
2000eb28:	46bd      	mov	sp, r7
2000eb2a:	bd80      	pop	{r7, pc}
2000eb2c:	40004400 	.word	0x40004400
2000eb30:	40023800 	.word	0x40023800
2000eb34:	40020000 	.word	0x40020000
2000eb38:	40004800 	.word	0x40004800
2000eb3c:	40020400 	.word	0x40020400

2000eb40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000eb40:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000eb78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000eb44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000eb46:	e003      	b.n	2000eb50 <LoopCopyDataInit>

2000eb48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000eb48:	4b0c      	ldr	r3, [pc, #48]	; (2000eb7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000eb4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000eb4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000eb4e:	3104      	adds	r1, #4

2000eb50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000eb50:	480b      	ldr	r0, [pc, #44]	; (2000eb80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000eb52:	4b0c      	ldr	r3, [pc, #48]	; (2000eb84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000eb54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000eb56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000eb58:	d3f6      	bcc.n	2000eb48 <CopyDataInit>
  ldr  r2, =_sbss
2000eb5a:	4a0b      	ldr	r2, [pc, #44]	; (2000eb88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000eb5c:	e002      	b.n	2000eb64 <LoopFillZerobss>

2000eb5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000eb5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000eb60:	f842 3b04 	str.w	r3, [r2], #4

2000eb64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000eb64:	4b09      	ldr	r3, [pc, #36]	; (2000eb8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000eb66:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000eb68:	d3f9      	bcc.n	2000eb5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000eb6a:	f7ff ff01 	bl	2000e970 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000eb6e:	f001 fda1 	bl	200106b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000eb72:	f7ff fde7 	bl	2000e744 <main>
  bx  lr    
2000eb76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000eb78:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000eb7c:	20012064 	.word	0x20012064
  ldr  r0, =_sdata
2000eb80:	20012064 	.word	0x20012064
  ldr  r3, =_edata
2000eb84:	200120e4 	.word	0x200120e4
  ldr  r2, =_sbss
2000eb88:	200120e4 	.word	0x200120e4
  ldr  r3, = _ebss
2000eb8c:	200124c4 	.word	0x200124c4

2000eb90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000eb90:	e7fe      	b.n	2000eb90 <ADC_IRQHandler>
	...

2000eb94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000eb94:	b580      	push	{r7, lr}
2000eb96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000eb98:	4b0e      	ldr	r3, [pc, #56]	; (2000ebd4 <HAL_Init+0x40>)
2000eb9a:	681b      	ldr	r3, [r3, #0]
2000eb9c:	4a0d      	ldr	r2, [pc, #52]	; (2000ebd4 <HAL_Init+0x40>)
2000eb9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000eba2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000eba4:	4b0b      	ldr	r3, [pc, #44]	; (2000ebd4 <HAL_Init+0x40>)
2000eba6:	681b      	ldr	r3, [r3, #0]
2000eba8:	4a0a      	ldr	r2, [pc, #40]	; (2000ebd4 <HAL_Init+0x40>)
2000ebaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000ebae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000ebb0:	4b08      	ldr	r3, [pc, #32]	; (2000ebd4 <HAL_Init+0x40>)
2000ebb2:	681b      	ldr	r3, [r3, #0]
2000ebb4:	4a07      	ldr	r2, [pc, #28]	; (2000ebd4 <HAL_Init+0x40>)
2000ebb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000ebba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000ebbc:	2003      	movs	r0, #3
2000ebbe:	f000 f931 	bl	2000ee24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000ebc2:	2000      	movs	r0, #0
2000ebc4:	f000 f808 	bl	2000ebd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000ebc8:	f7ff fe44 	bl	2000e854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000ebcc:	2300      	movs	r3, #0
}
2000ebce:	4618      	mov	r0, r3
2000ebd0:	bd80      	pop	{r7, pc}
2000ebd2:	bf00      	nop
2000ebd4:	40023c00 	.word	0x40023c00

2000ebd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000ebd8:	b580      	push	{r7, lr}
2000ebda:	b082      	sub	sp, #8
2000ebdc:	af00      	add	r7, sp, #0
2000ebde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000ebe0:	4b12      	ldr	r3, [pc, #72]	; (2000ec2c <HAL_InitTick+0x54>)
2000ebe2:	681a      	ldr	r2, [r3, #0]
2000ebe4:	4b12      	ldr	r3, [pc, #72]	; (2000ec30 <HAL_InitTick+0x58>)
2000ebe6:	781b      	ldrb	r3, [r3, #0]
2000ebe8:	4619      	mov	r1, r3
2000ebea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000ebee:	fbb3 f3f1 	udiv	r3, r3, r1
2000ebf2:	fbb2 f3f3 	udiv	r3, r2, r3
2000ebf6:	4618      	mov	r0, r3
2000ebf8:	f000 f93b 	bl	2000ee72 <HAL_SYSTICK_Config>
2000ebfc:	4603      	mov	r3, r0
2000ebfe:	2b00      	cmp	r3, #0
2000ec00:	d001      	beq.n	2000ec06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000ec02:	2301      	movs	r3, #1
2000ec04:	e00e      	b.n	2000ec24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000ec06:	687b      	ldr	r3, [r7, #4]
2000ec08:	2b0f      	cmp	r3, #15
2000ec0a:	d80a      	bhi.n	2000ec22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000ec0c:	2200      	movs	r2, #0
2000ec0e:	6879      	ldr	r1, [r7, #4]
2000ec10:	f04f 30ff 	mov.w	r0, #4294967295
2000ec14:	f000 f911 	bl	2000ee3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000ec18:	4a06      	ldr	r2, [pc, #24]	; (2000ec34 <HAL_InitTick+0x5c>)
2000ec1a:	687b      	ldr	r3, [r7, #4]
2000ec1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000ec1e:	2300      	movs	r3, #0
2000ec20:	e000      	b.n	2000ec24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000ec22:	2301      	movs	r3, #1
}
2000ec24:	4618      	mov	r0, r3
2000ec26:	3708      	adds	r7, #8
2000ec28:	46bd      	mov	sp, r7
2000ec2a:	bd80      	pop	{r7, pc}
2000ec2c:	20012074 	.word	0x20012074
2000ec30:	2001207c 	.word	0x2001207c
2000ec34:	20012078 	.word	0x20012078

2000ec38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000ec38:	b480      	push	{r7}
2000ec3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000ec3c:	4b06      	ldr	r3, [pc, #24]	; (2000ec58 <HAL_IncTick+0x20>)
2000ec3e:	781b      	ldrb	r3, [r3, #0]
2000ec40:	461a      	mov	r2, r3
2000ec42:	4b06      	ldr	r3, [pc, #24]	; (2000ec5c <HAL_IncTick+0x24>)
2000ec44:	681b      	ldr	r3, [r3, #0]
2000ec46:	4413      	add	r3, r2
2000ec48:	4a04      	ldr	r2, [pc, #16]	; (2000ec5c <HAL_IncTick+0x24>)
2000ec4a:	6013      	str	r3, [r2, #0]
}
2000ec4c:	bf00      	nop
2000ec4e:	46bd      	mov	sp, r7
2000ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ec54:	4770      	bx	lr
2000ec56:	bf00      	nop
2000ec58:	2001207c 	.word	0x2001207c
2000ec5c:	200124b0 	.word	0x200124b0

2000ec60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000ec60:	b480      	push	{r7}
2000ec62:	af00      	add	r7, sp, #0
  return uwTick;
2000ec64:	4b03      	ldr	r3, [pc, #12]	; (2000ec74 <HAL_GetTick+0x14>)
2000ec66:	681b      	ldr	r3, [r3, #0]
}
2000ec68:	4618      	mov	r0, r3
2000ec6a:	46bd      	mov	sp, r7
2000ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ec70:	4770      	bx	lr
2000ec72:	bf00      	nop
2000ec74:	200124b0 	.word	0x200124b0

2000ec78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000ec78:	b580      	push	{r7, lr}
2000ec7a:	b084      	sub	sp, #16
2000ec7c:	af00      	add	r7, sp, #0
2000ec7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000ec80:	f7ff ffee 	bl	2000ec60 <HAL_GetTick>
2000ec84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000ec86:	687b      	ldr	r3, [r7, #4]
2000ec88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000ec8a:	68fb      	ldr	r3, [r7, #12]
2000ec8c:	f1b3 3fff 	cmp.w	r3, #4294967295
2000ec90:	d005      	beq.n	2000ec9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000ec92:	4b0a      	ldr	r3, [pc, #40]	; (2000ecbc <HAL_Delay+0x44>)
2000ec94:	781b      	ldrb	r3, [r3, #0]
2000ec96:	461a      	mov	r2, r3
2000ec98:	68fb      	ldr	r3, [r7, #12]
2000ec9a:	4413      	add	r3, r2
2000ec9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000ec9e:	bf00      	nop
2000eca0:	f7ff ffde 	bl	2000ec60 <HAL_GetTick>
2000eca4:	4602      	mov	r2, r0
2000eca6:	68bb      	ldr	r3, [r7, #8]
2000eca8:	1ad3      	subs	r3, r2, r3
2000ecaa:	68fa      	ldr	r2, [r7, #12]
2000ecac:	429a      	cmp	r2, r3
2000ecae:	d8f7      	bhi.n	2000eca0 <HAL_Delay+0x28>
  {
  }
}
2000ecb0:	bf00      	nop
2000ecb2:	bf00      	nop
2000ecb4:	3710      	adds	r7, #16
2000ecb6:	46bd      	mov	sp, r7
2000ecb8:	bd80      	pop	{r7, pc}
2000ecba:	bf00      	nop
2000ecbc:	2001207c 	.word	0x2001207c

2000ecc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000ecc0:	b480      	push	{r7}
2000ecc2:	b085      	sub	sp, #20
2000ecc4:	af00      	add	r7, sp, #0
2000ecc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000ecc8:	687b      	ldr	r3, [r7, #4]
2000ecca:	f003 0307 	and.w	r3, r3, #7
2000ecce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000ecd0:	4b0c      	ldr	r3, [pc, #48]	; (2000ed04 <__NVIC_SetPriorityGrouping+0x44>)
2000ecd2:	68db      	ldr	r3, [r3, #12]
2000ecd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000ecd6:	68ba      	ldr	r2, [r7, #8]
2000ecd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000ecdc:	4013      	ands	r3, r2
2000ecde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000ece0:	68fb      	ldr	r3, [r7, #12]
2000ece2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000ece4:	68bb      	ldr	r3, [r7, #8]
2000ece6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000ece8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000ecec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000ecf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000ecf2:	4a04      	ldr	r2, [pc, #16]	; (2000ed04 <__NVIC_SetPriorityGrouping+0x44>)
2000ecf4:	68bb      	ldr	r3, [r7, #8]
2000ecf6:	60d3      	str	r3, [r2, #12]
}
2000ecf8:	bf00      	nop
2000ecfa:	3714      	adds	r7, #20
2000ecfc:	46bd      	mov	sp, r7
2000ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed02:	4770      	bx	lr
2000ed04:	e000ed00 	.word	0xe000ed00

2000ed08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000ed08:	b480      	push	{r7}
2000ed0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000ed0c:	4b04      	ldr	r3, [pc, #16]	; (2000ed20 <__NVIC_GetPriorityGrouping+0x18>)
2000ed0e:	68db      	ldr	r3, [r3, #12]
2000ed10:	0a1b      	lsrs	r3, r3, #8
2000ed12:	f003 0307 	and.w	r3, r3, #7
}
2000ed16:	4618      	mov	r0, r3
2000ed18:	46bd      	mov	sp, r7
2000ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed1e:	4770      	bx	lr
2000ed20:	e000ed00 	.word	0xe000ed00

2000ed24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000ed24:	b480      	push	{r7}
2000ed26:	b083      	sub	sp, #12
2000ed28:	af00      	add	r7, sp, #0
2000ed2a:	4603      	mov	r3, r0
2000ed2c:	6039      	str	r1, [r7, #0]
2000ed2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000ed30:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000ed34:	2b00      	cmp	r3, #0
2000ed36:	db0a      	blt.n	2000ed4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000ed38:	683b      	ldr	r3, [r7, #0]
2000ed3a:	b2da      	uxtb	r2, r3
2000ed3c:	490c      	ldr	r1, [pc, #48]	; (2000ed70 <__NVIC_SetPriority+0x4c>)
2000ed3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000ed42:	0112      	lsls	r2, r2, #4
2000ed44:	b2d2      	uxtb	r2, r2
2000ed46:	440b      	add	r3, r1
2000ed48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000ed4c:	e00a      	b.n	2000ed64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000ed4e:	683b      	ldr	r3, [r7, #0]
2000ed50:	b2da      	uxtb	r2, r3
2000ed52:	4908      	ldr	r1, [pc, #32]	; (2000ed74 <__NVIC_SetPriority+0x50>)
2000ed54:	79fb      	ldrb	r3, [r7, #7]
2000ed56:	f003 030f 	and.w	r3, r3, #15
2000ed5a:	3b04      	subs	r3, #4
2000ed5c:	0112      	lsls	r2, r2, #4
2000ed5e:	b2d2      	uxtb	r2, r2
2000ed60:	440b      	add	r3, r1
2000ed62:	761a      	strb	r2, [r3, #24]
}
2000ed64:	bf00      	nop
2000ed66:	370c      	adds	r7, #12
2000ed68:	46bd      	mov	sp, r7
2000ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ed6e:	4770      	bx	lr
2000ed70:	e000e100 	.word	0xe000e100
2000ed74:	e000ed00 	.word	0xe000ed00

2000ed78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000ed78:	b480      	push	{r7}
2000ed7a:	b089      	sub	sp, #36	; 0x24
2000ed7c:	af00      	add	r7, sp, #0
2000ed7e:	60f8      	str	r0, [r7, #12]
2000ed80:	60b9      	str	r1, [r7, #8]
2000ed82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000ed84:	68fb      	ldr	r3, [r7, #12]
2000ed86:	f003 0307 	and.w	r3, r3, #7
2000ed8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000ed8c:	69fb      	ldr	r3, [r7, #28]
2000ed8e:	f1c3 0307 	rsb	r3, r3, #7
2000ed92:	2b04      	cmp	r3, #4
2000ed94:	bf28      	it	cs
2000ed96:	2304      	movcs	r3, #4
2000ed98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000ed9a:	69fb      	ldr	r3, [r7, #28]
2000ed9c:	3304      	adds	r3, #4
2000ed9e:	2b06      	cmp	r3, #6
2000eda0:	d902      	bls.n	2000eda8 <NVIC_EncodePriority+0x30>
2000eda2:	69fb      	ldr	r3, [r7, #28]
2000eda4:	3b03      	subs	r3, #3
2000eda6:	e000      	b.n	2000edaa <NVIC_EncodePriority+0x32>
2000eda8:	2300      	movs	r3, #0
2000edaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000edac:	f04f 32ff 	mov.w	r2, #4294967295
2000edb0:	69bb      	ldr	r3, [r7, #24]
2000edb2:	fa02 f303 	lsl.w	r3, r2, r3
2000edb6:	43da      	mvns	r2, r3
2000edb8:	68bb      	ldr	r3, [r7, #8]
2000edba:	401a      	ands	r2, r3
2000edbc:	697b      	ldr	r3, [r7, #20]
2000edbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000edc0:	f04f 31ff 	mov.w	r1, #4294967295
2000edc4:	697b      	ldr	r3, [r7, #20]
2000edc6:	fa01 f303 	lsl.w	r3, r1, r3
2000edca:	43d9      	mvns	r1, r3
2000edcc:	687b      	ldr	r3, [r7, #4]
2000edce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000edd0:	4313      	orrs	r3, r2
         );
}
2000edd2:	4618      	mov	r0, r3
2000edd4:	3724      	adds	r7, #36	; 0x24
2000edd6:	46bd      	mov	sp, r7
2000edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
2000eddc:	4770      	bx	lr
	...

2000ede0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000ede0:	b580      	push	{r7, lr}
2000ede2:	b082      	sub	sp, #8
2000ede4:	af00      	add	r7, sp, #0
2000ede6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000ede8:	687b      	ldr	r3, [r7, #4]
2000edea:	3b01      	subs	r3, #1
2000edec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000edf0:	d301      	bcc.n	2000edf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000edf2:	2301      	movs	r3, #1
2000edf4:	e00f      	b.n	2000ee16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000edf6:	4a0a      	ldr	r2, [pc, #40]	; (2000ee20 <SysTick_Config+0x40>)
2000edf8:	687b      	ldr	r3, [r7, #4]
2000edfa:	3b01      	subs	r3, #1
2000edfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000edfe:	210f      	movs	r1, #15
2000ee00:	f04f 30ff 	mov.w	r0, #4294967295
2000ee04:	f7ff ff8e 	bl	2000ed24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000ee08:	4b05      	ldr	r3, [pc, #20]	; (2000ee20 <SysTick_Config+0x40>)
2000ee0a:	2200      	movs	r2, #0
2000ee0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000ee0e:	4b04      	ldr	r3, [pc, #16]	; (2000ee20 <SysTick_Config+0x40>)
2000ee10:	2207      	movs	r2, #7
2000ee12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000ee14:	2300      	movs	r3, #0
}
2000ee16:	4618      	mov	r0, r3
2000ee18:	3708      	adds	r7, #8
2000ee1a:	46bd      	mov	sp, r7
2000ee1c:	bd80      	pop	{r7, pc}
2000ee1e:	bf00      	nop
2000ee20:	e000e010 	.word	0xe000e010

2000ee24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000ee24:	b580      	push	{r7, lr}
2000ee26:	b082      	sub	sp, #8
2000ee28:	af00      	add	r7, sp, #0
2000ee2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000ee2c:	6878      	ldr	r0, [r7, #4]
2000ee2e:	f7ff ff47 	bl	2000ecc0 <__NVIC_SetPriorityGrouping>
}
2000ee32:	bf00      	nop
2000ee34:	3708      	adds	r7, #8
2000ee36:	46bd      	mov	sp, r7
2000ee38:	bd80      	pop	{r7, pc}

2000ee3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000ee3a:	b580      	push	{r7, lr}
2000ee3c:	b086      	sub	sp, #24
2000ee3e:	af00      	add	r7, sp, #0
2000ee40:	4603      	mov	r3, r0
2000ee42:	60b9      	str	r1, [r7, #8]
2000ee44:	607a      	str	r2, [r7, #4]
2000ee46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000ee48:	2300      	movs	r3, #0
2000ee4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000ee4c:	f7ff ff5c 	bl	2000ed08 <__NVIC_GetPriorityGrouping>
2000ee50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000ee52:	687a      	ldr	r2, [r7, #4]
2000ee54:	68b9      	ldr	r1, [r7, #8]
2000ee56:	6978      	ldr	r0, [r7, #20]
2000ee58:	f7ff ff8e 	bl	2000ed78 <NVIC_EncodePriority>
2000ee5c:	4602      	mov	r2, r0
2000ee5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000ee62:	4611      	mov	r1, r2
2000ee64:	4618      	mov	r0, r3
2000ee66:	f7ff ff5d 	bl	2000ed24 <__NVIC_SetPriority>
}
2000ee6a:	bf00      	nop
2000ee6c:	3718      	adds	r7, #24
2000ee6e:	46bd      	mov	sp, r7
2000ee70:	bd80      	pop	{r7, pc}

2000ee72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000ee72:	b580      	push	{r7, lr}
2000ee74:	b082      	sub	sp, #8
2000ee76:	af00      	add	r7, sp, #0
2000ee78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000ee7a:	6878      	ldr	r0, [r7, #4]
2000ee7c:	f7ff ffb0 	bl	2000ede0 <SysTick_Config>
2000ee80:	4603      	mov	r3, r0
}
2000ee82:	4618      	mov	r0, r3
2000ee84:	3708      	adds	r7, #8
2000ee86:	46bd      	mov	sp, r7
2000ee88:	bd80      	pop	{r7, pc}
	...

2000ee8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000ee8c:	b480      	push	{r7}
2000ee8e:	b089      	sub	sp, #36	; 0x24
2000ee90:	af00      	add	r7, sp, #0
2000ee92:	6078      	str	r0, [r7, #4]
2000ee94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000ee96:	2300      	movs	r3, #0
2000ee98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000ee9a:	2300      	movs	r3, #0
2000ee9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000ee9e:	2300      	movs	r3, #0
2000eea0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000eea2:	2300      	movs	r3, #0
2000eea4:	61fb      	str	r3, [r7, #28]
2000eea6:	e16b      	b.n	2000f180 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000eea8:	2201      	movs	r2, #1
2000eeaa:	69fb      	ldr	r3, [r7, #28]
2000eeac:	fa02 f303 	lsl.w	r3, r2, r3
2000eeb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000eeb2:	683b      	ldr	r3, [r7, #0]
2000eeb4:	681b      	ldr	r3, [r3, #0]
2000eeb6:	697a      	ldr	r2, [r7, #20]
2000eeb8:	4013      	ands	r3, r2
2000eeba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000eebc:	693a      	ldr	r2, [r7, #16]
2000eebe:	697b      	ldr	r3, [r7, #20]
2000eec0:	429a      	cmp	r2, r3
2000eec2:	f040 815a 	bne.w	2000f17a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000eec6:	683b      	ldr	r3, [r7, #0]
2000eec8:	685b      	ldr	r3, [r3, #4]
2000eeca:	2b01      	cmp	r3, #1
2000eecc:	d00b      	beq.n	2000eee6 <HAL_GPIO_Init+0x5a>
2000eece:	683b      	ldr	r3, [r7, #0]
2000eed0:	685b      	ldr	r3, [r3, #4]
2000eed2:	2b02      	cmp	r3, #2
2000eed4:	d007      	beq.n	2000eee6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eed6:	683b      	ldr	r3, [r7, #0]
2000eed8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000eeda:	2b11      	cmp	r3, #17
2000eedc:	d003      	beq.n	2000eee6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000eede:	683b      	ldr	r3, [r7, #0]
2000eee0:	685b      	ldr	r3, [r3, #4]
2000eee2:	2b12      	cmp	r3, #18
2000eee4:	d130      	bne.n	2000ef48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000eee6:	687b      	ldr	r3, [r7, #4]
2000eee8:	689b      	ldr	r3, [r3, #8]
2000eeea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000eeec:	69fb      	ldr	r3, [r7, #28]
2000eeee:	005b      	lsls	r3, r3, #1
2000eef0:	2203      	movs	r2, #3
2000eef2:	fa02 f303 	lsl.w	r3, r2, r3
2000eef6:	43db      	mvns	r3, r3
2000eef8:	69ba      	ldr	r2, [r7, #24]
2000eefa:	4013      	ands	r3, r2
2000eefc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000eefe:	683b      	ldr	r3, [r7, #0]
2000ef00:	68da      	ldr	r2, [r3, #12]
2000ef02:	69fb      	ldr	r3, [r7, #28]
2000ef04:	005b      	lsls	r3, r3, #1
2000ef06:	fa02 f303 	lsl.w	r3, r2, r3
2000ef0a:	69ba      	ldr	r2, [r7, #24]
2000ef0c:	4313      	orrs	r3, r2
2000ef0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000ef10:	687b      	ldr	r3, [r7, #4]
2000ef12:	69ba      	ldr	r2, [r7, #24]
2000ef14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000ef16:	687b      	ldr	r3, [r7, #4]
2000ef18:	685b      	ldr	r3, [r3, #4]
2000ef1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000ef1c:	2201      	movs	r2, #1
2000ef1e:	69fb      	ldr	r3, [r7, #28]
2000ef20:	fa02 f303 	lsl.w	r3, r2, r3
2000ef24:	43db      	mvns	r3, r3
2000ef26:	69ba      	ldr	r2, [r7, #24]
2000ef28:	4013      	ands	r3, r2
2000ef2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000ef2c:	683b      	ldr	r3, [r7, #0]
2000ef2e:	685b      	ldr	r3, [r3, #4]
2000ef30:	091b      	lsrs	r3, r3, #4
2000ef32:	f003 0201 	and.w	r2, r3, #1
2000ef36:	69fb      	ldr	r3, [r7, #28]
2000ef38:	fa02 f303 	lsl.w	r3, r2, r3
2000ef3c:	69ba      	ldr	r2, [r7, #24]
2000ef3e:	4313      	orrs	r3, r2
2000ef40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000ef42:	687b      	ldr	r3, [r7, #4]
2000ef44:	69ba      	ldr	r2, [r7, #24]
2000ef46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000ef48:	687b      	ldr	r3, [r7, #4]
2000ef4a:	68db      	ldr	r3, [r3, #12]
2000ef4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000ef4e:	69fb      	ldr	r3, [r7, #28]
2000ef50:	005b      	lsls	r3, r3, #1
2000ef52:	2203      	movs	r2, #3
2000ef54:	fa02 f303 	lsl.w	r3, r2, r3
2000ef58:	43db      	mvns	r3, r3
2000ef5a:	69ba      	ldr	r2, [r7, #24]
2000ef5c:	4013      	ands	r3, r2
2000ef5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000ef60:	683b      	ldr	r3, [r7, #0]
2000ef62:	689a      	ldr	r2, [r3, #8]
2000ef64:	69fb      	ldr	r3, [r7, #28]
2000ef66:	005b      	lsls	r3, r3, #1
2000ef68:	fa02 f303 	lsl.w	r3, r2, r3
2000ef6c:	69ba      	ldr	r2, [r7, #24]
2000ef6e:	4313      	orrs	r3, r2
2000ef70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000ef72:	687b      	ldr	r3, [r7, #4]
2000ef74:	69ba      	ldr	r2, [r7, #24]
2000ef76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000ef78:	683b      	ldr	r3, [r7, #0]
2000ef7a:	685b      	ldr	r3, [r3, #4]
2000ef7c:	2b02      	cmp	r3, #2
2000ef7e:	d003      	beq.n	2000ef88 <HAL_GPIO_Init+0xfc>
2000ef80:	683b      	ldr	r3, [r7, #0]
2000ef82:	685b      	ldr	r3, [r3, #4]
2000ef84:	2b12      	cmp	r3, #18
2000ef86:	d123      	bne.n	2000efd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000ef88:	69fb      	ldr	r3, [r7, #28]
2000ef8a:	08da      	lsrs	r2, r3, #3
2000ef8c:	687b      	ldr	r3, [r7, #4]
2000ef8e:	3208      	adds	r2, #8
2000ef90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000ef94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000ef96:	69fb      	ldr	r3, [r7, #28]
2000ef98:	f003 0307 	and.w	r3, r3, #7
2000ef9c:	009b      	lsls	r3, r3, #2
2000ef9e:	220f      	movs	r2, #15
2000efa0:	fa02 f303 	lsl.w	r3, r2, r3
2000efa4:	43db      	mvns	r3, r3
2000efa6:	69ba      	ldr	r2, [r7, #24]
2000efa8:	4013      	ands	r3, r2
2000efaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000efac:	683b      	ldr	r3, [r7, #0]
2000efae:	691a      	ldr	r2, [r3, #16]
2000efb0:	69fb      	ldr	r3, [r7, #28]
2000efb2:	f003 0307 	and.w	r3, r3, #7
2000efb6:	009b      	lsls	r3, r3, #2
2000efb8:	fa02 f303 	lsl.w	r3, r2, r3
2000efbc:	69ba      	ldr	r2, [r7, #24]
2000efbe:	4313      	orrs	r3, r2
2000efc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000efc2:	69fb      	ldr	r3, [r7, #28]
2000efc4:	08da      	lsrs	r2, r3, #3
2000efc6:	687b      	ldr	r3, [r7, #4]
2000efc8:	3208      	adds	r2, #8
2000efca:	69b9      	ldr	r1, [r7, #24]
2000efcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000efd0:	687b      	ldr	r3, [r7, #4]
2000efd2:	681b      	ldr	r3, [r3, #0]
2000efd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000efd6:	69fb      	ldr	r3, [r7, #28]
2000efd8:	005b      	lsls	r3, r3, #1
2000efda:	2203      	movs	r2, #3
2000efdc:	fa02 f303 	lsl.w	r3, r2, r3
2000efe0:	43db      	mvns	r3, r3
2000efe2:	69ba      	ldr	r2, [r7, #24]
2000efe4:	4013      	ands	r3, r2
2000efe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000efe8:	683b      	ldr	r3, [r7, #0]
2000efea:	685b      	ldr	r3, [r3, #4]
2000efec:	f003 0203 	and.w	r2, r3, #3
2000eff0:	69fb      	ldr	r3, [r7, #28]
2000eff2:	005b      	lsls	r3, r3, #1
2000eff4:	fa02 f303 	lsl.w	r3, r2, r3
2000eff8:	69ba      	ldr	r2, [r7, #24]
2000effa:	4313      	orrs	r3, r2
2000effc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000effe:	687b      	ldr	r3, [r7, #4]
2000f000:	69ba      	ldr	r2, [r7, #24]
2000f002:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000f004:	683b      	ldr	r3, [r7, #0]
2000f006:	685b      	ldr	r3, [r3, #4]
2000f008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f00c:	2b00      	cmp	r3, #0
2000f00e:	f000 80b4 	beq.w	2000f17a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000f012:	2300      	movs	r3, #0
2000f014:	60fb      	str	r3, [r7, #12]
2000f016:	4b60      	ldr	r3, [pc, #384]	; (2000f198 <HAL_GPIO_Init+0x30c>)
2000f018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000f01a:	4a5f      	ldr	r2, [pc, #380]	; (2000f198 <HAL_GPIO_Init+0x30c>)
2000f01c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000f020:	6453      	str	r3, [r2, #68]	; 0x44
2000f022:	4b5d      	ldr	r3, [pc, #372]	; (2000f198 <HAL_GPIO_Init+0x30c>)
2000f024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000f026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000f02a:	60fb      	str	r3, [r7, #12]
2000f02c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000f02e:	4a5b      	ldr	r2, [pc, #364]	; (2000f19c <HAL_GPIO_Init+0x310>)
2000f030:	69fb      	ldr	r3, [r7, #28]
2000f032:	089b      	lsrs	r3, r3, #2
2000f034:	3302      	adds	r3, #2
2000f036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000f03a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000f03c:	69fb      	ldr	r3, [r7, #28]
2000f03e:	f003 0303 	and.w	r3, r3, #3
2000f042:	009b      	lsls	r3, r3, #2
2000f044:	220f      	movs	r2, #15
2000f046:	fa02 f303 	lsl.w	r3, r2, r3
2000f04a:	43db      	mvns	r3, r3
2000f04c:	69ba      	ldr	r2, [r7, #24]
2000f04e:	4013      	ands	r3, r2
2000f050:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000f052:	687b      	ldr	r3, [r7, #4]
2000f054:	4a52      	ldr	r2, [pc, #328]	; (2000f1a0 <HAL_GPIO_Init+0x314>)
2000f056:	4293      	cmp	r3, r2
2000f058:	d02b      	beq.n	2000f0b2 <HAL_GPIO_Init+0x226>
2000f05a:	687b      	ldr	r3, [r7, #4]
2000f05c:	4a51      	ldr	r2, [pc, #324]	; (2000f1a4 <HAL_GPIO_Init+0x318>)
2000f05e:	4293      	cmp	r3, r2
2000f060:	d025      	beq.n	2000f0ae <HAL_GPIO_Init+0x222>
2000f062:	687b      	ldr	r3, [r7, #4]
2000f064:	4a50      	ldr	r2, [pc, #320]	; (2000f1a8 <HAL_GPIO_Init+0x31c>)
2000f066:	4293      	cmp	r3, r2
2000f068:	d01f      	beq.n	2000f0aa <HAL_GPIO_Init+0x21e>
2000f06a:	687b      	ldr	r3, [r7, #4]
2000f06c:	4a4f      	ldr	r2, [pc, #316]	; (2000f1ac <HAL_GPIO_Init+0x320>)
2000f06e:	4293      	cmp	r3, r2
2000f070:	d019      	beq.n	2000f0a6 <HAL_GPIO_Init+0x21a>
2000f072:	687b      	ldr	r3, [r7, #4]
2000f074:	4a4e      	ldr	r2, [pc, #312]	; (2000f1b0 <HAL_GPIO_Init+0x324>)
2000f076:	4293      	cmp	r3, r2
2000f078:	d013      	beq.n	2000f0a2 <HAL_GPIO_Init+0x216>
2000f07a:	687b      	ldr	r3, [r7, #4]
2000f07c:	4a4d      	ldr	r2, [pc, #308]	; (2000f1b4 <HAL_GPIO_Init+0x328>)
2000f07e:	4293      	cmp	r3, r2
2000f080:	d00d      	beq.n	2000f09e <HAL_GPIO_Init+0x212>
2000f082:	687b      	ldr	r3, [r7, #4]
2000f084:	4a4c      	ldr	r2, [pc, #304]	; (2000f1b8 <HAL_GPIO_Init+0x32c>)
2000f086:	4293      	cmp	r3, r2
2000f088:	d007      	beq.n	2000f09a <HAL_GPIO_Init+0x20e>
2000f08a:	687b      	ldr	r3, [r7, #4]
2000f08c:	4a4b      	ldr	r2, [pc, #300]	; (2000f1bc <HAL_GPIO_Init+0x330>)
2000f08e:	4293      	cmp	r3, r2
2000f090:	d101      	bne.n	2000f096 <HAL_GPIO_Init+0x20a>
2000f092:	2307      	movs	r3, #7
2000f094:	e00e      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f096:	2308      	movs	r3, #8
2000f098:	e00c      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f09a:	2306      	movs	r3, #6
2000f09c:	e00a      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f09e:	2305      	movs	r3, #5
2000f0a0:	e008      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f0a2:	2304      	movs	r3, #4
2000f0a4:	e006      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f0a6:	2303      	movs	r3, #3
2000f0a8:	e004      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f0aa:	2302      	movs	r3, #2
2000f0ac:	e002      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f0ae:	2301      	movs	r3, #1
2000f0b0:	e000      	b.n	2000f0b4 <HAL_GPIO_Init+0x228>
2000f0b2:	2300      	movs	r3, #0
2000f0b4:	69fa      	ldr	r2, [r7, #28]
2000f0b6:	f002 0203 	and.w	r2, r2, #3
2000f0ba:	0092      	lsls	r2, r2, #2
2000f0bc:	4093      	lsls	r3, r2
2000f0be:	69ba      	ldr	r2, [r7, #24]
2000f0c0:	4313      	orrs	r3, r2
2000f0c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000f0c4:	4935      	ldr	r1, [pc, #212]	; (2000f19c <HAL_GPIO_Init+0x310>)
2000f0c6:	69fb      	ldr	r3, [r7, #28]
2000f0c8:	089b      	lsrs	r3, r3, #2
2000f0ca:	3302      	adds	r3, #2
2000f0cc:	69ba      	ldr	r2, [r7, #24]
2000f0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000f0d2:	4b3b      	ldr	r3, [pc, #236]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f0d4:	681b      	ldr	r3, [r3, #0]
2000f0d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000f0d8:	693b      	ldr	r3, [r7, #16]
2000f0da:	43db      	mvns	r3, r3
2000f0dc:	69ba      	ldr	r2, [r7, #24]
2000f0de:	4013      	ands	r3, r2
2000f0e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000f0e2:	683b      	ldr	r3, [r7, #0]
2000f0e4:	685b      	ldr	r3, [r3, #4]
2000f0e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000f0ea:	2b00      	cmp	r3, #0
2000f0ec:	d003      	beq.n	2000f0f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000f0ee:	69ba      	ldr	r2, [r7, #24]
2000f0f0:	693b      	ldr	r3, [r7, #16]
2000f0f2:	4313      	orrs	r3, r2
2000f0f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000f0f6:	4a32      	ldr	r2, [pc, #200]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f0f8:	69bb      	ldr	r3, [r7, #24]
2000f0fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000f0fc:	4b30      	ldr	r3, [pc, #192]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f0fe:	685b      	ldr	r3, [r3, #4]
2000f100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000f102:	693b      	ldr	r3, [r7, #16]
2000f104:	43db      	mvns	r3, r3
2000f106:	69ba      	ldr	r2, [r7, #24]
2000f108:	4013      	ands	r3, r2
2000f10a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000f10c:	683b      	ldr	r3, [r7, #0]
2000f10e:	685b      	ldr	r3, [r3, #4]
2000f110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f114:	2b00      	cmp	r3, #0
2000f116:	d003      	beq.n	2000f120 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000f118:	69ba      	ldr	r2, [r7, #24]
2000f11a:	693b      	ldr	r3, [r7, #16]
2000f11c:	4313      	orrs	r3, r2
2000f11e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000f120:	4a27      	ldr	r2, [pc, #156]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f122:	69bb      	ldr	r3, [r7, #24]
2000f124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000f126:	4b26      	ldr	r3, [pc, #152]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f128:	689b      	ldr	r3, [r3, #8]
2000f12a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000f12c:	693b      	ldr	r3, [r7, #16]
2000f12e:	43db      	mvns	r3, r3
2000f130:	69ba      	ldr	r2, [r7, #24]
2000f132:	4013      	ands	r3, r2
2000f134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000f136:	683b      	ldr	r3, [r7, #0]
2000f138:	685b      	ldr	r3, [r3, #4]
2000f13a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000f13e:	2b00      	cmp	r3, #0
2000f140:	d003      	beq.n	2000f14a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000f142:	69ba      	ldr	r2, [r7, #24]
2000f144:	693b      	ldr	r3, [r7, #16]
2000f146:	4313      	orrs	r3, r2
2000f148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000f14a:	4a1d      	ldr	r2, [pc, #116]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f14c:	69bb      	ldr	r3, [r7, #24]
2000f14e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000f150:	4b1b      	ldr	r3, [pc, #108]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f152:	68db      	ldr	r3, [r3, #12]
2000f154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000f156:	693b      	ldr	r3, [r7, #16]
2000f158:	43db      	mvns	r3, r3
2000f15a:	69ba      	ldr	r2, [r7, #24]
2000f15c:	4013      	ands	r3, r2
2000f15e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000f160:	683b      	ldr	r3, [r7, #0]
2000f162:	685b      	ldr	r3, [r3, #4]
2000f164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000f168:	2b00      	cmp	r3, #0
2000f16a:	d003      	beq.n	2000f174 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000f16c:	69ba      	ldr	r2, [r7, #24]
2000f16e:	693b      	ldr	r3, [r7, #16]
2000f170:	4313      	orrs	r3, r2
2000f172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000f174:	4a12      	ldr	r2, [pc, #72]	; (2000f1c0 <HAL_GPIO_Init+0x334>)
2000f176:	69bb      	ldr	r3, [r7, #24]
2000f178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000f17a:	69fb      	ldr	r3, [r7, #28]
2000f17c:	3301      	adds	r3, #1
2000f17e:	61fb      	str	r3, [r7, #28]
2000f180:	69fb      	ldr	r3, [r7, #28]
2000f182:	2b0f      	cmp	r3, #15
2000f184:	f67f ae90 	bls.w	2000eea8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000f188:	bf00      	nop
2000f18a:	bf00      	nop
2000f18c:	3724      	adds	r7, #36	; 0x24
2000f18e:	46bd      	mov	sp, r7
2000f190:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f194:	4770      	bx	lr
2000f196:	bf00      	nop
2000f198:	40023800 	.word	0x40023800
2000f19c:	40013800 	.word	0x40013800
2000f1a0:	40020000 	.word	0x40020000
2000f1a4:	40020400 	.word	0x40020400
2000f1a8:	40020800 	.word	0x40020800
2000f1ac:	40020c00 	.word	0x40020c00
2000f1b0:	40021000 	.word	0x40021000
2000f1b4:	40021400 	.word	0x40021400
2000f1b8:	40021800 	.word	0x40021800
2000f1bc:	40021c00 	.word	0x40021c00
2000f1c0:	40013c00 	.word	0x40013c00

2000f1c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000f1c4:	b480      	push	{r7}
2000f1c6:	b085      	sub	sp, #20
2000f1c8:	af00      	add	r7, sp, #0
2000f1ca:	6078      	str	r0, [r7, #4]
2000f1cc:	460b      	mov	r3, r1
2000f1ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000f1d0:	687b      	ldr	r3, [r7, #4]
2000f1d2:	691a      	ldr	r2, [r3, #16]
2000f1d4:	887b      	ldrh	r3, [r7, #2]
2000f1d6:	4013      	ands	r3, r2
2000f1d8:	2b00      	cmp	r3, #0
2000f1da:	d002      	beq.n	2000f1e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2000f1dc:	2301      	movs	r3, #1
2000f1de:	73fb      	strb	r3, [r7, #15]
2000f1e0:	e001      	b.n	2000f1e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000f1e2:	2300      	movs	r3, #0
2000f1e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000f1e6:	7bfb      	ldrb	r3, [r7, #15]
}
2000f1e8:	4618      	mov	r0, r3
2000f1ea:	3714      	adds	r7, #20
2000f1ec:	46bd      	mov	sp, r7
2000f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f1f2:	4770      	bx	lr

2000f1f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000f1f4:	b480      	push	{r7}
2000f1f6:	b083      	sub	sp, #12
2000f1f8:	af00      	add	r7, sp, #0
2000f1fa:	6078      	str	r0, [r7, #4]
2000f1fc:	460b      	mov	r3, r1
2000f1fe:	807b      	strh	r3, [r7, #2]
2000f200:	4613      	mov	r3, r2
2000f202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000f204:	787b      	ldrb	r3, [r7, #1]
2000f206:	2b00      	cmp	r3, #0
2000f208:	d003      	beq.n	2000f212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000f20a:	887a      	ldrh	r2, [r7, #2]
2000f20c:	687b      	ldr	r3, [r7, #4]
2000f20e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000f210:	e003      	b.n	2000f21a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000f212:	887b      	ldrh	r3, [r7, #2]
2000f214:	041a      	lsls	r2, r3, #16
2000f216:	687b      	ldr	r3, [r7, #4]
2000f218:	619a      	str	r2, [r3, #24]
}
2000f21a:	bf00      	nop
2000f21c:	370c      	adds	r7, #12
2000f21e:	46bd      	mov	sp, r7
2000f220:	f85d 7b04 	ldr.w	r7, [sp], #4
2000f224:	4770      	bx	lr

2000f226 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000f226:	b580      	push	{r7, lr}
2000f228:	b084      	sub	sp, #16
2000f22a:	af00      	add	r7, sp, #0
2000f22c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000f22e:	687b      	ldr	r3, [r7, #4]
2000f230:	2b00      	cmp	r3, #0
2000f232:	d101      	bne.n	2000f238 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000f234:	2301      	movs	r3, #1
2000f236:	e02b      	b.n	2000f290 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000f238:	687b      	ldr	r3, [r7, #4]
2000f23a:	681b      	ldr	r3, [r3, #0]
2000f23c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000f240:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000f242:	687b      	ldr	r3, [r7, #4]
2000f244:	681b      	ldr	r3, [r3, #0]
2000f246:	f245 5255 	movw	r2, #21845	; 0x5555
2000f24a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000f24c:	687b      	ldr	r3, [r7, #4]
2000f24e:	681b      	ldr	r3, [r3, #0]
2000f250:	687a      	ldr	r2, [r7, #4]
2000f252:	6852      	ldr	r2, [r2, #4]
2000f254:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000f256:	687b      	ldr	r3, [r7, #4]
2000f258:	681b      	ldr	r3, [r3, #0]
2000f25a:	687a      	ldr	r2, [r7, #4]
2000f25c:	6892      	ldr	r2, [r2, #8]
2000f25e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000f260:	f7ff fcfe 	bl	2000ec60 <HAL_GetTick>
2000f264:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000f266:	e008      	b.n	2000f27a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000f268:	f7ff fcfa 	bl	2000ec60 <HAL_GetTick>
2000f26c:	4602      	mov	r2, r0
2000f26e:	68fb      	ldr	r3, [r7, #12]
2000f270:	1ad3      	subs	r3, r2, r3
2000f272:	2b30      	cmp	r3, #48	; 0x30
2000f274:	d901      	bls.n	2000f27a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000f276:	2303      	movs	r3, #3
2000f278:	e00a      	b.n	2000f290 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000f27a:	687b      	ldr	r3, [r7, #4]
2000f27c:	681b      	ldr	r3, [r3, #0]
2000f27e:	68db      	ldr	r3, [r3, #12]
2000f280:	2b00      	cmp	r3, #0
2000f282:	d1f1      	bne.n	2000f268 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000f284:	687b      	ldr	r3, [r7, #4]
2000f286:	681b      	ldr	r3, [r3, #0]
2000f288:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000f28c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000f28e:	2300      	movs	r3, #0
}
2000f290:	4618      	mov	r0, r3
2000f292:	3710      	adds	r7, #16
2000f294:	46bd      	mov	sp, r7
2000f296:	bd80      	pop	{r7, pc}

2000f298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000f298:	b580      	push	{r7, lr}
2000f29a:	b086      	sub	sp, #24
2000f29c:	af00      	add	r7, sp, #0
2000f29e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000f2a0:	687b      	ldr	r3, [r7, #4]
2000f2a2:	2b00      	cmp	r3, #0
2000f2a4:	d101      	bne.n	2000f2aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000f2a6:	2301      	movs	r3, #1
2000f2a8:	e25b      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000f2aa:	687b      	ldr	r3, [r7, #4]
2000f2ac:	681b      	ldr	r3, [r3, #0]
2000f2ae:	f003 0301 	and.w	r3, r3, #1
2000f2b2:	2b00      	cmp	r3, #0
2000f2b4:	d075      	beq.n	2000f3a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000f2b6:	4ba3      	ldr	r3, [pc, #652]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f2b8:	689b      	ldr	r3, [r3, #8]
2000f2ba:	f003 030c 	and.w	r3, r3, #12
2000f2be:	2b04      	cmp	r3, #4
2000f2c0:	d00c      	beq.n	2000f2dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000f2c2:	4ba0      	ldr	r3, [pc, #640]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f2c4:	689b      	ldr	r3, [r3, #8]
2000f2c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000f2ca:	2b08      	cmp	r3, #8
2000f2cc:	d112      	bne.n	2000f2f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000f2ce:	4b9d      	ldr	r3, [pc, #628]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f2d0:	685b      	ldr	r3, [r3, #4]
2000f2d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000f2d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000f2da:	d10b      	bne.n	2000f2f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000f2dc:	4b99      	ldr	r3, [pc, #612]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f2de:	681b      	ldr	r3, [r3, #0]
2000f2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f2e4:	2b00      	cmp	r3, #0
2000f2e6:	d05b      	beq.n	2000f3a0 <HAL_RCC_OscConfig+0x108>
2000f2e8:	687b      	ldr	r3, [r7, #4]
2000f2ea:	685b      	ldr	r3, [r3, #4]
2000f2ec:	2b00      	cmp	r3, #0
2000f2ee:	d157      	bne.n	2000f3a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000f2f0:	2301      	movs	r3, #1
2000f2f2:	e236      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000f2f4:	687b      	ldr	r3, [r7, #4]
2000f2f6:	685b      	ldr	r3, [r3, #4]
2000f2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000f2fc:	d106      	bne.n	2000f30c <HAL_RCC_OscConfig+0x74>
2000f2fe:	4b91      	ldr	r3, [pc, #580]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f300:	681b      	ldr	r3, [r3, #0]
2000f302:	4a90      	ldr	r2, [pc, #576]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000f308:	6013      	str	r3, [r2, #0]
2000f30a:	e01d      	b.n	2000f348 <HAL_RCC_OscConfig+0xb0>
2000f30c:	687b      	ldr	r3, [r7, #4]
2000f30e:	685b      	ldr	r3, [r3, #4]
2000f310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000f314:	d10c      	bne.n	2000f330 <HAL_RCC_OscConfig+0x98>
2000f316:	4b8b      	ldr	r3, [pc, #556]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f318:	681b      	ldr	r3, [r3, #0]
2000f31a:	4a8a      	ldr	r2, [pc, #552]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f31c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000f320:	6013      	str	r3, [r2, #0]
2000f322:	4b88      	ldr	r3, [pc, #544]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f324:	681b      	ldr	r3, [r3, #0]
2000f326:	4a87      	ldr	r2, [pc, #540]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000f32c:	6013      	str	r3, [r2, #0]
2000f32e:	e00b      	b.n	2000f348 <HAL_RCC_OscConfig+0xb0>
2000f330:	4b84      	ldr	r3, [pc, #528]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f332:	681b      	ldr	r3, [r3, #0]
2000f334:	4a83      	ldr	r2, [pc, #524]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000f33a:	6013      	str	r3, [r2, #0]
2000f33c:	4b81      	ldr	r3, [pc, #516]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f33e:	681b      	ldr	r3, [r3, #0]
2000f340:	4a80      	ldr	r2, [pc, #512]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000f346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000f348:	687b      	ldr	r3, [r7, #4]
2000f34a:	685b      	ldr	r3, [r3, #4]
2000f34c:	2b00      	cmp	r3, #0
2000f34e:	d013      	beq.n	2000f378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f350:	f7ff fc86 	bl	2000ec60 <HAL_GetTick>
2000f354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000f356:	e008      	b.n	2000f36a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000f358:	f7ff fc82 	bl	2000ec60 <HAL_GetTick>
2000f35c:	4602      	mov	r2, r0
2000f35e:	693b      	ldr	r3, [r7, #16]
2000f360:	1ad3      	subs	r3, r2, r3
2000f362:	2b64      	cmp	r3, #100	; 0x64
2000f364:	d901      	bls.n	2000f36a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000f366:	2303      	movs	r3, #3
2000f368:	e1fb      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000f36a:	4b76      	ldr	r3, [pc, #472]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f36c:	681b      	ldr	r3, [r3, #0]
2000f36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f372:	2b00      	cmp	r3, #0
2000f374:	d0f0      	beq.n	2000f358 <HAL_RCC_OscConfig+0xc0>
2000f376:	e014      	b.n	2000f3a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f378:	f7ff fc72 	bl	2000ec60 <HAL_GetTick>
2000f37c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000f37e:	e008      	b.n	2000f392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000f380:	f7ff fc6e 	bl	2000ec60 <HAL_GetTick>
2000f384:	4602      	mov	r2, r0
2000f386:	693b      	ldr	r3, [r7, #16]
2000f388:	1ad3      	subs	r3, r2, r3
2000f38a:	2b64      	cmp	r3, #100	; 0x64
2000f38c:	d901      	bls.n	2000f392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000f38e:	2303      	movs	r3, #3
2000f390:	e1e7      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000f392:	4b6c      	ldr	r3, [pc, #432]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f394:	681b      	ldr	r3, [r3, #0]
2000f396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f39a:	2b00      	cmp	r3, #0
2000f39c:	d1f0      	bne.n	2000f380 <HAL_RCC_OscConfig+0xe8>
2000f39e:	e000      	b.n	2000f3a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000f3a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000f3a2:	687b      	ldr	r3, [r7, #4]
2000f3a4:	681b      	ldr	r3, [r3, #0]
2000f3a6:	f003 0302 	and.w	r3, r3, #2
2000f3aa:	2b00      	cmp	r3, #0
2000f3ac:	d063      	beq.n	2000f476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000f3ae:	4b65      	ldr	r3, [pc, #404]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3b0:	689b      	ldr	r3, [r3, #8]
2000f3b2:	f003 030c 	and.w	r3, r3, #12
2000f3b6:	2b00      	cmp	r3, #0
2000f3b8:	d00b      	beq.n	2000f3d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000f3ba:	4b62      	ldr	r3, [pc, #392]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3bc:	689b      	ldr	r3, [r3, #8]
2000f3be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000f3c2:	2b08      	cmp	r3, #8
2000f3c4:	d11c      	bne.n	2000f400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000f3c6:	4b5f      	ldr	r3, [pc, #380]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3c8:	685b      	ldr	r3, [r3, #4]
2000f3ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000f3ce:	2b00      	cmp	r3, #0
2000f3d0:	d116      	bne.n	2000f400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000f3d2:	4b5c      	ldr	r3, [pc, #368]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3d4:	681b      	ldr	r3, [r3, #0]
2000f3d6:	f003 0302 	and.w	r3, r3, #2
2000f3da:	2b00      	cmp	r3, #0
2000f3dc:	d005      	beq.n	2000f3ea <HAL_RCC_OscConfig+0x152>
2000f3de:	687b      	ldr	r3, [r7, #4]
2000f3e0:	68db      	ldr	r3, [r3, #12]
2000f3e2:	2b01      	cmp	r3, #1
2000f3e4:	d001      	beq.n	2000f3ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000f3e6:	2301      	movs	r3, #1
2000f3e8:	e1bb      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000f3ea:	4b56      	ldr	r3, [pc, #344]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3ec:	681b      	ldr	r3, [r3, #0]
2000f3ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000f3f2:	687b      	ldr	r3, [r7, #4]
2000f3f4:	691b      	ldr	r3, [r3, #16]
2000f3f6:	00db      	lsls	r3, r3, #3
2000f3f8:	4952      	ldr	r1, [pc, #328]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f3fa:	4313      	orrs	r3, r2
2000f3fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000f3fe:	e03a      	b.n	2000f476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000f400:	687b      	ldr	r3, [r7, #4]
2000f402:	68db      	ldr	r3, [r3, #12]
2000f404:	2b00      	cmp	r3, #0
2000f406:	d020      	beq.n	2000f44a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000f408:	4b4f      	ldr	r3, [pc, #316]	; (2000f548 <HAL_RCC_OscConfig+0x2b0>)
2000f40a:	2201      	movs	r2, #1
2000f40c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000f40e:	f7ff fc27 	bl	2000ec60 <HAL_GetTick>
2000f412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000f414:	e008      	b.n	2000f428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000f416:	f7ff fc23 	bl	2000ec60 <HAL_GetTick>
2000f41a:	4602      	mov	r2, r0
2000f41c:	693b      	ldr	r3, [r7, #16]
2000f41e:	1ad3      	subs	r3, r2, r3
2000f420:	2b02      	cmp	r3, #2
2000f422:	d901      	bls.n	2000f428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000f424:	2303      	movs	r3, #3
2000f426:	e19c      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000f428:	4b46      	ldr	r3, [pc, #280]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f42a:	681b      	ldr	r3, [r3, #0]
2000f42c:	f003 0302 	and.w	r3, r3, #2
2000f430:	2b00      	cmp	r3, #0
2000f432:	d0f0      	beq.n	2000f416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000f434:	4b43      	ldr	r3, [pc, #268]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f436:	681b      	ldr	r3, [r3, #0]
2000f438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000f43c:	687b      	ldr	r3, [r7, #4]
2000f43e:	691b      	ldr	r3, [r3, #16]
2000f440:	00db      	lsls	r3, r3, #3
2000f442:	4940      	ldr	r1, [pc, #256]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f444:	4313      	orrs	r3, r2
2000f446:	600b      	str	r3, [r1, #0]
2000f448:	e015      	b.n	2000f476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000f44a:	4b3f      	ldr	r3, [pc, #252]	; (2000f548 <HAL_RCC_OscConfig+0x2b0>)
2000f44c:	2200      	movs	r2, #0
2000f44e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000f450:	f7ff fc06 	bl	2000ec60 <HAL_GetTick>
2000f454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000f456:	e008      	b.n	2000f46a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000f458:	f7ff fc02 	bl	2000ec60 <HAL_GetTick>
2000f45c:	4602      	mov	r2, r0
2000f45e:	693b      	ldr	r3, [r7, #16]
2000f460:	1ad3      	subs	r3, r2, r3
2000f462:	2b02      	cmp	r3, #2
2000f464:	d901      	bls.n	2000f46a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000f466:	2303      	movs	r3, #3
2000f468:	e17b      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000f46a:	4b36      	ldr	r3, [pc, #216]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f46c:	681b      	ldr	r3, [r3, #0]
2000f46e:	f003 0302 	and.w	r3, r3, #2
2000f472:	2b00      	cmp	r3, #0
2000f474:	d1f0      	bne.n	2000f458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000f476:	687b      	ldr	r3, [r7, #4]
2000f478:	681b      	ldr	r3, [r3, #0]
2000f47a:	f003 0308 	and.w	r3, r3, #8
2000f47e:	2b00      	cmp	r3, #0
2000f480:	d030      	beq.n	2000f4e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000f482:	687b      	ldr	r3, [r7, #4]
2000f484:	695b      	ldr	r3, [r3, #20]
2000f486:	2b00      	cmp	r3, #0
2000f488:	d016      	beq.n	2000f4b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000f48a:	4b30      	ldr	r3, [pc, #192]	; (2000f54c <HAL_RCC_OscConfig+0x2b4>)
2000f48c:	2201      	movs	r2, #1
2000f48e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f490:	f7ff fbe6 	bl	2000ec60 <HAL_GetTick>
2000f494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f496:	e008      	b.n	2000f4aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f498:	f7ff fbe2 	bl	2000ec60 <HAL_GetTick>
2000f49c:	4602      	mov	r2, r0
2000f49e:	693b      	ldr	r3, [r7, #16]
2000f4a0:	1ad3      	subs	r3, r2, r3
2000f4a2:	2b02      	cmp	r3, #2
2000f4a4:	d901      	bls.n	2000f4aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000f4a6:	2303      	movs	r3, #3
2000f4a8:	e15b      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000f4aa:	4b26      	ldr	r3, [pc, #152]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f4ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f4ae:	f003 0302 	and.w	r3, r3, #2
2000f4b2:	2b00      	cmp	r3, #0
2000f4b4:	d0f0      	beq.n	2000f498 <HAL_RCC_OscConfig+0x200>
2000f4b6:	e015      	b.n	2000f4e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000f4b8:	4b24      	ldr	r3, [pc, #144]	; (2000f54c <HAL_RCC_OscConfig+0x2b4>)
2000f4ba:	2200      	movs	r2, #0
2000f4bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f4be:	f7ff fbcf 	bl	2000ec60 <HAL_GetTick>
2000f4c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f4c4:	e008      	b.n	2000f4d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000f4c6:	f7ff fbcb 	bl	2000ec60 <HAL_GetTick>
2000f4ca:	4602      	mov	r2, r0
2000f4cc:	693b      	ldr	r3, [r7, #16]
2000f4ce:	1ad3      	subs	r3, r2, r3
2000f4d0:	2b02      	cmp	r3, #2
2000f4d2:	d901      	bls.n	2000f4d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000f4d4:	2303      	movs	r3, #3
2000f4d6:	e144      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000f4d8:	4b1a      	ldr	r3, [pc, #104]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000f4dc:	f003 0302 	and.w	r3, r3, #2
2000f4e0:	2b00      	cmp	r3, #0
2000f4e2:	d1f0      	bne.n	2000f4c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000f4e4:	687b      	ldr	r3, [r7, #4]
2000f4e6:	681b      	ldr	r3, [r3, #0]
2000f4e8:	f003 0304 	and.w	r3, r3, #4
2000f4ec:	2b00      	cmp	r3, #0
2000f4ee:	f000 80a0 	beq.w	2000f632 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000f4f2:	2300      	movs	r3, #0
2000f4f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000f4f6:	4b13      	ldr	r3, [pc, #76]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f4fe:	2b00      	cmp	r3, #0
2000f500:	d10f      	bne.n	2000f522 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000f502:	2300      	movs	r3, #0
2000f504:	60bb      	str	r3, [r7, #8]
2000f506:	4b0f      	ldr	r3, [pc, #60]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f50a:	4a0e      	ldr	r2, [pc, #56]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000f510:	6413      	str	r3, [r2, #64]	; 0x40
2000f512:	4b0c      	ldr	r3, [pc, #48]	; (2000f544 <HAL_RCC_OscConfig+0x2ac>)
2000f514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000f51a:	60bb      	str	r3, [r7, #8]
2000f51c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000f51e:	2301      	movs	r3, #1
2000f520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f522:	4b0b      	ldr	r3, [pc, #44]	; (2000f550 <HAL_RCC_OscConfig+0x2b8>)
2000f524:	681b      	ldr	r3, [r3, #0]
2000f526:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f52a:	2b00      	cmp	r3, #0
2000f52c:	d121      	bne.n	2000f572 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000f52e:	4b08      	ldr	r3, [pc, #32]	; (2000f550 <HAL_RCC_OscConfig+0x2b8>)
2000f530:	681b      	ldr	r3, [r3, #0]
2000f532:	4a07      	ldr	r2, [pc, #28]	; (2000f550 <HAL_RCC_OscConfig+0x2b8>)
2000f534:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000f538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000f53a:	f7ff fb91 	bl	2000ec60 <HAL_GetTick>
2000f53e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f540:	e011      	b.n	2000f566 <HAL_RCC_OscConfig+0x2ce>
2000f542:	bf00      	nop
2000f544:	40023800 	.word	0x40023800
2000f548:	42470000 	.word	0x42470000
2000f54c:	42470e80 	.word	0x42470e80
2000f550:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000f554:	f7ff fb84 	bl	2000ec60 <HAL_GetTick>
2000f558:	4602      	mov	r2, r0
2000f55a:	693b      	ldr	r3, [r7, #16]
2000f55c:	1ad3      	subs	r3, r2, r3
2000f55e:	2b02      	cmp	r3, #2
2000f560:	d901      	bls.n	2000f566 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000f562:	2303      	movs	r3, #3
2000f564:	e0fd      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000f566:	4b81      	ldr	r3, [pc, #516]	; (2000f76c <HAL_RCC_OscConfig+0x4d4>)
2000f568:	681b      	ldr	r3, [r3, #0]
2000f56a:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000f56e:	2b00      	cmp	r3, #0
2000f570:	d0f0      	beq.n	2000f554 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000f572:	687b      	ldr	r3, [r7, #4]
2000f574:	689b      	ldr	r3, [r3, #8]
2000f576:	2b01      	cmp	r3, #1
2000f578:	d106      	bne.n	2000f588 <HAL_RCC_OscConfig+0x2f0>
2000f57a:	4b7d      	ldr	r3, [pc, #500]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f57e:	4a7c      	ldr	r2, [pc, #496]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f580:	f043 0301 	orr.w	r3, r3, #1
2000f584:	6713      	str	r3, [r2, #112]	; 0x70
2000f586:	e01c      	b.n	2000f5c2 <HAL_RCC_OscConfig+0x32a>
2000f588:	687b      	ldr	r3, [r7, #4]
2000f58a:	689b      	ldr	r3, [r3, #8]
2000f58c:	2b05      	cmp	r3, #5
2000f58e:	d10c      	bne.n	2000f5aa <HAL_RCC_OscConfig+0x312>
2000f590:	4b77      	ldr	r3, [pc, #476]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f594:	4a76      	ldr	r2, [pc, #472]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f596:	f043 0304 	orr.w	r3, r3, #4
2000f59a:	6713      	str	r3, [r2, #112]	; 0x70
2000f59c:	4b74      	ldr	r3, [pc, #464]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f5a0:	4a73      	ldr	r2, [pc, #460]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5a2:	f043 0301 	orr.w	r3, r3, #1
2000f5a6:	6713      	str	r3, [r2, #112]	; 0x70
2000f5a8:	e00b      	b.n	2000f5c2 <HAL_RCC_OscConfig+0x32a>
2000f5aa:	4b71      	ldr	r3, [pc, #452]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f5ae:	4a70      	ldr	r2, [pc, #448]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5b0:	f023 0301 	bic.w	r3, r3, #1
2000f5b4:	6713      	str	r3, [r2, #112]	; 0x70
2000f5b6:	4b6e      	ldr	r3, [pc, #440]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f5ba:	4a6d      	ldr	r2, [pc, #436]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5bc:	f023 0304 	bic.w	r3, r3, #4
2000f5c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000f5c2:	687b      	ldr	r3, [r7, #4]
2000f5c4:	689b      	ldr	r3, [r3, #8]
2000f5c6:	2b00      	cmp	r3, #0
2000f5c8:	d015      	beq.n	2000f5f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000f5ca:	f7ff fb49 	bl	2000ec60 <HAL_GetTick>
2000f5ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f5d0:	e00a      	b.n	2000f5e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f5d2:	f7ff fb45 	bl	2000ec60 <HAL_GetTick>
2000f5d6:	4602      	mov	r2, r0
2000f5d8:	693b      	ldr	r3, [r7, #16]
2000f5da:	1ad3      	subs	r3, r2, r3
2000f5dc:	f241 3288 	movw	r2, #5000	; 0x1388
2000f5e0:	4293      	cmp	r3, r2
2000f5e2:	d901      	bls.n	2000f5e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000f5e4:	2303      	movs	r3, #3
2000f5e6:	e0bc      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000f5e8:	4b61      	ldr	r3, [pc, #388]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f5ec:	f003 0302 	and.w	r3, r3, #2
2000f5f0:	2b00      	cmp	r3, #0
2000f5f2:	d0ee      	beq.n	2000f5d2 <HAL_RCC_OscConfig+0x33a>
2000f5f4:	e014      	b.n	2000f620 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000f5f6:	f7ff fb33 	bl	2000ec60 <HAL_GetTick>
2000f5fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f5fc:	e00a      	b.n	2000f614 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000f5fe:	f7ff fb2f 	bl	2000ec60 <HAL_GetTick>
2000f602:	4602      	mov	r2, r0
2000f604:	693b      	ldr	r3, [r7, #16]
2000f606:	1ad3      	subs	r3, r2, r3
2000f608:	f241 3288 	movw	r2, #5000	; 0x1388
2000f60c:	4293      	cmp	r3, r2
2000f60e:	d901      	bls.n	2000f614 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000f610:	2303      	movs	r3, #3
2000f612:	e0a6      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000f614:	4b56      	ldr	r3, [pc, #344]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000f618:	f003 0302 	and.w	r3, r3, #2
2000f61c:	2b00      	cmp	r3, #0
2000f61e:	d1ee      	bne.n	2000f5fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000f620:	7dfb      	ldrb	r3, [r7, #23]
2000f622:	2b01      	cmp	r3, #1
2000f624:	d105      	bne.n	2000f632 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000f626:	4b52      	ldr	r3, [pc, #328]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000f62a:	4a51      	ldr	r2, [pc, #324]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f62c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000f630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000f632:	687b      	ldr	r3, [r7, #4]
2000f634:	699b      	ldr	r3, [r3, #24]
2000f636:	2b00      	cmp	r3, #0
2000f638:	f000 8092 	beq.w	2000f760 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000f63c:	4b4c      	ldr	r3, [pc, #304]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f63e:	689b      	ldr	r3, [r3, #8]
2000f640:	f003 030c 	and.w	r3, r3, #12
2000f644:	2b08      	cmp	r3, #8
2000f646:	d05c      	beq.n	2000f702 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000f648:	687b      	ldr	r3, [r7, #4]
2000f64a:	699b      	ldr	r3, [r3, #24]
2000f64c:	2b02      	cmp	r3, #2
2000f64e:	d141      	bne.n	2000f6d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f650:	4b48      	ldr	r3, [pc, #288]	; (2000f774 <HAL_RCC_OscConfig+0x4dc>)
2000f652:	2200      	movs	r2, #0
2000f654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f656:	f7ff fb03 	bl	2000ec60 <HAL_GetTick>
2000f65a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f65c:	e008      	b.n	2000f670 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f65e:	f7ff faff 	bl	2000ec60 <HAL_GetTick>
2000f662:	4602      	mov	r2, r0
2000f664:	693b      	ldr	r3, [r7, #16]
2000f666:	1ad3      	subs	r3, r2, r3
2000f668:	2b02      	cmp	r3, #2
2000f66a:	d901      	bls.n	2000f670 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000f66c:	2303      	movs	r3, #3
2000f66e:	e078      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f670:	4b3f      	ldr	r3, [pc, #252]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f672:	681b      	ldr	r3, [r3, #0]
2000f674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f678:	2b00      	cmp	r3, #0
2000f67a:	d1f0      	bne.n	2000f65e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000f67c:	687b      	ldr	r3, [r7, #4]
2000f67e:	69da      	ldr	r2, [r3, #28]
2000f680:	687b      	ldr	r3, [r7, #4]
2000f682:	6a1b      	ldr	r3, [r3, #32]
2000f684:	431a      	orrs	r2, r3
2000f686:	687b      	ldr	r3, [r7, #4]
2000f688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000f68a:	019b      	lsls	r3, r3, #6
2000f68c:	431a      	orrs	r2, r3
2000f68e:	687b      	ldr	r3, [r7, #4]
2000f690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000f692:	085b      	lsrs	r3, r3, #1
2000f694:	3b01      	subs	r3, #1
2000f696:	041b      	lsls	r3, r3, #16
2000f698:	431a      	orrs	r2, r3
2000f69a:	687b      	ldr	r3, [r7, #4]
2000f69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000f69e:	061b      	lsls	r3, r3, #24
2000f6a0:	4933      	ldr	r1, [pc, #204]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f6a2:	4313      	orrs	r3, r2
2000f6a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000f6a6:	4b33      	ldr	r3, [pc, #204]	; (2000f774 <HAL_RCC_OscConfig+0x4dc>)
2000f6a8:	2201      	movs	r2, #1
2000f6aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f6ac:	f7ff fad8 	bl	2000ec60 <HAL_GetTick>
2000f6b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f6b2:	e008      	b.n	2000f6c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f6b4:	f7ff fad4 	bl	2000ec60 <HAL_GetTick>
2000f6b8:	4602      	mov	r2, r0
2000f6ba:	693b      	ldr	r3, [r7, #16]
2000f6bc:	1ad3      	subs	r3, r2, r3
2000f6be:	2b02      	cmp	r3, #2
2000f6c0:	d901      	bls.n	2000f6c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000f6c2:	2303      	movs	r3, #3
2000f6c4:	e04d      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f6c6:	4b2a      	ldr	r3, [pc, #168]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f6c8:	681b      	ldr	r3, [r3, #0]
2000f6ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f6ce:	2b00      	cmp	r3, #0
2000f6d0:	d0f0      	beq.n	2000f6b4 <HAL_RCC_OscConfig+0x41c>
2000f6d2:	e045      	b.n	2000f760 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000f6d4:	4b27      	ldr	r3, [pc, #156]	; (2000f774 <HAL_RCC_OscConfig+0x4dc>)
2000f6d6:	2200      	movs	r2, #0
2000f6d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000f6da:	f7ff fac1 	bl	2000ec60 <HAL_GetTick>
2000f6de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f6e0:	e008      	b.n	2000f6f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000f6e2:	f7ff fabd 	bl	2000ec60 <HAL_GetTick>
2000f6e6:	4602      	mov	r2, r0
2000f6e8:	693b      	ldr	r3, [r7, #16]
2000f6ea:	1ad3      	subs	r3, r2, r3
2000f6ec:	2b02      	cmp	r3, #2
2000f6ee:	d901      	bls.n	2000f6f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000f6f0:	2303      	movs	r3, #3
2000f6f2:	e036      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000f6f4:	4b1e      	ldr	r3, [pc, #120]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f6f6:	681b      	ldr	r3, [r3, #0]
2000f6f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f6fc:	2b00      	cmp	r3, #0
2000f6fe:	d1f0      	bne.n	2000f6e2 <HAL_RCC_OscConfig+0x44a>
2000f700:	e02e      	b.n	2000f760 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000f702:	687b      	ldr	r3, [r7, #4]
2000f704:	699b      	ldr	r3, [r3, #24]
2000f706:	2b01      	cmp	r3, #1
2000f708:	d101      	bne.n	2000f70e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000f70a:	2301      	movs	r3, #1
2000f70c:	e029      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000f70e:	4b18      	ldr	r3, [pc, #96]	; (2000f770 <HAL_RCC_OscConfig+0x4d8>)
2000f710:	685b      	ldr	r3, [r3, #4]
2000f712:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f714:	68fb      	ldr	r3, [r7, #12]
2000f716:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000f71a:	687b      	ldr	r3, [r7, #4]
2000f71c:	69db      	ldr	r3, [r3, #28]
2000f71e:	429a      	cmp	r2, r3
2000f720:	d11c      	bne.n	2000f75c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f722:	68fb      	ldr	r3, [r7, #12]
2000f724:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000f728:	687b      	ldr	r3, [r7, #4]
2000f72a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000f72c:	429a      	cmp	r2, r3
2000f72e:	d115      	bne.n	2000f75c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f730:	68fa      	ldr	r2, [r7, #12]
2000f732:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000f736:	4013      	ands	r3, r2
2000f738:	687a      	ldr	r2, [r7, #4]
2000f73a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000f73c:	4293      	cmp	r3, r2
2000f73e:	d10d      	bne.n	2000f75c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f740:	68fb      	ldr	r3, [r7, #12]
2000f742:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000f746:	687b      	ldr	r3, [r7, #4]
2000f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000f74a:	429a      	cmp	r2, r3
2000f74c:	d106      	bne.n	2000f75c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000f74e:	68fb      	ldr	r3, [r7, #12]
2000f750:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000f754:	687b      	ldr	r3, [r7, #4]
2000f756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000f758:	429a      	cmp	r2, r3
2000f75a:	d001      	beq.n	2000f760 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000f75c:	2301      	movs	r3, #1
2000f75e:	e000      	b.n	2000f762 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000f760:	2300      	movs	r3, #0
}
2000f762:	4618      	mov	r0, r3
2000f764:	3718      	adds	r7, #24
2000f766:	46bd      	mov	sp, r7
2000f768:	bd80      	pop	{r7, pc}
2000f76a:	bf00      	nop
2000f76c:	40007000 	.word	0x40007000
2000f770:	40023800 	.word	0x40023800
2000f774:	42470060 	.word	0x42470060

2000f778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000f778:	b580      	push	{r7, lr}
2000f77a:	b084      	sub	sp, #16
2000f77c:	af00      	add	r7, sp, #0
2000f77e:	6078      	str	r0, [r7, #4]
2000f780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000f782:	687b      	ldr	r3, [r7, #4]
2000f784:	2b00      	cmp	r3, #0
2000f786:	d101      	bne.n	2000f78c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000f788:	2301      	movs	r3, #1
2000f78a:	e0cc      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000f78c:	4b68      	ldr	r3, [pc, #416]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f78e:	681b      	ldr	r3, [r3, #0]
2000f790:	f003 030f 	and.w	r3, r3, #15
2000f794:	683a      	ldr	r2, [r7, #0]
2000f796:	429a      	cmp	r2, r3
2000f798:	d90c      	bls.n	2000f7b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f79a:	4b65      	ldr	r3, [pc, #404]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f79c:	683a      	ldr	r2, [r7, #0]
2000f79e:	b2d2      	uxtb	r2, r2
2000f7a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f7a2:	4b63      	ldr	r3, [pc, #396]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f7a4:	681b      	ldr	r3, [r3, #0]
2000f7a6:	f003 030f 	and.w	r3, r3, #15
2000f7aa:	683a      	ldr	r2, [r7, #0]
2000f7ac:	429a      	cmp	r2, r3
2000f7ae:	d001      	beq.n	2000f7b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000f7b0:	2301      	movs	r3, #1
2000f7b2:	e0b8      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000f7b4:	687b      	ldr	r3, [r7, #4]
2000f7b6:	681b      	ldr	r3, [r3, #0]
2000f7b8:	f003 0302 	and.w	r3, r3, #2
2000f7bc:	2b00      	cmp	r3, #0
2000f7be:	d020      	beq.n	2000f802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f7c0:	687b      	ldr	r3, [r7, #4]
2000f7c2:	681b      	ldr	r3, [r3, #0]
2000f7c4:	f003 0304 	and.w	r3, r3, #4
2000f7c8:	2b00      	cmp	r3, #0
2000f7ca:	d005      	beq.n	2000f7d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000f7cc:	4b59      	ldr	r3, [pc, #356]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7ce:	689b      	ldr	r3, [r3, #8]
2000f7d0:	4a58      	ldr	r2, [pc, #352]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000f7d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f7d8:	687b      	ldr	r3, [r7, #4]
2000f7da:	681b      	ldr	r3, [r3, #0]
2000f7dc:	f003 0308 	and.w	r3, r3, #8
2000f7e0:	2b00      	cmp	r3, #0
2000f7e2:	d005      	beq.n	2000f7f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000f7e4:	4b53      	ldr	r3, [pc, #332]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7e6:	689b      	ldr	r3, [r3, #8]
2000f7e8:	4a52      	ldr	r2, [pc, #328]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000f7ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000f7f0:	4b50      	ldr	r3, [pc, #320]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7f2:	689b      	ldr	r3, [r3, #8]
2000f7f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000f7f8:	687b      	ldr	r3, [r7, #4]
2000f7fa:	689b      	ldr	r3, [r3, #8]
2000f7fc:	494d      	ldr	r1, [pc, #308]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f7fe:	4313      	orrs	r3, r2
2000f800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000f802:	687b      	ldr	r3, [r7, #4]
2000f804:	681b      	ldr	r3, [r3, #0]
2000f806:	f003 0301 	and.w	r3, r3, #1
2000f80a:	2b00      	cmp	r3, #0
2000f80c:	d044      	beq.n	2000f898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000f80e:	687b      	ldr	r3, [r7, #4]
2000f810:	685b      	ldr	r3, [r3, #4]
2000f812:	2b01      	cmp	r3, #1
2000f814:	d107      	bne.n	2000f826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000f816:	4b47      	ldr	r3, [pc, #284]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f818:	681b      	ldr	r3, [r3, #0]
2000f81a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000f81e:	2b00      	cmp	r3, #0
2000f820:	d119      	bne.n	2000f856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f822:	2301      	movs	r3, #1
2000f824:	e07f      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f826:	687b      	ldr	r3, [r7, #4]
2000f828:	685b      	ldr	r3, [r3, #4]
2000f82a:	2b02      	cmp	r3, #2
2000f82c:	d003      	beq.n	2000f836 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000f82e:	687b      	ldr	r3, [r7, #4]
2000f830:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000f832:	2b03      	cmp	r3, #3
2000f834:	d107      	bne.n	2000f846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000f836:	4b3f      	ldr	r3, [pc, #252]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f838:	681b      	ldr	r3, [r3, #0]
2000f83a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000f83e:	2b00      	cmp	r3, #0
2000f840:	d109      	bne.n	2000f856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f842:	2301      	movs	r3, #1
2000f844:	e06f      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000f846:	4b3b      	ldr	r3, [pc, #236]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f848:	681b      	ldr	r3, [r3, #0]
2000f84a:	f003 0302 	and.w	r3, r3, #2
2000f84e:	2b00      	cmp	r3, #0
2000f850:	d101      	bne.n	2000f856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000f852:	2301      	movs	r3, #1
2000f854:	e067      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000f856:	4b37      	ldr	r3, [pc, #220]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f858:	689b      	ldr	r3, [r3, #8]
2000f85a:	f023 0203 	bic.w	r2, r3, #3
2000f85e:	687b      	ldr	r3, [r7, #4]
2000f860:	685b      	ldr	r3, [r3, #4]
2000f862:	4934      	ldr	r1, [pc, #208]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f864:	4313      	orrs	r3, r2
2000f866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000f868:	f7ff f9fa 	bl	2000ec60 <HAL_GetTick>
2000f86c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f86e:	e00a      	b.n	2000f886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000f870:	f7ff f9f6 	bl	2000ec60 <HAL_GetTick>
2000f874:	4602      	mov	r2, r0
2000f876:	68fb      	ldr	r3, [r7, #12]
2000f878:	1ad3      	subs	r3, r2, r3
2000f87a:	f241 3288 	movw	r2, #5000	; 0x1388
2000f87e:	4293      	cmp	r3, r2
2000f880:	d901      	bls.n	2000f886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000f882:	2303      	movs	r3, #3
2000f884:	e04f      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000f886:	4b2b      	ldr	r3, [pc, #172]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f888:	689b      	ldr	r3, [r3, #8]
2000f88a:	f003 020c 	and.w	r2, r3, #12
2000f88e:	687b      	ldr	r3, [r7, #4]
2000f890:	685b      	ldr	r3, [r3, #4]
2000f892:	009b      	lsls	r3, r3, #2
2000f894:	429a      	cmp	r2, r3
2000f896:	d1eb      	bne.n	2000f870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000f898:	4b25      	ldr	r3, [pc, #148]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f89a:	681b      	ldr	r3, [r3, #0]
2000f89c:	f003 030f 	and.w	r3, r3, #15
2000f8a0:	683a      	ldr	r2, [r7, #0]
2000f8a2:	429a      	cmp	r2, r3
2000f8a4:	d20c      	bcs.n	2000f8c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000f8a6:	4b22      	ldr	r3, [pc, #136]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f8a8:	683a      	ldr	r2, [r7, #0]
2000f8aa:	b2d2      	uxtb	r2, r2
2000f8ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000f8ae:	4b20      	ldr	r3, [pc, #128]	; (2000f930 <HAL_RCC_ClockConfig+0x1b8>)
2000f8b0:	681b      	ldr	r3, [r3, #0]
2000f8b2:	f003 030f 	and.w	r3, r3, #15
2000f8b6:	683a      	ldr	r2, [r7, #0]
2000f8b8:	429a      	cmp	r2, r3
2000f8ba:	d001      	beq.n	2000f8c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000f8bc:	2301      	movs	r3, #1
2000f8be:	e032      	b.n	2000f926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000f8c0:	687b      	ldr	r3, [r7, #4]
2000f8c2:	681b      	ldr	r3, [r3, #0]
2000f8c4:	f003 0304 	and.w	r3, r3, #4
2000f8c8:	2b00      	cmp	r3, #0
2000f8ca:	d008      	beq.n	2000f8de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000f8cc:	4b19      	ldr	r3, [pc, #100]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f8ce:	689b      	ldr	r3, [r3, #8]
2000f8d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000f8d4:	687b      	ldr	r3, [r7, #4]
2000f8d6:	68db      	ldr	r3, [r3, #12]
2000f8d8:	4916      	ldr	r1, [pc, #88]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f8da:	4313      	orrs	r3, r2
2000f8dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000f8de:	687b      	ldr	r3, [r7, #4]
2000f8e0:	681b      	ldr	r3, [r3, #0]
2000f8e2:	f003 0308 	and.w	r3, r3, #8
2000f8e6:	2b00      	cmp	r3, #0
2000f8e8:	d009      	beq.n	2000f8fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000f8ea:	4b12      	ldr	r3, [pc, #72]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f8ec:	689b      	ldr	r3, [r3, #8]
2000f8ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000f8f2:	687b      	ldr	r3, [r7, #4]
2000f8f4:	691b      	ldr	r3, [r3, #16]
2000f8f6:	00db      	lsls	r3, r3, #3
2000f8f8:	490e      	ldr	r1, [pc, #56]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f8fa:	4313      	orrs	r3, r2
2000f8fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000f8fe:	f000 f821 	bl	2000f944 <HAL_RCC_GetSysClockFreq>
2000f902:	4602      	mov	r2, r0
2000f904:	4b0b      	ldr	r3, [pc, #44]	; (2000f934 <HAL_RCC_ClockConfig+0x1bc>)
2000f906:	689b      	ldr	r3, [r3, #8]
2000f908:	091b      	lsrs	r3, r3, #4
2000f90a:	f003 030f 	and.w	r3, r3, #15
2000f90e:	490a      	ldr	r1, [pc, #40]	; (2000f938 <HAL_RCC_ClockConfig+0x1c0>)
2000f910:	5ccb      	ldrb	r3, [r1, r3]
2000f912:	fa22 f303 	lsr.w	r3, r2, r3
2000f916:	4a09      	ldr	r2, [pc, #36]	; (2000f93c <HAL_RCC_ClockConfig+0x1c4>)
2000f918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000f91a:	4b09      	ldr	r3, [pc, #36]	; (2000f940 <HAL_RCC_ClockConfig+0x1c8>)
2000f91c:	681b      	ldr	r3, [r3, #0]
2000f91e:	4618      	mov	r0, r3
2000f920:	f7ff f95a 	bl	2000ebd8 <HAL_InitTick>

  return HAL_OK;
2000f924:	2300      	movs	r3, #0
}
2000f926:	4618      	mov	r0, r3
2000f928:	3710      	adds	r7, #16
2000f92a:	46bd      	mov	sp, r7
2000f92c:	bd80      	pop	{r7, pc}
2000f92e:	bf00      	nop
2000f930:	40023c00 	.word	0x40023c00
2000f934:	40023800 	.word	0x40023800
2000f938:	20011e8c 	.word	0x20011e8c
2000f93c:	20012074 	.word	0x20012074
2000f940:	20012078 	.word	0x20012078

2000f944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000f944:	b5b0      	push	{r4, r5, r7, lr}
2000f946:	b084      	sub	sp, #16
2000f948:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000f94a:	2100      	movs	r1, #0
2000f94c:	6079      	str	r1, [r7, #4]
2000f94e:	2100      	movs	r1, #0
2000f950:	60f9      	str	r1, [r7, #12]
2000f952:	2100      	movs	r1, #0
2000f954:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000f956:	2100      	movs	r1, #0
2000f958:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000f95a:	4952      	ldr	r1, [pc, #328]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000f95c:	6889      	ldr	r1, [r1, #8]
2000f95e:	f001 010c 	and.w	r1, r1, #12
2000f962:	2908      	cmp	r1, #8
2000f964:	d00d      	beq.n	2000f982 <HAL_RCC_GetSysClockFreq+0x3e>
2000f966:	2908      	cmp	r1, #8
2000f968:	f200 8094 	bhi.w	2000fa94 <HAL_RCC_GetSysClockFreq+0x150>
2000f96c:	2900      	cmp	r1, #0
2000f96e:	d002      	beq.n	2000f976 <HAL_RCC_GetSysClockFreq+0x32>
2000f970:	2904      	cmp	r1, #4
2000f972:	d003      	beq.n	2000f97c <HAL_RCC_GetSysClockFreq+0x38>
2000f974:	e08e      	b.n	2000fa94 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000f976:	4b4c      	ldr	r3, [pc, #304]	; (2000faa8 <HAL_RCC_GetSysClockFreq+0x164>)
2000f978:	60bb      	str	r3, [r7, #8]
       break;
2000f97a:	e08e      	b.n	2000fa9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000f97c:	4b4b      	ldr	r3, [pc, #300]	; (2000faac <HAL_RCC_GetSysClockFreq+0x168>)
2000f97e:	60bb      	str	r3, [r7, #8]
      break;
2000f980:	e08b      	b.n	2000fa9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000f982:	4948      	ldr	r1, [pc, #288]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000f984:	6849      	ldr	r1, [r1, #4]
2000f986:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2000f98a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000f98c:	4945      	ldr	r1, [pc, #276]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000f98e:	6849      	ldr	r1, [r1, #4]
2000f990:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2000f994:	2900      	cmp	r1, #0
2000f996:	d024      	beq.n	2000f9e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f998:	4942      	ldr	r1, [pc, #264]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000f99a:	6849      	ldr	r1, [r1, #4]
2000f99c:	0989      	lsrs	r1, r1, #6
2000f99e:	4608      	mov	r0, r1
2000f9a0:	f04f 0100 	mov.w	r1, #0
2000f9a4:	f240 14ff 	movw	r4, #511	; 0x1ff
2000f9a8:	f04f 0500 	mov.w	r5, #0
2000f9ac:	ea00 0204 	and.w	r2, r0, r4
2000f9b0:	ea01 0305 	and.w	r3, r1, r5
2000f9b4:	493d      	ldr	r1, [pc, #244]	; (2000faac <HAL_RCC_GetSysClockFreq+0x168>)
2000f9b6:	fb01 f003 	mul.w	r0, r1, r3
2000f9ba:	2100      	movs	r1, #0
2000f9bc:	fb01 f102 	mul.w	r1, r1, r2
2000f9c0:	1844      	adds	r4, r0, r1
2000f9c2:	493a      	ldr	r1, [pc, #232]	; (2000faac <HAL_RCC_GetSysClockFreq+0x168>)
2000f9c4:	fba2 0101 	umull	r0, r1, r2, r1
2000f9c8:	1863      	adds	r3, r4, r1
2000f9ca:	4619      	mov	r1, r3
2000f9cc:	687b      	ldr	r3, [r7, #4]
2000f9ce:	461a      	mov	r2, r3
2000f9d0:	f04f 0300 	mov.w	r3, #0
2000f9d4:	f7fd fc54 	bl	2000d280 <__aeabi_uldivmod>
2000f9d8:	4602      	mov	r2, r0
2000f9da:	460b      	mov	r3, r1
2000f9dc:	4613      	mov	r3, r2
2000f9de:	60fb      	str	r3, [r7, #12]
2000f9e0:	e04a      	b.n	2000fa78 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000f9e2:	4b30      	ldr	r3, [pc, #192]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000f9e4:	685b      	ldr	r3, [r3, #4]
2000f9e6:	099b      	lsrs	r3, r3, #6
2000f9e8:	461a      	mov	r2, r3
2000f9ea:	f04f 0300 	mov.w	r3, #0
2000f9ee:	f240 10ff 	movw	r0, #511	; 0x1ff
2000f9f2:	f04f 0100 	mov.w	r1, #0
2000f9f6:	ea02 0400 	and.w	r4, r2, r0
2000f9fa:	ea03 0501 	and.w	r5, r3, r1
2000f9fe:	4620      	mov	r0, r4
2000fa00:	4629      	mov	r1, r5
2000fa02:	f04f 0200 	mov.w	r2, #0
2000fa06:	f04f 0300 	mov.w	r3, #0
2000fa0a:	014b      	lsls	r3, r1, #5
2000fa0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
2000fa10:	0142      	lsls	r2, r0, #5
2000fa12:	4610      	mov	r0, r2
2000fa14:	4619      	mov	r1, r3
2000fa16:	1b00      	subs	r0, r0, r4
2000fa18:	eb61 0105 	sbc.w	r1, r1, r5
2000fa1c:	f04f 0200 	mov.w	r2, #0
2000fa20:	f04f 0300 	mov.w	r3, #0
2000fa24:	018b      	lsls	r3, r1, #6
2000fa26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
2000fa2a:	0182      	lsls	r2, r0, #6
2000fa2c:	1a12      	subs	r2, r2, r0
2000fa2e:	eb63 0301 	sbc.w	r3, r3, r1
2000fa32:	f04f 0000 	mov.w	r0, #0
2000fa36:	f04f 0100 	mov.w	r1, #0
2000fa3a:	00d9      	lsls	r1, r3, #3
2000fa3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2000fa40:	00d0      	lsls	r0, r2, #3
2000fa42:	4602      	mov	r2, r0
2000fa44:	460b      	mov	r3, r1
2000fa46:	1912      	adds	r2, r2, r4
2000fa48:	eb45 0303 	adc.w	r3, r5, r3
2000fa4c:	f04f 0000 	mov.w	r0, #0
2000fa50:	f04f 0100 	mov.w	r1, #0
2000fa54:	0299      	lsls	r1, r3, #10
2000fa56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
2000fa5a:	0290      	lsls	r0, r2, #10
2000fa5c:	4602      	mov	r2, r0
2000fa5e:	460b      	mov	r3, r1
2000fa60:	4610      	mov	r0, r2
2000fa62:	4619      	mov	r1, r3
2000fa64:	687b      	ldr	r3, [r7, #4]
2000fa66:	461a      	mov	r2, r3
2000fa68:	f04f 0300 	mov.w	r3, #0
2000fa6c:	f7fd fc08 	bl	2000d280 <__aeabi_uldivmod>
2000fa70:	4602      	mov	r2, r0
2000fa72:	460b      	mov	r3, r1
2000fa74:	4613      	mov	r3, r2
2000fa76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000fa78:	4b0a      	ldr	r3, [pc, #40]	; (2000faa4 <HAL_RCC_GetSysClockFreq+0x160>)
2000fa7a:	685b      	ldr	r3, [r3, #4]
2000fa7c:	0c1b      	lsrs	r3, r3, #16
2000fa7e:	f003 0303 	and.w	r3, r3, #3
2000fa82:	3301      	adds	r3, #1
2000fa84:	005b      	lsls	r3, r3, #1
2000fa86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000fa88:	68fa      	ldr	r2, [r7, #12]
2000fa8a:	683b      	ldr	r3, [r7, #0]
2000fa8c:	fbb2 f3f3 	udiv	r3, r2, r3
2000fa90:	60bb      	str	r3, [r7, #8]
      break;
2000fa92:	e002      	b.n	2000fa9a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000fa94:	4b04      	ldr	r3, [pc, #16]	; (2000faa8 <HAL_RCC_GetSysClockFreq+0x164>)
2000fa96:	60bb      	str	r3, [r7, #8]
      break;
2000fa98:	bf00      	nop
    }
  }
  return sysclockfreq;
2000fa9a:	68bb      	ldr	r3, [r7, #8]
}
2000fa9c:	4618      	mov	r0, r3
2000fa9e:	3710      	adds	r7, #16
2000faa0:	46bd      	mov	sp, r7
2000faa2:	bdb0      	pop	{r4, r5, r7, pc}
2000faa4:	40023800 	.word	0x40023800
2000faa8:	00f42400 	.word	0x00f42400
2000faac:	017d7840 	.word	0x017d7840

2000fab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000fab0:	b480      	push	{r7}
2000fab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000fab4:	4b03      	ldr	r3, [pc, #12]	; (2000fac4 <HAL_RCC_GetHCLKFreq+0x14>)
2000fab6:	681b      	ldr	r3, [r3, #0]
}
2000fab8:	4618      	mov	r0, r3
2000faba:	46bd      	mov	sp, r7
2000fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fac0:	4770      	bx	lr
2000fac2:	bf00      	nop
2000fac4:	20012074 	.word	0x20012074

2000fac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2000fac8:	b580      	push	{r7, lr}
2000faca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
2000facc:	f7ff fff0 	bl	2000fab0 <HAL_RCC_GetHCLKFreq>
2000fad0:	4602      	mov	r2, r0
2000fad2:	4b05      	ldr	r3, [pc, #20]	; (2000fae8 <HAL_RCC_GetPCLK1Freq+0x20>)
2000fad4:	689b      	ldr	r3, [r3, #8]
2000fad6:	0a9b      	lsrs	r3, r3, #10
2000fad8:	f003 0307 	and.w	r3, r3, #7
2000fadc:	4903      	ldr	r1, [pc, #12]	; (2000faec <HAL_RCC_GetPCLK1Freq+0x24>)
2000fade:	5ccb      	ldrb	r3, [r1, r3]
2000fae0:	fa22 f303 	lsr.w	r3, r2, r3
}
2000fae4:	4618      	mov	r0, r3
2000fae6:	bd80      	pop	{r7, pc}
2000fae8:	40023800 	.word	0x40023800
2000faec:	20011e9c 	.word	0x20011e9c

2000faf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
2000faf0:	b580      	push	{r7, lr}
2000faf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
2000faf4:	f7ff ffdc 	bl	2000fab0 <HAL_RCC_GetHCLKFreq>
2000faf8:	4602      	mov	r2, r0
2000fafa:	4b05      	ldr	r3, [pc, #20]	; (2000fb10 <HAL_RCC_GetPCLK2Freq+0x20>)
2000fafc:	689b      	ldr	r3, [r3, #8]
2000fafe:	0b5b      	lsrs	r3, r3, #13
2000fb00:	f003 0307 	and.w	r3, r3, #7
2000fb04:	4903      	ldr	r1, [pc, #12]	; (2000fb14 <HAL_RCC_GetPCLK2Freq+0x24>)
2000fb06:	5ccb      	ldrb	r3, [r1, r3]
2000fb08:	fa22 f303 	lsr.w	r3, r2, r3
}
2000fb0c:	4618      	mov	r0, r3
2000fb0e:	bd80      	pop	{r7, pc}
2000fb10:	40023800 	.word	0x40023800
2000fb14:	20011e9c 	.word	0x20011e9c

2000fb18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
2000fb18:	b580      	push	{r7, lr}
2000fb1a:	b082      	sub	sp, #8
2000fb1c:	af00      	add	r7, sp, #0
2000fb1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
2000fb20:	687b      	ldr	r3, [r7, #4]
2000fb22:	2b00      	cmp	r3, #0
2000fb24:	d101      	bne.n	2000fb2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
2000fb26:	2301      	movs	r3, #1
2000fb28:	e03f      	b.n	2000fbaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
2000fb2a:	687b      	ldr	r3, [r7, #4]
2000fb2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
2000fb30:	b2db      	uxtb	r3, r3
2000fb32:	2b00      	cmp	r3, #0
2000fb34:	d106      	bne.n	2000fb44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
2000fb36:	687b      	ldr	r3, [r7, #4]
2000fb38:	2200      	movs	r2, #0
2000fb3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
2000fb3e:	6878      	ldr	r0, [r7, #4]
2000fb40:	f7fe ff80 	bl	2000ea44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
2000fb44:	687b      	ldr	r3, [r7, #4]
2000fb46:	2224      	movs	r2, #36	; 0x24
2000fb48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
2000fb4c:	687b      	ldr	r3, [r7, #4]
2000fb4e:	681b      	ldr	r3, [r3, #0]
2000fb50:	68da      	ldr	r2, [r3, #12]
2000fb52:	687b      	ldr	r3, [r7, #4]
2000fb54:	681b      	ldr	r3, [r3, #0]
2000fb56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
2000fb5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
2000fb5c:	6878      	ldr	r0, [r7, #4]
2000fb5e:	f000 fa07 	bl	2000ff70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
2000fb62:	687b      	ldr	r3, [r7, #4]
2000fb64:	681b      	ldr	r3, [r3, #0]
2000fb66:	691a      	ldr	r2, [r3, #16]
2000fb68:	687b      	ldr	r3, [r7, #4]
2000fb6a:	681b      	ldr	r3, [r3, #0]
2000fb6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
2000fb70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
2000fb72:	687b      	ldr	r3, [r7, #4]
2000fb74:	681b      	ldr	r3, [r3, #0]
2000fb76:	695a      	ldr	r2, [r3, #20]
2000fb78:	687b      	ldr	r3, [r7, #4]
2000fb7a:	681b      	ldr	r3, [r3, #0]
2000fb7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
2000fb80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
2000fb82:	687b      	ldr	r3, [r7, #4]
2000fb84:	681b      	ldr	r3, [r3, #0]
2000fb86:	68da      	ldr	r2, [r3, #12]
2000fb88:	687b      	ldr	r3, [r7, #4]
2000fb8a:	681b      	ldr	r3, [r3, #0]
2000fb8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
2000fb90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fb92:	687b      	ldr	r3, [r7, #4]
2000fb94:	2200      	movs	r2, #0
2000fb96:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
2000fb98:	687b      	ldr	r3, [r7, #4]
2000fb9a:	2220      	movs	r2, #32
2000fb9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
2000fba0:	687b      	ldr	r3, [r7, #4]
2000fba2:	2220      	movs	r2, #32
2000fba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
2000fba8:	2300      	movs	r3, #0
}
2000fbaa:	4618      	mov	r0, r3
2000fbac:	3708      	adds	r7, #8
2000fbae:	46bd      	mov	sp, r7
2000fbb0:	bd80      	pop	{r7, pc}

2000fbb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000fbb2:	b580      	push	{r7, lr}
2000fbb4:	b088      	sub	sp, #32
2000fbb6:	af02      	add	r7, sp, #8
2000fbb8:	60f8      	str	r0, [r7, #12]
2000fbba:	60b9      	str	r1, [r7, #8]
2000fbbc:	603b      	str	r3, [r7, #0]
2000fbbe:	4613      	mov	r3, r2
2000fbc0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
2000fbc2:	2300      	movs	r3, #0
2000fbc4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
2000fbc6:	68fb      	ldr	r3, [r7, #12]
2000fbc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
2000fbcc:	b2db      	uxtb	r3, r3
2000fbce:	2b20      	cmp	r3, #32
2000fbd0:	f040 8083 	bne.w	2000fcda <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
2000fbd4:	68bb      	ldr	r3, [r7, #8]
2000fbd6:	2b00      	cmp	r3, #0
2000fbd8:	d002      	beq.n	2000fbe0 <HAL_UART_Transmit+0x2e>
2000fbda:	88fb      	ldrh	r3, [r7, #6]
2000fbdc:	2b00      	cmp	r3, #0
2000fbde:	d101      	bne.n	2000fbe4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
2000fbe0:	2301      	movs	r3, #1
2000fbe2:	e07b      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
2000fbe4:	68fb      	ldr	r3, [r7, #12]
2000fbe6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000fbea:	2b01      	cmp	r3, #1
2000fbec:	d101      	bne.n	2000fbf2 <HAL_UART_Transmit+0x40>
2000fbee:	2302      	movs	r3, #2
2000fbf0:	e074      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
2000fbf2:	68fb      	ldr	r3, [r7, #12]
2000fbf4:	2201      	movs	r2, #1
2000fbf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fbfa:	68fb      	ldr	r3, [r7, #12]
2000fbfc:	2200      	movs	r2, #0
2000fbfe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
2000fc00:	68fb      	ldr	r3, [r7, #12]
2000fc02:	2221      	movs	r2, #33	; 0x21
2000fc04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
2000fc08:	f7ff f82a 	bl	2000ec60 <HAL_GetTick>
2000fc0c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
2000fc0e:	68fb      	ldr	r3, [r7, #12]
2000fc10:	88fa      	ldrh	r2, [r7, #6]
2000fc12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
2000fc14:	68fb      	ldr	r3, [r7, #12]
2000fc16:	88fa      	ldrh	r2, [r7, #6]
2000fc18:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
2000fc1a:	68fb      	ldr	r3, [r7, #12]
2000fc1c:	2200      	movs	r2, #0
2000fc1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
2000fc22:	e042      	b.n	2000fcaa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
2000fc24:	68fb      	ldr	r3, [r7, #12]
2000fc26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
2000fc28:	b29b      	uxth	r3, r3
2000fc2a:	3b01      	subs	r3, #1
2000fc2c:	b29a      	uxth	r2, r3
2000fc2e:	68fb      	ldr	r3, [r7, #12]
2000fc30:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
2000fc32:	68fb      	ldr	r3, [r7, #12]
2000fc34:	689b      	ldr	r3, [r3, #8]
2000fc36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2000fc3a:	d122      	bne.n	2000fc82 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
2000fc3c:	683b      	ldr	r3, [r7, #0]
2000fc3e:	9300      	str	r3, [sp, #0]
2000fc40:	697b      	ldr	r3, [r7, #20]
2000fc42:	2200      	movs	r2, #0
2000fc44:	2180      	movs	r1, #128	; 0x80
2000fc46:	68f8      	ldr	r0, [r7, #12]
2000fc48:	f000 f947 	bl	2000feda <UART_WaitOnFlagUntilTimeout>
2000fc4c:	4603      	mov	r3, r0
2000fc4e:	2b00      	cmp	r3, #0
2000fc50:	d001      	beq.n	2000fc56 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
2000fc52:	2303      	movs	r3, #3
2000fc54:	e042      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
2000fc56:	68bb      	ldr	r3, [r7, #8]
2000fc58:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
2000fc5a:	693b      	ldr	r3, [r7, #16]
2000fc5c:	881b      	ldrh	r3, [r3, #0]
2000fc5e:	461a      	mov	r2, r3
2000fc60:	68fb      	ldr	r3, [r7, #12]
2000fc62:	681b      	ldr	r3, [r3, #0]
2000fc64:	f3c2 0208 	ubfx	r2, r2, #0, #9
2000fc68:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
2000fc6a:	68fb      	ldr	r3, [r7, #12]
2000fc6c:	691b      	ldr	r3, [r3, #16]
2000fc6e:	2b00      	cmp	r3, #0
2000fc70:	d103      	bne.n	2000fc7a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
2000fc72:	68bb      	ldr	r3, [r7, #8]
2000fc74:	3302      	adds	r3, #2
2000fc76:	60bb      	str	r3, [r7, #8]
2000fc78:	e017      	b.n	2000fcaa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
2000fc7a:	68bb      	ldr	r3, [r7, #8]
2000fc7c:	3301      	adds	r3, #1
2000fc7e:	60bb      	str	r3, [r7, #8]
2000fc80:	e013      	b.n	2000fcaa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
2000fc82:	683b      	ldr	r3, [r7, #0]
2000fc84:	9300      	str	r3, [sp, #0]
2000fc86:	697b      	ldr	r3, [r7, #20]
2000fc88:	2200      	movs	r2, #0
2000fc8a:	2180      	movs	r1, #128	; 0x80
2000fc8c:	68f8      	ldr	r0, [r7, #12]
2000fc8e:	f000 f924 	bl	2000feda <UART_WaitOnFlagUntilTimeout>
2000fc92:	4603      	mov	r3, r0
2000fc94:	2b00      	cmp	r3, #0
2000fc96:	d001      	beq.n	2000fc9c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
2000fc98:	2303      	movs	r3, #3
2000fc9a:	e01f      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
2000fc9c:	68bb      	ldr	r3, [r7, #8]
2000fc9e:	1c5a      	adds	r2, r3, #1
2000fca0:	60ba      	str	r2, [r7, #8]
2000fca2:	781a      	ldrb	r2, [r3, #0]
2000fca4:	68fb      	ldr	r3, [r7, #12]
2000fca6:	681b      	ldr	r3, [r3, #0]
2000fca8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
2000fcaa:	68fb      	ldr	r3, [r7, #12]
2000fcac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
2000fcae:	b29b      	uxth	r3, r3
2000fcb0:	2b00      	cmp	r3, #0
2000fcb2:	d1b7      	bne.n	2000fc24 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
2000fcb4:	683b      	ldr	r3, [r7, #0]
2000fcb6:	9300      	str	r3, [sp, #0]
2000fcb8:	697b      	ldr	r3, [r7, #20]
2000fcba:	2200      	movs	r2, #0
2000fcbc:	2140      	movs	r1, #64	; 0x40
2000fcbe:	68f8      	ldr	r0, [r7, #12]
2000fcc0:	f000 f90b 	bl	2000feda <UART_WaitOnFlagUntilTimeout>
2000fcc4:	4603      	mov	r3, r0
2000fcc6:	2b00      	cmp	r3, #0
2000fcc8:	d001      	beq.n	2000fcce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
2000fcca:	2303      	movs	r3, #3
2000fccc:	e006      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
2000fcce:	68fb      	ldr	r3, [r7, #12]
2000fcd0:	2220      	movs	r2, #32
2000fcd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
2000fcd6:	2300      	movs	r3, #0
2000fcd8:	e000      	b.n	2000fcdc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
2000fcda:	2302      	movs	r3, #2
  }
}
2000fcdc:	4618      	mov	r0, r3
2000fcde:	3718      	adds	r7, #24
2000fce0:	46bd      	mov	sp, r7
2000fce2:	bd80      	pop	{r7, pc}

2000fce4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
2000fce4:	b580      	push	{r7, lr}
2000fce6:	b088      	sub	sp, #32
2000fce8:	af02      	add	r7, sp, #8
2000fcea:	60f8      	str	r0, [r7, #12]
2000fcec:	60b9      	str	r1, [r7, #8]
2000fcee:	603b      	str	r3, [r7, #0]
2000fcf0:	4613      	mov	r3, r2
2000fcf2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
2000fcf4:	2300      	movs	r3, #0
2000fcf6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
2000fcf8:	68fb      	ldr	r3, [r7, #12]
2000fcfa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
2000fcfe:	b2db      	uxtb	r3, r3
2000fd00:	2b20      	cmp	r3, #32
2000fd02:	f040 8090 	bne.w	2000fe26 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
2000fd06:	68bb      	ldr	r3, [r7, #8]
2000fd08:	2b00      	cmp	r3, #0
2000fd0a:	d002      	beq.n	2000fd12 <HAL_UART_Receive+0x2e>
2000fd0c:	88fb      	ldrh	r3, [r7, #6]
2000fd0e:	2b00      	cmp	r3, #0
2000fd10:	d101      	bne.n	2000fd16 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
2000fd12:	2301      	movs	r3, #1
2000fd14:	e088      	b.n	2000fe28 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
2000fd16:	68fb      	ldr	r3, [r7, #12]
2000fd18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000fd1c:	2b01      	cmp	r3, #1
2000fd1e:	d101      	bne.n	2000fd24 <HAL_UART_Receive+0x40>
2000fd20:	2302      	movs	r3, #2
2000fd22:	e081      	b.n	2000fe28 <HAL_UART_Receive+0x144>
2000fd24:	68fb      	ldr	r3, [r7, #12]
2000fd26:	2201      	movs	r2, #1
2000fd28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fd2c:	68fb      	ldr	r3, [r7, #12]
2000fd2e:	2200      	movs	r2, #0
2000fd30:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
2000fd32:	68fb      	ldr	r3, [r7, #12]
2000fd34:	2222      	movs	r2, #34	; 0x22
2000fd36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
2000fd3a:	f7fe ff91 	bl	2000ec60 <HAL_GetTick>
2000fd3e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
2000fd40:	68fb      	ldr	r3, [r7, #12]
2000fd42:	88fa      	ldrh	r2, [r7, #6]
2000fd44:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
2000fd46:	68fb      	ldr	r3, [r7, #12]
2000fd48:	88fa      	ldrh	r2, [r7, #6]
2000fd4a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
2000fd4c:	68fb      	ldr	r3, [r7, #12]
2000fd4e:	2200      	movs	r2, #0
2000fd50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
2000fd54:	e05c      	b.n	2000fe10 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
2000fd56:	68fb      	ldr	r3, [r7, #12]
2000fd58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
2000fd5a:	b29b      	uxth	r3, r3
2000fd5c:	3b01      	subs	r3, #1
2000fd5e:	b29a      	uxth	r2, r3
2000fd60:	68fb      	ldr	r3, [r7, #12]
2000fd62:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
2000fd64:	68fb      	ldr	r3, [r7, #12]
2000fd66:	689b      	ldr	r3, [r3, #8]
2000fd68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2000fd6c:	d12b      	bne.n	2000fdc6 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
2000fd6e:	683b      	ldr	r3, [r7, #0]
2000fd70:	9300      	str	r3, [sp, #0]
2000fd72:	697b      	ldr	r3, [r7, #20]
2000fd74:	2200      	movs	r2, #0
2000fd76:	2120      	movs	r1, #32
2000fd78:	68f8      	ldr	r0, [r7, #12]
2000fd7a:	f000 f8ae 	bl	2000feda <UART_WaitOnFlagUntilTimeout>
2000fd7e:	4603      	mov	r3, r0
2000fd80:	2b00      	cmp	r3, #0
2000fd82:	d001      	beq.n	2000fd88 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
2000fd84:	2303      	movs	r3, #3
2000fd86:	e04f      	b.n	2000fe28 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
2000fd88:	68bb      	ldr	r3, [r7, #8]
2000fd8a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
2000fd8c:	68fb      	ldr	r3, [r7, #12]
2000fd8e:	691b      	ldr	r3, [r3, #16]
2000fd90:	2b00      	cmp	r3, #0
2000fd92:	d10c      	bne.n	2000fdae <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
2000fd94:	68fb      	ldr	r3, [r7, #12]
2000fd96:	681b      	ldr	r3, [r3, #0]
2000fd98:	685b      	ldr	r3, [r3, #4]
2000fd9a:	b29b      	uxth	r3, r3
2000fd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
2000fda0:	b29a      	uxth	r2, r3
2000fda2:	693b      	ldr	r3, [r7, #16]
2000fda4:	801a      	strh	r2, [r3, #0]
          pData += 2U;
2000fda6:	68bb      	ldr	r3, [r7, #8]
2000fda8:	3302      	adds	r3, #2
2000fdaa:	60bb      	str	r3, [r7, #8]
2000fdac:	e030      	b.n	2000fe10 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
2000fdae:	68fb      	ldr	r3, [r7, #12]
2000fdb0:	681b      	ldr	r3, [r3, #0]
2000fdb2:	685b      	ldr	r3, [r3, #4]
2000fdb4:	b29b      	uxth	r3, r3
2000fdb6:	b2db      	uxtb	r3, r3
2000fdb8:	b29a      	uxth	r2, r3
2000fdba:	693b      	ldr	r3, [r7, #16]
2000fdbc:	801a      	strh	r2, [r3, #0]
          pData += 1U;
2000fdbe:	68bb      	ldr	r3, [r7, #8]
2000fdc0:	3301      	adds	r3, #1
2000fdc2:	60bb      	str	r3, [r7, #8]
2000fdc4:	e024      	b.n	2000fe10 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
2000fdc6:	683b      	ldr	r3, [r7, #0]
2000fdc8:	9300      	str	r3, [sp, #0]
2000fdca:	697b      	ldr	r3, [r7, #20]
2000fdcc:	2200      	movs	r2, #0
2000fdce:	2120      	movs	r1, #32
2000fdd0:	68f8      	ldr	r0, [r7, #12]
2000fdd2:	f000 f882 	bl	2000feda <UART_WaitOnFlagUntilTimeout>
2000fdd6:	4603      	mov	r3, r0
2000fdd8:	2b00      	cmp	r3, #0
2000fdda:	d001      	beq.n	2000fde0 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
2000fddc:	2303      	movs	r3, #3
2000fdde:	e023      	b.n	2000fe28 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
2000fde0:	68fb      	ldr	r3, [r7, #12]
2000fde2:	691b      	ldr	r3, [r3, #16]
2000fde4:	2b00      	cmp	r3, #0
2000fde6:	d108      	bne.n	2000fdfa <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
2000fde8:	68fb      	ldr	r3, [r7, #12]
2000fdea:	681b      	ldr	r3, [r3, #0]
2000fdec:	6859      	ldr	r1, [r3, #4]
2000fdee:	68bb      	ldr	r3, [r7, #8]
2000fdf0:	1c5a      	adds	r2, r3, #1
2000fdf2:	60ba      	str	r2, [r7, #8]
2000fdf4:	b2ca      	uxtb	r2, r1
2000fdf6:	701a      	strb	r2, [r3, #0]
2000fdf8:	e00a      	b.n	2000fe10 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
2000fdfa:	68fb      	ldr	r3, [r7, #12]
2000fdfc:	681b      	ldr	r3, [r3, #0]
2000fdfe:	685b      	ldr	r3, [r3, #4]
2000fe00:	b2da      	uxtb	r2, r3
2000fe02:	68bb      	ldr	r3, [r7, #8]
2000fe04:	1c59      	adds	r1, r3, #1
2000fe06:	60b9      	str	r1, [r7, #8]
2000fe08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2000fe0c:	b2d2      	uxtb	r2, r2
2000fe0e:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
2000fe10:	68fb      	ldr	r3, [r7, #12]
2000fe12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
2000fe14:	b29b      	uxth	r3, r3
2000fe16:	2b00      	cmp	r3, #0
2000fe18:	d19d      	bne.n	2000fd56 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
2000fe1a:	68fb      	ldr	r3, [r7, #12]
2000fe1c:	2220      	movs	r2, #32
2000fe1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
2000fe22:	2300      	movs	r3, #0
2000fe24:	e000      	b.n	2000fe28 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
2000fe26:	2302      	movs	r3, #2
  }
}
2000fe28:	4618      	mov	r0, r3
2000fe2a:	3718      	adds	r7, #24
2000fe2c:	46bd      	mov	sp, r7
2000fe2e:	bd80      	pop	{r7, pc}

2000fe30 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
2000fe30:	b480      	push	{r7}
2000fe32:	b085      	sub	sp, #20
2000fe34:	af00      	add	r7, sp, #0
2000fe36:	60f8      	str	r0, [r7, #12]
2000fe38:	60b9      	str	r1, [r7, #8]
2000fe3a:	4613      	mov	r3, r2
2000fe3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
2000fe3e:	68fb      	ldr	r3, [r7, #12]
2000fe40:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
2000fe44:	b2db      	uxtb	r3, r3
2000fe46:	2b20      	cmp	r3, #32
2000fe48:	d140      	bne.n	2000fecc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
2000fe4a:	68bb      	ldr	r3, [r7, #8]
2000fe4c:	2b00      	cmp	r3, #0
2000fe4e:	d002      	beq.n	2000fe56 <HAL_UART_Receive_IT+0x26>
2000fe50:	88fb      	ldrh	r3, [r7, #6]
2000fe52:	2b00      	cmp	r3, #0
2000fe54:	d101      	bne.n	2000fe5a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
2000fe56:	2301      	movs	r3, #1
2000fe58:	e039      	b.n	2000fece <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
2000fe5a:	68fb      	ldr	r3, [r7, #12]
2000fe5c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
2000fe60:	2b01      	cmp	r3, #1
2000fe62:	d101      	bne.n	2000fe68 <HAL_UART_Receive_IT+0x38>
2000fe64:	2302      	movs	r3, #2
2000fe66:	e032      	b.n	2000fece <HAL_UART_Receive_IT+0x9e>
2000fe68:	68fb      	ldr	r3, [r7, #12]
2000fe6a:	2201      	movs	r2, #1
2000fe6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
2000fe70:	68fb      	ldr	r3, [r7, #12]
2000fe72:	68ba      	ldr	r2, [r7, #8]
2000fe74:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
2000fe76:	68fb      	ldr	r3, [r7, #12]
2000fe78:	88fa      	ldrh	r2, [r7, #6]
2000fe7a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
2000fe7c:	68fb      	ldr	r3, [r7, #12]
2000fe7e:	88fa      	ldrh	r2, [r7, #6]
2000fe80:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
2000fe82:	68fb      	ldr	r3, [r7, #12]
2000fe84:	2200      	movs	r2, #0
2000fe86:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
2000fe88:	68fb      	ldr	r3, [r7, #12]
2000fe8a:	2222      	movs	r2, #34	; 0x22
2000fe8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
2000fe90:	68fb      	ldr	r3, [r7, #12]
2000fe92:	2200      	movs	r2, #0
2000fe94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
2000fe98:	68fb      	ldr	r3, [r7, #12]
2000fe9a:	681b      	ldr	r3, [r3, #0]
2000fe9c:	68da      	ldr	r2, [r3, #12]
2000fe9e:	68fb      	ldr	r3, [r7, #12]
2000fea0:	681b      	ldr	r3, [r3, #0]
2000fea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
2000fea6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
2000fea8:	68fb      	ldr	r3, [r7, #12]
2000feaa:	681b      	ldr	r3, [r3, #0]
2000feac:	695a      	ldr	r2, [r3, #20]
2000feae:	68fb      	ldr	r3, [r7, #12]
2000feb0:	681b      	ldr	r3, [r3, #0]
2000feb2:	f042 0201 	orr.w	r2, r2, #1
2000feb6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
2000feb8:	68fb      	ldr	r3, [r7, #12]
2000feba:	681b      	ldr	r3, [r3, #0]
2000febc:	68da      	ldr	r2, [r3, #12]
2000febe:	68fb      	ldr	r3, [r7, #12]
2000fec0:	681b      	ldr	r3, [r3, #0]
2000fec2:	f042 0220 	orr.w	r2, r2, #32
2000fec6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
2000fec8:	2300      	movs	r3, #0
2000feca:	e000      	b.n	2000fece <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
2000fecc:	2302      	movs	r3, #2
  }
}
2000fece:	4618      	mov	r0, r3
2000fed0:	3714      	adds	r7, #20
2000fed2:	46bd      	mov	sp, r7
2000fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000fed8:	4770      	bx	lr

2000feda <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
2000feda:	b580      	push	{r7, lr}
2000fedc:	b084      	sub	sp, #16
2000fede:	af00      	add	r7, sp, #0
2000fee0:	60f8      	str	r0, [r7, #12]
2000fee2:	60b9      	str	r1, [r7, #8]
2000fee4:	603b      	str	r3, [r7, #0]
2000fee6:	4613      	mov	r3, r2
2000fee8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000feea:	e02c      	b.n	2000ff46 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
2000feec:	69bb      	ldr	r3, [r7, #24]
2000feee:	f1b3 3fff 	cmp.w	r3, #4294967295
2000fef2:	d028      	beq.n	2000ff46 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
2000fef4:	69bb      	ldr	r3, [r7, #24]
2000fef6:	2b00      	cmp	r3, #0
2000fef8:	d007      	beq.n	2000ff0a <UART_WaitOnFlagUntilTimeout+0x30>
2000fefa:	f7fe feb1 	bl	2000ec60 <HAL_GetTick>
2000fefe:	4602      	mov	r2, r0
2000ff00:	683b      	ldr	r3, [r7, #0]
2000ff02:	1ad3      	subs	r3, r2, r3
2000ff04:	69ba      	ldr	r2, [r7, #24]
2000ff06:	429a      	cmp	r2, r3
2000ff08:	d21d      	bcs.n	2000ff46 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
2000ff0a:	68fb      	ldr	r3, [r7, #12]
2000ff0c:	681b      	ldr	r3, [r3, #0]
2000ff0e:	68da      	ldr	r2, [r3, #12]
2000ff10:	68fb      	ldr	r3, [r7, #12]
2000ff12:	681b      	ldr	r3, [r3, #0]
2000ff14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
2000ff18:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
2000ff1a:	68fb      	ldr	r3, [r7, #12]
2000ff1c:	681b      	ldr	r3, [r3, #0]
2000ff1e:	695a      	ldr	r2, [r3, #20]
2000ff20:	68fb      	ldr	r3, [r7, #12]
2000ff22:	681b      	ldr	r3, [r3, #0]
2000ff24:	f022 0201 	bic.w	r2, r2, #1
2000ff28:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
2000ff2a:	68fb      	ldr	r3, [r7, #12]
2000ff2c:	2220      	movs	r2, #32
2000ff2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
2000ff32:	68fb      	ldr	r3, [r7, #12]
2000ff34:	2220      	movs	r2, #32
2000ff36:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
2000ff3a:	68fb      	ldr	r3, [r7, #12]
2000ff3c:	2200      	movs	r2, #0
2000ff3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
2000ff42:	2303      	movs	r3, #3
2000ff44:	e00f      	b.n	2000ff66 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
2000ff46:	68fb      	ldr	r3, [r7, #12]
2000ff48:	681b      	ldr	r3, [r3, #0]
2000ff4a:	681a      	ldr	r2, [r3, #0]
2000ff4c:	68bb      	ldr	r3, [r7, #8]
2000ff4e:	4013      	ands	r3, r2
2000ff50:	68ba      	ldr	r2, [r7, #8]
2000ff52:	429a      	cmp	r2, r3
2000ff54:	bf0c      	ite	eq
2000ff56:	2301      	moveq	r3, #1
2000ff58:	2300      	movne	r3, #0
2000ff5a:	b2db      	uxtb	r3, r3
2000ff5c:	461a      	mov	r2, r3
2000ff5e:	79fb      	ldrb	r3, [r7, #7]
2000ff60:	429a      	cmp	r2, r3
2000ff62:	d0c3      	beq.n	2000feec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
2000ff64:	2300      	movs	r3, #0
}
2000ff66:	4618      	mov	r0, r3
2000ff68:	3710      	adds	r7, #16
2000ff6a:	46bd      	mov	sp, r7
2000ff6c:	bd80      	pop	{r7, pc}
	...

2000ff70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
2000ff70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000ff74:	b0bd      	sub	sp, #244	; 0xf4
2000ff76:	af00      	add	r7, sp, #0
2000ff78:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2000ff7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ff80:	681b      	ldr	r3, [r3, #0]
2000ff82:	691b      	ldr	r3, [r3, #16]
2000ff84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
2000ff88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ff8c:	68d9      	ldr	r1, [r3, #12]
2000ff8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ff92:	681a      	ldr	r2, [r3, #0]
2000ff94:	ea40 0301 	orr.w	r3, r0, r1
2000ff98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
2000ff9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ff9e:	689a      	ldr	r2, [r3, #8]
2000ffa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffa4:	691b      	ldr	r3, [r3, #16]
2000ffa6:	431a      	orrs	r2, r3
2000ffa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffac:	695b      	ldr	r3, [r3, #20]
2000ffae:	431a      	orrs	r2, r3
2000ffb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffb4:	69db      	ldr	r3, [r3, #28]
2000ffb6:	4313      	orrs	r3, r2
2000ffb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
2000ffbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffc0:	681b      	ldr	r3, [r3, #0]
2000ffc2:	68db      	ldr	r3, [r3, #12]
2000ffc4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
2000ffc8:	f021 010c 	bic.w	r1, r1, #12
2000ffcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffd0:	681a      	ldr	r2, [r3, #0]
2000ffd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
2000ffd6:	430b      	orrs	r3, r1
2000ffd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
2000ffda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffde:	681b      	ldr	r3, [r3, #0]
2000ffe0:	695b      	ldr	r3, [r3, #20]
2000ffe2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
2000ffe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000ffea:	6999      	ldr	r1, [r3, #24]
2000ffec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000fff0:	681a      	ldr	r2, [r3, #0]
2000fff2:	ea40 0301 	orr.w	r3, r0, r1
2000fff6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2000fff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2000fffc:	69db      	ldr	r3, [r3, #28]
2000fffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20010002:	f040 81a5 	bne.w	20010350 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20010006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2001000a:	681a      	ldr	r2, [r3, #0]
2001000c:	4bcd      	ldr	r3, [pc, #820]	; (20010344 <UART_SetConfig+0x3d4>)
2001000e:	429a      	cmp	r2, r3
20010010:	d006      	beq.n	20010020 <UART_SetConfig+0xb0>
20010012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010016:	681a      	ldr	r2, [r3, #0]
20010018:	4bcb      	ldr	r3, [pc, #812]	; (20010348 <UART_SetConfig+0x3d8>)
2001001a:	429a      	cmp	r2, r3
2001001c:	f040 80cb 	bne.w	200101b6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
20010020:	f7ff fd66 	bl	2000faf0 <HAL_RCC_GetPCLK2Freq>
20010024:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
20010028:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
2001002c:	461c      	mov	r4, r3
2001002e:	f04f 0500 	mov.w	r5, #0
20010032:	4622      	mov	r2, r4
20010034:	462b      	mov	r3, r5
20010036:	1891      	adds	r1, r2, r2
20010038:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
2001003c:	415b      	adcs	r3, r3
2001003e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
20010042:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
20010046:	1912      	adds	r2, r2, r4
20010048:	eb45 0303 	adc.w	r3, r5, r3
2001004c:	f04f 0000 	mov.w	r0, #0
20010050:	f04f 0100 	mov.w	r1, #0
20010054:	00d9      	lsls	r1, r3, #3
20010056:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2001005a:	00d0      	lsls	r0, r2, #3
2001005c:	4602      	mov	r2, r0
2001005e:	460b      	mov	r3, r1
20010060:	1911      	adds	r1, r2, r4
20010062:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
20010066:	416b      	adcs	r3, r5
20010068:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
2001006c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010070:	685b      	ldr	r3, [r3, #4]
20010072:	461a      	mov	r2, r3
20010074:	f04f 0300 	mov.w	r3, #0
20010078:	1891      	adds	r1, r2, r2
2001007a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
2001007e:	415b      	adcs	r3, r3
20010080:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
20010084:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
20010088:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
2001008c:	f7fd f8f8 	bl	2000d280 <__aeabi_uldivmod>
20010090:	4602      	mov	r2, r0
20010092:	460b      	mov	r3, r1
20010094:	4bad      	ldr	r3, [pc, #692]	; (2001034c <UART_SetConfig+0x3dc>)
20010096:	fba3 2302 	umull	r2, r3, r3, r2
2001009a:	095b      	lsrs	r3, r3, #5
2001009c:	011e      	lsls	r6, r3, #4
2001009e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
200100a2:	461c      	mov	r4, r3
200100a4:	f04f 0500 	mov.w	r5, #0
200100a8:	4622      	mov	r2, r4
200100aa:	462b      	mov	r3, r5
200100ac:	1891      	adds	r1, r2, r2
200100ae:	67b9      	str	r1, [r7, #120]	; 0x78
200100b0:	415b      	adcs	r3, r3
200100b2:	67fb      	str	r3, [r7, #124]	; 0x7c
200100b4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
200100b8:	1912      	adds	r2, r2, r4
200100ba:	eb45 0303 	adc.w	r3, r5, r3
200100be:	f04f 0000 	mov.w	r0, #0
200100c2:	f04f 0100 	mov.w	r1, #0
200100c6:	00d9      	lsls	r1, r3, #3
200100c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
200100cc:	00d0      	lsls	r0, r2, #3
200100ce:	4602      	mov	r2, r0
200100d0:	460b      	mov	r3, r1
200100d2:	1911      	adds	r1, r2, r4
200100d4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
200100d8:	416b      	adcs	r3, r5
200100da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
200100de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200100e2:	685b      	ldr	r3, [r3, #4]
200100e4:	461a      	mov	r2, r3
200100e6:	f04f 0300 	mov.w	r3, #0
200100ea:	1891      	adds	r1, r2, r2
200100ec:	6739      	str	r1, [r7, #112]	; 0x70
200100ee:	415b      	adcs	r3, r3
200100f0:	677b      	str	r3, [r7, #116]	; 0x74
200100f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
200100f6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
200100fa:	f7fd f8c1 	bl	2000d280 <__aeabi_uldivmod>
200100fe:	4602      	mov	r2, r0
20010100:	460b      	mov	r3, r1
20010102:	4b92      	ldr	r3, [pc, #584]	; (2001034c <UART_SetConfig+0x3dc>)
20010104:	fba3 1302 	umull	r1, r3, r3, r2
20010108:	095b      	lsrs	r3, r3, #5
2001010a:	2164      	movs	r1, #100	; 0x64
2001010c:	fb01 f303 	mul.w	r3, r1, r3
20010110:	1ad3      	subs	r3, r2, r3
20010112:	00db      	lsls	r3, r3, #3
20010114:	3332      	adds	r3, #50	; 0x32
20010116:	4a8d      	ldr	r2, [pc, #564]	; (2001034c <UART_SetConfig+0x3dc>)
20010118:	fba2 2303 	umull	r2, r3, r2, r3
2001011c:	095b      	lsrs	r3, r3, #5
2001011e:	005b      	lsls	r3, r3, #1
20010120:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
20010124:	441e      	add	r6, r3
20010126:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
2001012a:	4618      	mov	r0, r3
2001012c:	f04f 0100 	mov.w	r1, #0
20010130:	4602      	mov	r2, r0
20010132:	460b      	mov	r3, r1
20010134:	1894      	adds	r4, r2, r2
20010136:	66bc      	str	r4, [r7, #104]	; 0x68
20010138:	415b      	adcs	r3, r3
2001013a:	66fb      	str	r3, [r7, #108]	; 0x6c
2001013c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
20010140:	1812      	adds	r2, r2, r0
20010142:	eb41 0303 	adc.w	r3, r1, r3
20010146:	f04f 0400 	mov.w	r4, #0
2001014a:	f04f 0500 	mov.w	r5, #0
2001014e:	00dd      	lsls	r5, r3, #3
20010150:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
20010154:	00d4      	lsls	r4, r2, #3
20010156:	4622      	mov	r2, r4
20010158:	462b      	mov	r3, r5
2001015a:	1814      	adds	r4, r2, r0
2001015c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
20010160:	414b      	adcs	r3, r1
20010162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
20010166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2001016a:	685b      	ldr	r3, [r3, #4]
2001016c:	461a      	mov	r2, r3
2001016e:	f04f 0300 	mov.w	r3, #0
20010172:	1891      	adds	r1, r2, r2
20010174:	6639      	str	r1, [r7, #96]	; 0x60
20010176:	415b      	adcs	r3, r3
20010178:	667b      	str	r3, [r7, #100]	; 0x64
2001017a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
2001017e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
20010182:	f7fd f87d 	bl	2000d280 <__aeabi_uldivmod>
20010186:	4602      	mov	r2, r0
20010188:	460b      	mov	r3, r1
2001018a:	4b70      	ldr	r3, [pc, #448]	; (2001034c <UART_SetConfig+0x3dc>)
2001018c:	fba3 1302 	umull	r1, r3, r3, r2
20010190:	095b      	lsrs	r3, r3, #5
20010192:	2164      	movs	r1, #100	; 0x64
20010194:	fb01 f303 	mul.w	r3, r1, r3
20010198:	1ad3      	subs	r3, r2, r3
2001019a:	00db      	lsls	r3, r3, #3
2001019c:	3332      	adds	r3, #50	; 0x32
2001019e:	4a6b      	ldr	r2, [pc, #428]	; (2001034c <UART_SetConfig+0x3dc>)
200101a0:	fba2 2303 	umull	r2, r3, r2, r3
200101a4:	095b      	lsrs	r3, r3, #5
200101a6:	f003 0207 	and.w	r2, r3, #7
200101aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200101ae:	681b      	ldr	r3, [r3, #0]
200101b0:	4432      	add	r2, r6
200101b2:	609a      	str	r2, [r3, #8]
200101b4:	e26d      	b.n	20010692 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
200101b6:	f7ff fc87 	bl	2000fac8 <HAL_RCC_GetPCLK1Freq>
200101ba:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
200101be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
200101c2:	461c      	mov	r4, r3
200101c4:	f04f 0500 	mov.w	r5, #0
200101c8:	4622      	mov	r2, r4
200101ca:	462b      	mov	r3, r5
200101cc:	1891      	adds	r1, r2, r2
200101ce:	65b9      	str	r1, [r7, #88]	; 0x58
200101d0:	415b      	adcs	r3, r3
200101d2:	65fb      	str	r3, [r7, #92]	; 0x5c
200101d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
200101d8:	1912      	adds	r2, r2, r4
200101da:	eb45 0303 	adc.w	r3, r5, r3
200101de:	f04f 0000 	mov.w	r0, #0
200101e2:	f04f 0100 	mov.w	r1, #0
200101e6:	00d9      	lsls	r1, r3, #3
200101e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
200101ec:	00d0      	lsls	r0, r2, #3
200101ee:	4602      	mov	r2, r0
200101f0:	460b      	mov	r3, r1
200101f2:	1911      	adds	r1, r2, r4
200101f4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
200101f8:	416b      	adcs	r3, r5
200101fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
200101fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010202:	685b      	ldr	r3, [r3, #4]
20010204:	461a      	mov	r2, r3
20010206:	f04f 0300 	mov.w	r3, #0
2001020a:	1891      	adds	r1, r2, r2
2001020c:	6539      	str	r1, [r7, #80]	; 0x50
2001020e:	415b      	adcs	r3, r3
20010210:	657b      	str	r3, [r7, #84]	; 0x54
20010212:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
20010216:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
2001021a:	f7fd f831 	bl	2000d280 <__aeabi_uldivmod>
2001021e:	4602      	mov	r2, r0
20010220:	460b      	mov	r3, r1
20010222:	4b4a      	ldr	r3, [pc, #296]	; (2001034c <UART_SetConfig+0x3dc>)
20010224:	fba3 2302 	umull	r2, r3, r3, r2
20010228:	095b      	lsrs	r3, r3, #5
2001022a:	011e      	lsls	r6, r3, #4
2001022c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
20010230:	461c      	mov	r4, r3
20010232:	f04f 0500 	mov.w	r5, #0
20010236:	4622      	mov	r2, r4
20010238:	462b      	mov	r3, r5
2001023a:	1891      	adds	r1, r2, r2
2001023c:	64b9      	str	r1, [r7, #72]	; 0x48
2001023e:	415b      	adcs	r3, r3
20010240:	64fb      	str	r3, [r7, #76]	; 0x4c
20010242:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
20010246:	1912      	adds	r2, r2, r4
20010248:	eb45 0303 	adc.w	r3, r5, r3
2001024c:	f04f 0000 	mov.w	r0, #0
20010250:	f04f 0100 	mov.w	r1, #0
20010254:	00d9      	lsls	r1, r3, #3
20010256:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2001025a:	00d0      	lsls	r0, r2, #3
2001025c:	4602      	mov	r2, r0
2001025e:	460b      	mov	r3, r1
20010260:	1911      	adds	r1, r2, r4
20010262:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
20010266:	416b      	adcs	r3, r5
20010268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
2001026c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010270:	685b      	ldr	r3, [r3, #4]
20010272:	461a      	mov	r2, r3
20010274:	f04f 0300 	mov.w	r3, #0
20010278:	1891      	adds	r1, r2, r2
2001027a:	6439      	str	r1, [r7, #64]	; 0x40
2001027c:	415b      	adcs	r3, r3
2001027e:	647b      	str	r3, [r7, #68]	; 0x44
20010280:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
20010284:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
20010288:	f7fc fffa 	bl	2000d280 <__aeabi_uldivmod>
2001028c:	4602      	mov	r2, r0
2001028e:	460b      	mov	r3, r1
20010290:	4b2e      	ldr	r3, [pc, #184]	; (2001034c <UART_SetConfig+0x3dc>)
20010292:	fba3 1302 	umull	r1, r3, r3, r2
20010296:	095b      	lsrs	r3, r3, #5
20010298:	2164      	movs	r1, #100	; 0x64
2001029a:	fb01 f303 	mul.w	r3, r1, r3
2001029e:	1ad3      	subs	r3, r2, r3
200102a0:	00db      	lsls	r3, r3, #3
200102a2:	3332      	adds	r3, #50	; 0x32
200102a4:	4a29      	ldr	r2, [pc, #164]	; (2001034c <UART_SetConfig+0x3dc>)
200102a6:	fba2 2303 	umull	r2, r3, r2, r3
200102aa:	095b      	lsrs	r3, r3, #5
200102ac:	005b      	lsls	r3, r3, #1
200102ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
200102b2:	441e      	add	r6, r3
200102b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
200102b8:	4618      	mov	r0, r3
200102ba:	f04f 0100 	mov.w	r1, #0
200102be:	4602      	mov	r2, r0
200102c0:	460b      	mov	r3, r1
200102c2:	1894      	adds	r4, r2, r2
200102c4:	63bc      	str	r4, [r7, #56]	; 0x38
200102c6:	415b      	adcs	r3, r3
200102c8:	63fb      	str	r3, [r7, #60]	; 0x3c
200102ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
200102ce:	1812      	adds	r2, r2, r0
200102d0:	eb41 0303 	adc.w	r3, r1, r3
200102d4:	f04f 0400 	mov.w	r4, #0
200102d8:	f04f 0500 	mov.w	r5, #0
200102dc:	00dd      	lsls	r5, r3, #3
200102de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
200102e2:	00d4      	lsls	r4, r2, #3
200102e4:	4622      	mov	r2, r4
200102e6:	462b      	mov	r3, r5
200102e8:	1814      	adds	r4, r2, r0
200102ea:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
200102ee:	414b      	adcs	r3, r1
200102f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
200102f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200102f8:	685b      	ldr	r3, [r3, #4]
200102fa:	461a      	mov	r2, r3
200102fc:	f04f 0300 	mov.w	r3, #0
20010300:	1891      	adds	r1, r2, r2
20010302:	6339      	str	r1, [r7, #48]	; 0x30
20010304:	415b      	adcs	r3, r3
20010306:	637b      	str	r3, [r7, #52]	; 0x34
20010308:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
2001030c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
20010310:	f7fc ffb6 	bl	2000d280 <__aeabi_uldivmod>
20010314:	4602      	mov	r2, r0
20010316:	460b      	mov	r3, r1
20010318:	4b0c      	ldr	r3, [pc, #48]	; (2001034c <UART_SetConfig+0x3dc>)
2001031a:	fba3 1302 	umull	r1, r3, r3, r2
2001031e:	095b      	lsrs	r3, r3, #5
20010320:	2164      	movs	r1, #100	; 0x64
20010322:	fb01 f303 	mul.w	r3, r1, r3
20010326:	1ad3      	subs	r3, r2, r3
20010328:	00db      	lsls	r3, r3, #3
2001032a:	3332      	adds	r3, #50	; 0x32
2001032c:	4a07      	ldr	r2, [pc, #28]	; (2001034c <UART_SetConfig+0x3dc>)
2001032e:	fba2 2303 	umull	r2, r3, r2, r3
20010332:	095b      	lsrs	r3, r3, #5
20010334:	f003 0207 	and.w	r2, r3, #7
20010338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2001033c:	681b      	ldr	r3, [r3, #0]
2001033e:	4432      	add	r2, r6
20010340:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
20010342:	e1a6      	b.n	20010692 <UART_SetConfig+0x722>
20010344:	40011000 	.word	0x40011000
20010348:	40011400 	.word	0x40011400
2001034c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
20010350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010354:	681a      	ldr	r2, [r3, #0]
20010356:	4bd1      	ldr	r3, [pc, #836]	; (2001069c <UART_SetConfig+0x72c>)
20010358:	429a      	cmp	r2, r3
2001035a:	d006      	beq.n	2001036a <UART_SetConfig+0x3fa>
2001035c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010360:	681a      	ldr	r2, [r3, #0]
20010362:	4bcf      	ldr	r3, [pc, #828]	; (200106a0 <UART_SetConfig+0x730>)
20010364:	429a      	cmp	r2, r3
20010366:	f040 80ca 	bne.w	200104fe <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
2001036a:	f7ff fbc1 	bl	2000faf0 <HAL_RCC_GetPCLK2Freq>
2001036e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20010372:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
20010376:	461c      	mov	r4, r3
20010378:	f04f 0500 	mov.w	r5, #0
2001037c:	4622      	mov	r2, r4
2001037e:	462b      	mov	r3, r5
20010380:	1891      	adds	r1, r2, r2
20010382:	62b9      	str	r1, [r7, #40]	; 0x28
20010384:	415b      	adcs	r3, r3
20010386:	62fb      	str	r3, [r7, #44]	; 0x2c
20010388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
2001038c:	1912      	adds	r2, r2, r4
2001038e:	eb45 0303 	adc.w	r3, r5, r3
20010392:	f04f 0000 	mov.w	r0, #0
20010396:	f04f 0100 	mov.w	r1, #0
2001039a:	00d9      	lsls	r1, r3, #3
2001039c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
200103a0:	00d0      	lsls	r0, r2, #3
200103a2:	4602      	mov	r2, r0
200103a4:	460b      	mov	r3, r1
200103a6:	eb12 0a04 	adds.w	sl, r2, r4
200103aa:	eb43 0b05 	adc.w	fp, r3, r5
200103ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200103b2:	685b      	ldr	r3, [r3, #4]
200103b4:	4618      	mov	r0, r3
200103b6:	f04f 0100 	mov.w	r1, #0
200103ba:	f04f 0200 	mov.w	r2, #0
200103be:	f04f 0300 	mov.w	r3, #0
200103c2:	008b      	lsls	r3, r1, #2
200103c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
200103c8:	0082      	lsls	r2, r0, #2
200103ca:	4650      	mov	r0, sl
200103cc:	4659      	mov	r1, fp
200103ce:	f7fc ff57 	bl	2000d280 <__aeabi_uldivmod>
200103d2:	4602      	mov	r2, r0
200103d4:	460b      	mov	r3, r1
200103d6:	4bb3      	ldr	r3, [pc, #716]	; (200106a4 <UART_SetConfig+0x734>)
200103d8:	fba3 2302 	umull	r2, r3, r3, r2
200103dc:	095b      	lsrs	r3, r3, #5
200103de:	011e      	lsls	r6, r3, #4
200103e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
200103e4:	4618      	mov	r0, r3
200103e6:	f04f 0100 	mov.w	r1, #0
200103ea:	4602      	mov	r2, r0
200103ec:	460b      	mov	r3, r1
200103ee:	1894      	adds	r4, r2, r2
200103f0:	623c      	str	r4, [r7, #32]
200103f2:	415b      	adcs	r3, r3
200103f4:	627b      	str	r3, [r7, #36]	; 0x24
200103f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
200103fa:	1812      	adds	r2, r2, r0
200103fc:	eb41 0303 	adc.w	r3, r1, r3
20010400:	f04f 0400 	mov.w	r4, #0
20010404:	f04f 0500 	mov.w	r5, #0
20010408:	00dd      	lsls	r5, r3, #3
2001040a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
2001040e:	00d4      	lsls	r4, r2, #3
20010410:	4622      	mov	r2, r4
20010412:	462b      	mov	r3, r5
20010414:	1814      	adds	r4, r2, r0
20010416:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
2001041a:	414b      	adcs	r3, r1
2001041c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
20010420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010424:	685b      	ldr	r3, [r3, #4]
20010426:	4618      	mov	r0, r3
20010428:	f04f 0100 	mov.w	r1, #0
2001042c:	f04f 0200 	mov.w	r2, #0
20010430:	f04f 0300 	mov.w	r3, #0
20010434:	008b      	lsls	r3, r1, #2
20010436:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
2001043a:	0082      	lsls	r2, r0, #2
2001043c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
20010440:	f7fc ff1e 	bl	2000d280 <__aeabi_uldivmod>
20010444:	4602      	mov	r2, r0
20010446:	460b      	mov	r3, r1
20010448:	4b96      	ldr	r3, [pc, #600]	; (200106a4 <UART_SetConfig+0x734>)
2001044a:	fba3 1302 	umull	r1, r3, r3, r2
2001044e:	095b      	lsrs	r3, r3, #5
20010450:	2164      	movs	r1, #100	; 0x64
20010452:	fb01 f303 	mul.w	r3, r1, r3
20010456:	1ad3      	subs	r3, r2, r3
20010458:	011b      	lsls	r3, r3, #4
2001045a:	3332      	adds	r3, #50	; 0x32
2001045c:	4a91      	ldr	r2, [pc, #580]	; (200106a4 <UART_SetConfig+0x734>)
2001045e:	fba2 2303 	umull	r2, r3, r2, r3
20010462:	095b      	lsrs	r3, r3, #5
20010464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20010468:	441e      	add	r6, r3
2001046a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
2001046e:	4618      	mov	r0, r3
20010470:	f04f 0100 	mov.w	r1, #0
20010474:	4602      	mov	r2, r0
20010476:	460b      	mov	r3, r1
20010478:	1894      	adds	r4, r2, r2
2001047a:	61bc      	str	r4, [r7, #24]
2001047c:	415b      	adcs	r3, r3
2001047e:	61fb      	str	r3, [r7, #28]
20010480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
20010484:	1812      	adds	r2, r2, r0
20010486:	eb41 0303 	adc.w	r3, r1, r3
2001048a:	f04f 0400 	mov.w	r4, #0
2001048e:	f04f 0500 	mov.w	r5, #0
20010492:	00dd      	lsls	r5, r3, #3
20010494:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
20010498:	00d4      	lsls	r4, r2, #3
2001049a:	4622      	mov	r2, r4
2001049c:	462b      	mov	r3, r5
2001049e:	1814      	adds	r4, r2, r0
200104a0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
200104a4:	414b      	adcs	r3, r1
200104a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
200104aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200104ae:	685b      	ldr	r3, [r3, #4]
200104b0:	4618      	mov	r0, r3
200104b2:	f04f 0100 	mov.w	r1, #0
200104b6:	f04f 0200 	mov.w	r2, #0
200104ba:	f04f 0300 	mov.w	r3, #0
200104be:	008b      	lsls	r3, r1, #2
200104c0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
200104c4:	0082      	lsls	r2, r0, #2
200104c6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
200104ca:	f7fc fed9 	bl	2000d280 <__aeabi_uldivmod>
200104ce:	4602      	mov	r2, r0
200104d0:	460b      	mov	r3, r1
200104d2:	4b74      	ldr	r3, [pc, #464]	; (200106a4 <UART_SetConfig+0x734>)
200104d4:	fba3 1302 	umull	r1, r3, r3, r2
200104d8:	095b      	lsrs	r3, r3, #5
200104da:	2164      	movs	r1, #100	; 0x64
200104dc:	fb01 f303 	mul.w	r3, r1, r3
200104e0:	1ad3      	subs	r3, r2, r3
200104e2:	011b      	lsls	r3, r3, #4
200104e4:	3332      	adds	r3, #50	; 0x32
200104e6:	4a6f      	ldr	r2, [pc, #444]	; (200106a4 <UART_SetConfig+0x734>)
200104e8:	fba2 2303 	umull	r2, r3, r2, r3
200104ec:	095b      	lsrs	r3, r3, #5
200104ee:	f003 020f 	and.w	r2, r3, #15
200104f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200104f6:	681b      	ldr	r3, [r3, #0]
200104f8:	4432      	add	r2, r6
200104fa:	609a      	str	r2, [r3, #8]
200104fc:	e0c9      	b.n	20010692 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
200104fe:	f7ff fae3 	bl	2000fac8 <HAL_RCC_GetPCLK1Freq>
20010502:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
20010506:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
2001050a:	461c      	mov	r4, r3
2001050c:	f04f 0500 	mov.w	r5, #0
20010510:	4622      	mov	r2, r4
20010512:	462b      	mov	r3, r5
20010514:	1891      	adds	r1, r2, r2
20010516:	6139      	str	r1, [r7, #16]
20010518:	415b      	adcs	r3, r3
2001051a:	617b      	str	r3, [r7, #20]
2001051c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
20010520:	1912      	adds	r2, r2, r4
20010522:	eb45 0303 	adc.w	r3, r5, r3
20010526:	f04f 0000 	mov.w	r0, #0
2001052a:	f04f 0100 	mov.w	r1, #0
2001052e:	00d9      	lsls	r1, r3, #3
20010530:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
20010534:	00d0      	lsls	r0, r2, #3
20010536:	4602      	mov	r2, r0
20010538:	460b      	mov	r3, r1
2001053a:	eb12 0804 	adds.w	r8, r2, r4
2001053e:	eb43 0905 	adc.w	r9, r3, r5
20010542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010546:	685b      	ldr	r3, [r3, #4]
20010548:	4618      	mov	r0, r3
2001054a:	f04f 0100 	mov.w	r1, #0
2001054e:	f04f 0200 	mov.w	r2, #0
20010552:	f04f 0300 	mov.w	r3, #0
20010556:	008b      	lsls	r3, r1, #2
20010558:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
2001055c:	0082      	lsls	r2, r0, #2
2001055e:	4640      	mov	r0, r8
20010560:	4649      	mov	r1, r9
20010562:	f7fc fe8d 	bl	2000d280 <__aeabi_uldivmod>
20010566:	4602      	mov	r2, r0
20010568:	460b      	mov	r3, r1
2001056a:	4b4e      	ldr	r3, [pc, #312]	; (200106a4 <UART_SetConfig+0x734>)
2001056c:	fba3 2302 	umull	r2, r3, r3, r2
20010570:	095b      	lsrs	r3, r3, #5
20010572:	011e      	lsls	r6, r3, #4
20010574:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
20010578:	4618      	mov	r0, r3
2001057a:	f04f 0100 	mov.w	r1, #0
2001057e:	4602      	mov	r2, r0
20010580:	460b      	mov	r3, r1
20010582:	1894      	adds	r4, r2, r2
20010584:	60bc      	str	r4, [r7, #8]
20010586:	415b      	adcs	r3, r3
20010588:	60fb      	str	r3, [r7, #12]
2001058a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
2001058e:	1812      	adds	r2, r2, r0
20010590:	eb41 0303 	adc.w	r3, r1, r3
20010594:	f04f 0400 	mov.w	r4, #0
20010598:	f04f 0500 	mov.w	r5, #0
2001059c:	00dd      	lsls	r5, r3, #3
2001059e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
200105a2:	00d4      	lsls	r4, r2, #3
200105a4:	4622      	mov	r2, r4
200105a6:	462b      	mov	r3, r5
200105a8:	1814      	adds	r4, r2, r0
200105aa:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
200105ae:	414b      	adcs	r3, r1
200105b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
200105b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
200105b8:	685b      	ldr	r3, [r3, #4]
200105ba:	4618      	mov	r0, r3
200105bc:	f04f 0100 	mov.w	r1, #0
200105c0:	f04f 0200 	mov.w	r2, #0
200105c4:	f04f 0300 	mov.w	r3, #0
200105c8:	008b      	lsls	r3, r1, #2
200105ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
200105ce:	0082      	lsls	r2, r0, #2
200105d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
200105d4:	f7fc fe54 	bl	2000d280 <__aeabi_uldivmod>
200105d8:	4602      	mov	r2, r0
200105da:	460b      	mov	r3, r1
200105dc:	4b31      	ldr	r3, [pc, #196]	; (200106a4 <UART_SetConfig+0x734>)
200105de:	fba3 1302 	umull	r1, r3, r3, r2
200105e2:	095b      	lsrs	r3, r3, #5
200105e4:	2164      	movs	r1, #100	; 0x64
200105e6:	fb01 f303 	mul.w	r3, r1, r3
200105ea:	1ad3      	subs	r3, r2, r3
200105ec:	011b      	lsls	r3, r3, #4
200105ee:	3332      	adds	r3, #50	; 0x32
200105f0:	4a2c      	ldr	r2, [pc, #176]	; (200106a4 <UART_SetConfig+0x734>)
200105f2:	fba2 2303 	umull	r2, r3, r2, r3
200105f6:	095b      	lsrs	r3, r3, #5
200105f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
200105fc:	441e      	add	r6, r3
200105fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
20010602:	4618      	mov	r0, r3
20010604:	f04f 0100 	mov.w	r1, #0
20010608:	4602      	mov	r2, r0
2001060a:	460b      	mov	r3, r1
2001060c:	1894      	adds	r4, r2, r2
2001060e:	603c      	str	r4, [r7, #0]
20010610:	415b      	adcs	r3, r3
20010612:	607b      	str	r3, [r7, #4]
20010614:	e9d7 2300 	ldrd	r2, r3, [r7]
20010618:	1812      	adds	r2, r2, r0
2001061a:	eb41 0303 	adc.w	r3, r1, r3
2001061e:	f04f 0400 	mov.w	r4, #0
20010622:	f04f 0500 	mov.w	r5, #0
20010626:	00dd      	lsls	r5, r3, #3
20010628:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
2001062c:	00d4      	lsls	r4, r2, #3
2001062e:	4622      	mov	r2, r4
20010630:	462b      	mov	r3, r5
20010632:	1814      	adds	r4, r2, r0
20010634:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
20010638:	414b      	adcs	r3, r1
2001063a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
2001063e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
20010642:	685b      	ldr	r3, [r3, #4]
20010644:	4618      	mov	r0, r3
20010646:	f04f 0100 	mov.w	r1, #0
2001064a:	f04f 0200 	mov.w	r2, #0
2001064e:	f04f 0300 	mov.w	r3, #0
20010652:	008b      	lsls	r3, r1, #2
20010654:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
20010658:	0082      	lsls	r2, r0, #2
2001065a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
2001065e:	f7fc fe0f 	bl	2000d280 <__aeabi_uldivmod>
20010662:	4602      	mov	r2, r0
20010664:	460b      	mov	r3, r1
20010666:	4b0f      	ldr	r3, [pc, #60]	; (200106a4 <UART_SetConfig+0x734>)
20010668:	fba3 1302 	umull	r1, r3, r3, r2
2001066c:	095b      	lsrs	r3, r3, #5
2001066e:	2164      	movs	r1, #100	; 0x64
20010670:	fb01 f303 	mul.w	r3, r1, r3
20010674:	1ad3      	subs	r3, r2, r3
20010676:	011b      	lsls	r3, r3, #4
20010678:	3332      	adds	r3, #50	; 0x32
2001067a:	4a0a      	ldr	r2, [pc, #40]	; (200106a4 <UART_SetConfig+0x734>)
2001067c:	fba2 2303 	umull	r2, r3, r2, r3
20010680:	095b      	lsrs	r3, r3, #5
20010682:	f003 020f 	and.w	r2, r3, #15
20010686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
2001068a:	681b      	ldr	r3, [r3, #0]
2001068c:	4432      	add	r2, r6
2001068e:	609a      	str	r2, [r3, #8]
}
20010690:	e7ff      	b.n	20010692 <UART_SetConfig+0x722>
20010692:	bf00      	nop
20010694:	37f4      	adds	r7, #244	; 0xf4
20010696:	46bd      	mov	sp, r7
20010698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2001069c:	40011000 	.word	0x40011000
200106a0:	40011400 	.word	0x40011400
200106a4:	51eb851f 	.word	0x51eb851f

200106a8 <__errno>:
200106a8:	4b01      	ldr	r3, [pc, #4]	; (200106b0 <__errno+0x8>)
200106aa:	6818      	ldr	r0, [r3, #0]
200106ac:	4770      	bx	lr
200106ae:	bf00      	nop
200106b0:	20012080 	.word	0x20012080

200106b4 <__libc_init_array>:
200106b4:	b570      	push	{r4, r5, r6, lr}
200106b6:	4d0d      	ldr	r5, [pc, #52]	; (200106ec <__libc_init_array+0x38>)
200106b8:	4c0d      	ldr	r4, [pc, #52]	; (200106f0 <__libc_init_array+0x3c>)
200106ba:	1b64      	subs	r4, r4, r5
200106bc:	10a4      	asrs	r4, r4, #2
200106be:	2600      	movs	r6, #0
200106c0:	42a6      	cmp	r6, r4
200106c2:	d109      	bne.n	200106d8 <__libc_init_array+0x24>
200106c4:	4d0b      	ldr	r5, [pc, #44]	; (200106f4 <__libc_init_array+0x40>)
200106c6:	4c0c      	ldr	r4, [pc, #48]	; (200106f8 <__libc_init_array+0x44>)
200106c8:	f001 f956 	bl	20011978 <_init>
200106cc:	1b64      	subs	r4, r4, r5
200106ce:	10a4      	asrs	r4, r4, #2
200106d0:	2600      	movs	r6, #0
200106d2:	42a6      	cmp	r6, r4
200106d4:	d105      	bne.n	200106e2 <__libc_init_array+0x2e>
200106d6:	bd70      	pop	{r4, r5, r6, pc}
200106d8:	f855 3b04 	ldr.w	r3, [r5], #4
200106dc:	4798      	blx	r3
200106de:	3601      	adds	r6, #1
200106e0:	e7ee      	b.n	200106c0 <__libc_init_array+0xc>
200106e2:	f855 3b04 	ldr.w	r3, [r5], #4
200106e6:	4798      	blx	r3
200106e8:	3601      	adds	r6, #1
200106ea:	e7f2      	b.n	200106d2 <__libc_init_array+0x1e>
200106ec:	2001205c 	.word	0x2001205c
200106f0:	2001205c 	.word	0x2001205c
200106f4:	2001205c 	.word	0x2001205c
200106f8:	20012060 	.word	0x20012060

200106fc <memset>:
200106fc:	4402      	add	r2, r0
200106fe:	4603      	mov	r3, r0
20010700:	4293      	cmp	r3, r2
20010702:	d100      	bne.n	20010706 <memset+0xa>
20010704:	4770      	bx	lr
20010706:	f803 1b01 	strb.w	r1, [r3], #1
2001070a:	e7f9      	b.n	20010700 <memset+0x4>

2001070c <siprintf>:
2001070c:	b40e      	push	{r1, r2, r3}
2001070e:	b500      	push	{lr}
20010710:	b09c      	sub	sp, #112	; 0x70
20010712:	ab1d      	add	r3, sp, #116	; 0x74
20010714:	9002      	str	r0, [sp, #8]
20010716:	9006      	str	r0, [sp, #24]
20010718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2001071c:	4809      	ldr	r0, [pc, #36]	; (20010744 <siprintf+0x38>)
2001071e:	9107      	str	r1, [sp, #28]
20010720:	9104      	str	r1, [sp, #16]
20010722:	4909      	ldr	r1, [pc, #36]	; (20010748 <siprintf+0x3c>)
20010724:	f853 2b04 	ldr.w	r2, [r3], #4
20010728:	9105      	str	r1, [sp, #20]
2001072a:	6800      	ldr	r0, [r0, #0]
2001072c:	9301      	str	r3, [sp, #4]
2001072e:	a902      	add	r1, sp, #8
20010730:	f000 f8da 	bl	200108e8 <_svfiprintf_r>
20010734:	9b02      	ldr	r3, [sp, #8]
20010736:	2200      	movs	r2, #0
20010738:	701a      	strb	r2, [r3, #0]
2001073a:	b01c      	add	sp, #112	; 0x70
2001073c:	f85d eb04 	ldr.w	lr, [sp], #4
20010740:	b003      	add	sp, #12
20010742:	4770      	bx	lr
20010744:	20012080 	.word	0x20012080
20010748:	ffff0208 	.word	0xffff0208

2001074c <siscanf>:
2001074c:	b40e      	push	{r1, r2, r3}
2001074e:	b510      	push	{r4, lr}
20010750:	b09f      	sub	sp, #124	; 0x7c
20010752:	ac21      	add	r4, sp, #132	; 0x84
20010754:	f44f 7101 	mov.w	r1, #516	; 0x204
20010758:	f854 2b04 	ldr.w	r2, [r4], #4
2001075c:	9201      	str	r2, [sp, #4]
2001075e:	f8ad 101c 	strh.w	r1, [sp, #28]
20010762:	9004      	str	r0, [sp, #16]
20010764:	9008      	str	r0, [sp, #32]
20010766:	f7fc fd33 	bl	2000d1d0 <strlen>
2001076a:	4b0c      	ldr	r3, [pc, #48]	; (2001079c <siscanf+0x50>)
2001076c:	9005      	str	r0, [sp, #20]
2001076e:	9009      	str	r0, [sp, #36]	; 0x24
20010770:	930d      	str	r3, [sp, #52]	; 0x34
20010772:	480b      	ldr	r0, [pc, #44]	; (200107a0 <siscanf+0x54>)
20010774:	9a01      	ldr	r2, [sp, #4]
20010776:	6800      	ldr	r0, [r0, #0]
20010778:	9403      	str	r4, [sp, #12]
2001077a:	2300      	movs	r3, #0
2001077c:	9311      	str	r3, [sp, #68]	; 0x44
2001077e:	9316      	str	r3, [sp, #88]	; 0x58
20010780:	f64f 73ff 	movw	r3, #65535	; 0xffff
20010784:	f8ad 301e 	strh.w	r3, [sp, #30]
20010788:	a904      	add	r1, sp, #16
2001078a:	4623      	mov	r3, r4
2001078c:	f000 fa06 	bl	20010b9c <__ssvfiscanf_r>
20010790:	b01f      	add	sp, #124	; 0x7c
20010792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
20010796:	b003      	add	sp, #12
20010798:	4770      	bx	lr
2001079a:	bf00      	nop
2001079c:	200107a5 	.word	0x200107a5
200107a0:	20012080 	.word	0x20012080

200107a4 <__seofread>:
200107a4:	2000      	movs	r0, #0
200107a6:	4770      	bx	lr

200107a8 <strchr>:
200107a8:	b2c9      	uxtb	r1, r1
200107aa:	4603      	mov	r3, r0
200107ac:	f810 2b01 	ldrb.w	r2, [r0], #1
200107b0:	b11a      	cbz	r2, 200107ba <strchr+0x12>
200107b2:	428a      	cmp	r2, r1
200107b4:	d1f9      	bne.n	200107aa <strchr+0x2>
200107b6:	4618      	mov	r0, r3
200107b8:	4770      	bx	lr
200107ba:	2900      	cmp	r1, #0
200107bc:	bf18      	it	ne
200107be:	2300      	movne	r3, #0
200107c0:	e7f9      	b.n	200107b6 <strchr+0xe>

200107c2 <strstr>:
200107c2:	b5f0      	push	{r4, r5, r6, r7, lr}
200107c4:	780c      	ldrb	r4, [r1, #0]
200107c6:	b164      	cbz	r4, 200107e2 <strstr+0x20>
200107c8:	4603      	mov	r3, r0
200107ca:	781a      	ldrb	r2, [r3, #0]
200107cc:	4618      	mov	r0, r3
200107ce:	1c5e      	adds	r6, r3, #1
200107d0:	b90a      	cbnz	r2, 200107d6 <strstr+0x14>
200107d2:	4610      	mov	r0, r2
200107d4:	e005      	b.n	200107e2 <strstr+0x20>
200107d6:	4294      	cmp	r4, r2
200107d8:	d108      	bne.n	200107ec <strstr+0x2a>
200107da:	460d      	mov	r5, r1
200107dc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
200107e0:	b902      	cbnz	r2, 200107e4 <strstr+0x22>
200107e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
200107e4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
200107e8:	4297      	cmp	r7, r2
200107ea:	d0f7      	beq.n	200107dc <strstr+0x1a>
200107ec:	4633      	mov	r3, r6
200107ee:	e7ec      	b.n	200107ca <strstr+0x8>

200107f0 <_vsiprintf_r>:
200107f0:	b500      	push	{lr}
200107f2:	b09b      	sub	sp, #108	; 0x6c
200107f4:	9100      	str	r1, [sp, #0]
200107f6:	9104      	str	r1, [sp, #16]
200107f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
200107fc:	9105      	str	r1, [sp, #20]
200107fe:	9102      	str	r1, [sp, #8]
20010800:	4905      	ldr	r1, [pc, #20]	; (20010818 <_vsiprintf_r+0x28>)
20010802:	9103      	str	r1, [sp, #12]
20010804:	4669      	mov	r1, sp
20010806:	f000 f86f 	bl	200108e8 <_svfiprintf_r>
2001080a:	9b00      	ldr	r3, [sp, #0]
2001080c:	2200      	movs	r2, #0
2001080e:	701a      	strb	r2, [r3, #0]
20010810:	b01b      	add	sp, #108	; 0x6c
20010812:	f85d fb04 	ldr.w	pc, [sp], #4
20010816:	bf00      	nop
20010818:	ffff0208 	.word	0xffff0208

2001081c <vsiprintf>:
2001081c:	4613      	mov	r3, r2
2001081e:	460a      	mov	r2, r1
20010820:	4601      	mov	r1, r0
20010822:	4802      	ldr	r0, [pc, #8]	; (2001082c <vsiprintf+0x10>)
20010824:	6800      	ldr	r0, [r0, #0]
20010826:	f7ff bfe3 	b.w	200107f0 <_vsiprintf_r>
2001082a:	bf00      	nop
2001082c:	20012080 	.word	0x20012080

20010830 <__ssputs_r>:
20010830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20010834:	688e      	ldr	r6, [r1, #8]
20010836:	429e      	cmp	r6, r3
20010838:	4682      	mov	sl, r0
2001083a:	460c      	mov	r4, r1
2001083c:	4690      	mov	r8, r2
2001083e:	461f      	mov	r7, r3
20010840:	d838      	bhi.n	200108b4 <__ssputs_r+0x84>
20010842:	898a      	ldrh	r2, [r1, #12]
20010844:	f412 6f90 	tst.w	r2, #1152	; 0x480
20010848:	d032      	beq.n	200108b0 <__ssputs_r+0x80>
2001084a:	6825      	ldr	r5, [r4, #0]
2001084c:	6909      	ldr	r1, [r1, #16]
2001084e:	eba5 0901 	sub.w	r9, r5, r1
20010852:	6965      	ldr	r5, [r4, #20]
20010854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
20010858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2001085c:	3301      	adds	r3, #1
2001085e:	444b      	add	r3, r9
20010860:	106d      	asrs	r5, r5, #1
20010862:	429d      	cmp	r5, r3
20010864:	bf38      	it	cc
20010866:	461d      	movcc	r5, r3
20010868:	0553      	lsls	r3, r2, #21
2001086a:	d531      	bpl.n	200108d0 <__ssputs_r+0xa0>
2001086c:	4629      	mov	r1, r5
2001086e:	f000 ffdf 	bl	20011830 <_malloc_r>
20010872:	4606      	mov	r6, r0
20010874:	b950      	cbnz	r0, 2001088c <__ssputs_r+0x5c>
20010876:	230c      	movs	r3, #12
20010878:	f8ca 3000 	str.w	r3, [sl]
2001087c:	89a3      	ldrh	r3, [r4, #12]
2001087e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20010882:	81a3      	strh	r3, [r4, #12]
20010884:	f04f 30ff 	mov.w	r0, #4294967295
20010888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2001088c:	6921      	ldr	r1, [r4, #16]
2001088e:	464a      	mov	r2, r9
20010890:	f000 ff56 	bl	20011740 <memcpy>
20010894:	89a3      	ldrh	r3, [r4, #12]
20010896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2001089a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2001089e:	81a3      	strh	r3, [r4, #12]
200108a0:	6126      	str	r6, [r4, #16]
200108a2:	6165      	str	r5, [r4, #20]
200108a4:	444e      	add	r6, r9
200108a6:	eba5 0509 	sub.w	r5, r5, r9
200108aa:	6026      	str	r6, [r4, #0]
200108ac:	60a5      	str	r5, [r4, #8]
200108ae:	463e      	mov	r6, r7
200108b0:	42be      	cmp	r6, r7
200108b2:	d900      	bls.n	200108b6 <__ssputs_r+0x86>
200108b4:	463e      	mov	r6, r7
200108b6:	4632      	mov	r2, r6
200108b8:	6820      	ldr	r0, [r4, #0]
200108ba:	4641      	mov	r1, r8
200108bc:	f000 ff4e 	bl	2001175c <memmove>
200108c0:	68a3      	ldr	r3, [r4, #8]
200108c2:	6822      	ldr	r2, [r4, #0]
200108c4:	1b9b      	subs	r3, r3, r6
200108c6:	4432      	add	r2, r6
200108c8:	60a3      	str	r3, [r4, #8]
200108ca:	6022      	str	r2, [r4, #0]
200108cc:	2000      	movs	r0, #0
200108ce:	e7db      	b.n	20010888 <__ssputs_r+0x58>
200108d0:	462a      	mov	r2, r5
200108d2:	f001 f807 	bl	200118e4 <_realloc_r>
200108d6:	4606      	mov	r6, r0
200108d8:	2800      	cmp	r0, #0
200108da:	d1e1      	bne.n	200108a0 <__ssputs_r+0x70>
200108dc:	6921      	ldr	r1, [r4, #16]
200108de:	4650      	mov	r0, sl
200108e0:	f000 ff56 	bl	20011790 <_free_r>
200108e4:	e7c7      	b.n	20010876 <__ssputs_r+0x46>
	...

200108e8 <_svfiprintf_r>:
200108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
200108ec:	4698      	mov	r8, r3
200108ee:	898b      	ldrh	r3, [r1, #12]
200108f0:	061b      	lsls	r3, r3, #24
200108f2:	b09d      	sub	sp, #116	; 0x74
200108f4:	4607      	mov	r7, r0
200108f6:	460d      	mov	r5, r1
200108f8:	4614      	mov	r4, r2
200108fa:	d50e      	bpl.n	2001091a <_svfiprintf_r+0x32>
200108fc:	690b      	ldr	r3, [r1, #16]
200108fe:	b963      	cbnz	r3, 2001091a <_svfiprintf_r+0x32>
20010900:	2140      	movs	r1, #64	; 0x40
20010902:	f000 ff95 	bl	20011830 <_malloc_r>
20010906:	6028      	str	r0, [r5, #0]
20010908:	6128      	str	r0, [r5, #16]
2001090a:	b920      	cbnz	r0, 20010916 <_svfiprintf_r+0x2e>
2001090c:	230c      	movs	r3, #12
2001090e:	603b      	str	r3, [r7, #0]
20010910:	f04f 30ff 	mov.w	r0, #4294967295
20010914:	e0d1      	b.n	20010aba <_svfiprintf_r+0x1d2>
20010916:	2340      	movs	r3, #64	; 0x40
20010918:	616b      	str	r3, [r5, #20]
2001091a:	2300      	movs	r3, #0
2001091c:	9309      	str	r3, [sp, #36]	; 0x24
2001091e:	2320      	movs	r3, #32
20010920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
20010924:	f8cd 800c 	str.w	r8, [sp, #12]
20010928:	2330      	movs	r3, #48	; 0x30
2001092a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 20010ad4 <_svfiprintf_r+0x1ec>
2001092e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
20010932:	f04f 0901 	mov.w	r9, #1
20010936:	4623      	mov	r3, r4
20010938:	469a      	mov	sl, r3
2001093a:	f813 2b01 	ldrb.w	r2, [r3], #1
2001093e:	b10a      	cbz	r2, 20010944 <_svfiprintf_r+0x5c>
20010940:	2a25      	cmp	r2, #37	; 0x25
20010942:	d1f9      	bne.n	20010938 <_svfiprintf_r+0x50>
20010944:	ebba 0b04 	subs.w	fp, sl, r4
20010948:	d00b      	beq.n	20010962 <_svfiprintf_r+0x7a>
2001094a:	465b      	mov	r3, fp
2001094c:	4622      	mov	r2, r4
2001094e:	4629      	mov	r1, r5
20010950:	4638      	mov	r0, r7
20010952:	f7ff ff6d 	bl	20010830 <__ssputs_r>
20010956:	3001      	adds	r0, #1
20010958:	f000 80aa 	beq.w	20010ab0 <_svfiprintf_r+0x1c8>
2001095c:	9a09      	ldr	r2, [sp, #36]	; 0x24
2001095e:	445a      	add	r2, fp
20010960:	9209      	str	r2, [sp, #36]	; 0x24
20010962:	f89a 3000 	ldrb.w	r3, [sl]
20010966:	2b00      	cmp	r3, #0
20010968:	f000 80a2 	beq.w	20010ab0 <_svfiprintf_r+0x1c8>
2001096c:	2300      	movs	r3, #0
2001096e:	f04f 32ff 	mov.w	r2, #4294967295
20010972:	e9cd 2305 	strd	r2, r3, [sp, #20]
20010976:	f10a 0a01 	add.w	sl, sl, #1
2001097a:	9304      	str	r3, [sp, #16]
2001097c:	9307      	str	r3, [sp, #28]
2001097e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
20010982:	931a      	str	r3, [sp, #104]	; 0x68
20010984:	4654      	mov	r4, sl
20010986:	2205      	movs	r2, #5
20010988:	f814 1b01 	ldrb.w	r1, [r4], #1
2001098c:	4851      	ldr	r0, [pc, #324]	; (20010ad4 <_svfiprintf_r+0x1ec>)
2001098e:	f7fc fc27 	bl	2000d1e0 <memchr>
20010992:	9a04      	ldr	r2, [sp, #16]
20010994:	b9d8      	cbnz	r0, 200109ce <_svfiprintf_r+0xe6>
20010996:	06d0      	lsls	r0, r2, #27
20010998:	bf44      	itt	mi
2001099a:	2320      	movmi	r3, #32
2001099c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
200109a0:	0711      	lsls	r1, r2, #28
200109a2:	bf44      	itt	mi
200109a4:	232b      	movmi	r3, #43	; 0x2b
200109a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
200109aa:	f89a 3000 	ldrb.w	r3, [sl]
200109ae:	2b2a      	cmp	r3, #42	; 0x2a
200109b0:	d015      	beq.n	200109de <_svfiprintf_r+0xf6>
200109b2:	9a07      	ldr	r2, [sp, #28]
200109b4:	4654      	mov	r4, sl
200109b6:	2000      	movs	r0, #0
200109b8:	f04f 0c0a 	mov.w	ip, #10
200109bc:	4621      	mov	r1, r4
200109be:	f811 3b01 	ldrb.w	r3, [r1], #1
200109c2:	3b30      	subs	r3, #48	; 0x30
200109c4:	2b09      	cmp	r3, #9
200109c6:	d94e      	bls.n	20010a66 <_svfiprintf_r+0x17e>
200109c8:	b1b0      	cbz	r0, 200109f8 <_svfiprintf_r+0x110>
200109ca:	9207      	str	r2, [sp, #28]
200109cc:	e014      	b.n	200109f8 <_svfiprintf_r+0x110>
200109ce:	eba0 0308 	sub.w	r3, r0, r8
200109d2:	fa09 f303 	lsl.w	r3, r9, r3
200109d6:	4313      	orrs	r3, r2
200109d8:	9304      	str	r3, [sp, #16]
200109da:	46a2      	mov	sl, r4
200109dc:	e7d2      	b.n	20010984 <_svfiprintf_r+0x9c>
200109de:	9b03      	ldr	r3, [sp, #12]
200109e0:	1d19      	adds	r1, r3, #4
200109e2:	681b      	ldr	r3, [r3, #0]
200109e4:	9103      	str	r1, [sp, #12]
200109e6:	2b00      	cmp	r3, #0
200109e8:	bfbb      	ittet	lt
200109ea:	425b      	neglt	r3, r3
200109ec:	f042 0202 	orrlt.w	r2, r2, #2
200109f0:	9307      	strge	r3, [sp, #28]
200109f2:	9307      	strlt	r3, [sp, #28]
200109f4:	bfb8      	it	lt
200109f6:	9204      	strlt	r2, [sp, #16]
200109f8:	7823      	ldrb	r3, [r4, #0]
200109fa:	2b2e      	cmp	r3, #46	; 0x2e
200109fc:	d10c      	bne.n	20010a18 <_svfiprintf_r+0x130>
200109fe:	7863      	ldrb	r3, [r4, #1]
20010a00:	2b2a      	cmp	r3, #42	; 0x2a
20010a02:	d135      	bne.n	20010a70 <_svfiprintf_r+0x188>
20010a04:	9b03      	ldr	r3, [sp, #12]
20010a06:	1d1a      	adds	r2, r3, #4
20010a08:	681b      	ldr	r3, [r3, #0]
20010a0a:	9203      	str	r2, [sp, #12]
20010a0c:	2b00      	cmp	r3, #0
20010a0e:	bfb8      	it	lt
20010a10:	f04f 33ff 	movlt.w	r3, #4294967295
20010a14:	3402      	adds	r4, #2
20010a16:	9305      	str	r3, [sp, #20]
20010a18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 20010ae4 <_svfiprintf_r+0x1fc>
20010a1c:	7821      	ldrb	r1, [r4, #0]
20010a1e:	2203      	movs	r2, #3
20010a20:	4650      	mov	r0, sl
20010a22:	f7fc fbdd 	bl	2000d1e0 <memchr>
20010a26:	b140      	cbz	r0, 20010a3a <_svfiprintf_r+0x152>
20010a28:	2340      	movs	r3, #64	; 0x40
20010a2a:	eba0 000a 	sub.w	r0, r0, sl
20010a2e:	fa03 f000 	lsl.w	r0, r3, r0
20010a32:	9b04      	ldr	r3, [sp, #16]
20010a34:	4303      	orrs	r3, r0
20010a36:	3401      	adds	r4, #1
20010a38:	9304      	str	r3, [sp, #16]
20010a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
20010a3e:	4826      	ldr	r0, [pc, #152]	; (20010ad8 <_svfiprintf_r+0x1f0>)
20010a40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
20010a44:	2206      	movs	r2, #6
20010a46:	f7fc fbcb 	bl	2000d1e0 <memchr>
20010a4a:	2800      	cmp	r0, #0
20010a4c:	d038      	beq.n	20010ac0 <_svfiprintf_r+0x1d8>
20010a4e:	4b23      	ldr	r3, [pc, #140]	; (20010adc <_svfiprintf_r+0x1f4>)
20010a50:	bb1b      	cbnz	r3, 20010a9a <_svfiprintf_r+0x1b2>
20010a52:	9b03      	ldr	r3, [sp, #12]
20010a54:	3307      	adds	r3, #7
20010a56:	f023 0307 	bic.w	r3, r3, #7
20010a5a:	3308      	adds	r3, #8
20010a5c:	9303      	str	r3, [sp, #12]
20010a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
20010a60:	4433      	add	r3, r6
20010a62:	9309      	str	r3, [sp, #36]	; 0x24
20010a64:	e767      	b.n	20010936 <_svfiprintf_r+0x4e>
20010a66:	fb0c 3202 	mla	r2, ip, r2, r3
20010a6a:	460c      	mov	r4, r1
20010a6c:	2001      	movs	r0, #1
20010a6e:	e7a5      	b.n	200109bc <_svfiprintf_r+0xd4>
20010a70:	2300      	movs	r3, #0
20010a72:	3401      	adds	r4, #1
20010a74:	9305      	str	r3, [sp, #20]
20010a76:	4619      	mov	r1, r3
20010a78:	f04f 0c0a 	mov.w	ip, #10
20010a7c:	4620      	mov	r0, r4
20010a7e:	f810 2b01 	ldrb.w	r2, [r0], #1
20010a82:	3a30      	subs	r2, #48	; 0x30
20010a84:	2a09      	cmp	r2, #9
20010a86:	d903      	bls.n	20010a90 <_svfiprintf_r+0x1a8>
20010a88:	2b00      	cmp	r3, #0
20010a8a:	d0c5      	beq.n	20010a18 <_svfiprintf_r+0x130>
20010a8c:	9105      	str	r1, [sp, #20]
20010a8e:	e7c3      	b.n	20010a18 <_svfiprintf_r+0x130>
20010a90:	fb0c 2101 	mla	r1, ip, r1, r2
20010a94:	4604      	mov	r4, r0
20010a96:	2301      	movs	r3, #1
20010a98:	e7f0      	b.n	20010a7c <_svfiprintf_r+0x194>
20010a9a:	ab03      	add	r3, sp, #12
20010a9c:	9300      	str	r3, [sp, #0]
20010a9e:	462a      	mov	r2, r5
20010aa0:	4b0f      	ldr	r3, [pc, #60]	; (20010ae0 <_svfiprintf_r+0x1f8>)
20010aa2:	a904      	add	r1, sp, #16
20010aa4:	4638      	mov	r0, r7
20010aa6:	f3af 8000 	nop.w
20010aaa:	1c42      	adds	r2, r0, #1
20010aac:	4606      	mov	r6, r0
20010aae:	d1d6      	bne.n	20010a5e <_svfiprintf_r+0x176>
20010ab0:	89ab      	ldrh	r3, [r5, #12]
20010ab2:	065b      	lsls	r3, r3, #25
20010ab4:	f53f af2c 	bmi.w	20010910 <_svfiprintf_r+0x28>
20010ab8:	9809      	ldr	r0, [sp, #36]	; 0x24
20010aba:	b01d      	add	sp, #116	; 0x74
20010abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20010ac0:	ab03      	add	r3, sp, #12
20010ac2:	9300      	str	r3, [sp, #0]
20010ac4:	462a      	mov	r2, r5
20010ac6:	4b06      	ldr	r3, [pc, #24]	; (20010ae0 <_svfiprintf_r+0x1f8>)
20010ac8:	a904      	add	r1, sp, #16
20010aca:	4638      	mov	r0, r7
20010acc:	f000 fa4c 	bl	20010f68 <_printf_i>
20010ad0:	e7eb      	b.n	20010aaa <_svfiprintf_r+0x1c2>
20010ad2:	bf00      	nop
20010ad4:	20011fa5 	.word	0x20011fa5
20010ad8:	20011faf 	.word	0x20011faf
20010adc:	00000000 	.word	0x00000000
20010ae0:	20010831 	.word	0x20010831
20010ae4:	20011fab 	.word	0x20011fab

20010ae8 <_sungetc_r>:
20010ae8:	b538      	push	{r3, r4, r5, lr}
20010aea:	1c4b      	adds	r3, r1, #1
20010aec:	4614      	mov	r4, r2
20010aee:	d103      	bne.n	20010af8 <_sungetc_r+0x10>
20010af0:	f04f 35ff 	mov.w	r5, #4294967295
20010af4:	4628      	mov	r0, r5
20010af6:	bd38      	pop	{r3, r4, r5, pc}
20010af8:	8993      	ldrh	r3, [r2, #12]
20010afa:	f023 0320 	bic.w	r3, r3, #32
20010afe:	8193      	strh	r3, [r2, #12]
20010b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
20010b02:	6852      	ldr	r2, [r2, #4]
20010b04:	b2cd      	uxtb	r5, r1
20010b06:	b18b      	cbz	r3, 20010b2c <_sungetc_r+0x44>
20010b08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
20010b0a:	4293      	cmp	r3, r2
20010b0c:	dd08      	ble.n	20010b20 <_sungetc_r+0x38>
20010b0e:	6823      	ldr	r3, [r4, #0]
20010b10:	1e5a      	subs	r2, r3, #1
20010b12:	6022      	str	r2, [r4, #0]
20010b14:	f803 5c01 	strb.w	r5, [r3, #-1]
20010b18:	6863      	ldr	r3, [r4, #4]
20010b1a:	3301      	adds	r3, #1
20010b1c:	6063      	str	r3, [r4, #4]
20010b1e:	e7e9      	b.n	20010af4 <_sungetc_r+0xc>
20010b20:	4621      	mov	r1, r4
20010b22:	f000 fdd1 	bl	200116c8 <__submore>
20010b26:	2800      	cmp	r0, #0
20010b28:	d0f1      	beq.n	20010b0e <_sungetc_r+0x26>
20010b2a:	e7e1      	b.n	20010af0 <_sungetc_r+0x8>
20010b2c:	6921      	ldr	r1, [r4, #16]
20010b2e:	6823      	ldr	r3, [r4, #0]
20010b30:	b151      	cbz	r1, 20010b48 <_sungetc_r+0x60>
20010b32:	4299      	cmp	r1, r3
20010b34:	d208      	bcs.n	20010b48 <_sungetc_r+0x60>
20010b36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
20010b3a:	42a9      	cmp	r1, r5
20010b3c:	d104      	bne.n	20010b48 <_sungetc_r+0x60>
20010b3e:	3b01      	subs	r3, #1
20010b40:	3201      	adds	r2, #1
20010b42:	6023      	str	r3, [r4, #0]
20010b44:	6062      	str	r2, [r4, #4]
20010b46:	e7d5      	b.n	20010af4 <_sungetc_r+0xc>
20010b48:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
20010b4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
20010b50:	6363      	str	r3, [r4, #52]	; 0x34
20010b52:	2303      	movs	r3, #3
20010b54:	63a3      	str	r3, [r4, #56]	; 0x38
20010b56:	4623      	mov	r3, r4
20010b58:	f803 5f46 	strb.w	r5, [r3, #70]!
20010b5c:	6023      	str	r3, [r4, #0]
20010b5e:	2301      	movs	r3, #1
20010b60:	e7dc      	b.n	20010b1c <_sungetc_r+0x34>

20010b62 <__ssrefill_r>:
20010b62:	b510      	push	{r4, lr}
20010b64:	460c      	mov	r4, r1
20010b66:	6b49      	ldr	r1, [r1, #52]	; 0x34
20010b68:	b169      	cbz	r1, 20010b86 <__ssrefill_r+0x24>
20010b6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
20010b6e:	4299      	cmp	r1, r3
20010b70:	d001      	beq.n	20010b76 <__ssrefill_r+0x14>
20010b72:	f000 fe0d 	bl	20011790 <_free_r>
20010b76:	6c23      	ldr	r3, [r4, #64]	; 0x40
20010b78:	6063      	str	r3, [r4, #4]
20010b7a:	2000      	movs	r0, #0
20010b7c:	6360      	str	r0, [r4, #52]	; 0x34
20010b7e:	b113      	cbz	r3, 20010b86 <__ssrefill_r+0x24>
20010b80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
20010b82:	6023      	str	r3, [r4, #0]
20010b84:	bd10      	pop	{r4, pc}
20010b86:	6923      	ldr	r3, [r4, #16]
20010b88:	6023      	str	r3, [r4, #0]
20010b8a:	2300      	movs	r3, #0
20010b8c:	6063      	str	r3, [r4, #4]
20010b8e:	89a3      	ldrh	r3, [r4, #12]
20010b90:	f043 0320 	orr.w	r3, r3, #32
20010b94:	81a3      	strh	r3, [r4, #12]
20010b96:	f04f 30ff 	mov.w	r0, #4294967295
20010b9a:	e7f3      	b.n	20010b84 <__ssrefill_r+0x22>

20010b9c <__ssvfiscanf_r>:
20010b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20010ba0:	460c      	mov	r4, r1
20010ba2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
20010ba6:	2100      	movs	r1, #0
20010ba8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
20010bac:	49b2      	ldr	r1, [pc, #712]	; (20010e78 <__ssvfiscanf_r+0x2dc>)
20010bae:	91a0      	str	r1, [sp, #640]	; 0x280
20010bb0:	f10d 0804 	add.w	r8, sp, #4
20010bb4:	49b1      	ldr	r1, [pc, #708]	; (20010e7c <__ssvfiscanf_r+0x2e0>)
20010bb6:	4fb2      	ldr	r7, [pc, #712]	; (20010e80 <__ssvfiscanf_r+0x2e4>)
20010bb8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 20010e84 <__ssvfiscanf_r+0x2e8>
20010bbc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
20010bc0:	4606      	mov	r6, r0
20010bc2:	91a1      	str	r1, [sp, #644]	; 0x284
20010bc4:	9300      	str	r3, [sp, #0]
20010bc6:	f892 a000 	ldrb.w	sl, [r2]
20010bca:	f1ba 0f00 	cmp.w	sl, #0
20010bce:	f000 8151 	beq.w	20010e74 <__ssvfiscanf_r+0x2d8>
20010bd2:	f81a 3007 	ldrb.w	r3, [sl, r7]
20010bd6:	f013 0308 	ands.w	r3, r3, #8
20010bda:	f102 0501 	add.w	r5, r2, #1
20010bde:	d019      	beq.n	20010c14 <__ssvfiscanf_r+0x78>
20010be0:	6863      	ldr	r3, [r4, #4]
20010be2:	2b00      	cmp	r3, #0
20010be4:	dd0f      	ble.n	20010c06 <__ssvfiscanf_r+0x6a>
20010be6:	6823      	ldr	r3, [r4, #0]
20010be8:	781a      	ldrb	r2, [r3, #0]
20010bea:	5cba      	ldrb	r2, [r7, r2]
20010bec:	0712      	lsls	r2, r2, #28
20010bee:	d401      	bmi.n	20010bf4 <__ssvfiscanf_r+0x58>
20010bf0:	462a      	mov	r2, r5
20010bf2:	e7e8      	b.n	20010bc6 <__ssvfiscanf_r+0x2a>
20010bf4:	9a45      	ldr	r2, [sp, #276]	; 0x114
20010bf6:	3201      	adds	r2, #1
20010bf8:	9245      	str	r2, [sp, #276]	; 0x114
20010bfa:	6862      	ldr	r2, [r4, #4]
20010bfc:	3301      	adds	r3, #1
20010bfe:	3a01      	subs	r2, #1
20010c00:	6062      	str	r2, [r4, #4]
20010c02:	6023      	str	r3, [r4, #0]
20010c04:	e7ec      	b.n	20010be0 <__ssvfiscanf_r+0x44>
20010c06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
20010c08:	4621      	mov	r1, r4
20010c0a:	4630      	mov	r0, r6
20010c0c:	4798      	blx	r3
20010c0e:	2800      	cmp	r0, #0
20010c10:	d0e9      	beq.n	20010be6 <__ssvfiscanf_r+0x4a>
20010c12:	e7ed      	b.n	20010bf0 <__ssvfiscanf_r+0x54>
20010c14:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
20010c18:	f040 8083 	bne.w	20010d22 <__ssvfiscanf_r+0x186>
20010c1c:	9341      	str	r3, [sp, #260]	; 0x104
20010c1e:	9343      	str	r3, [sp, #268]	; 0x10c
20010c20:	7853      	ldrb	r3, [r2, #1]
20010c22:	2b2a      	cmp	r3, #42	; 0x2a
20010c24:	bf02      	ittt	eq
20010c26:	2310      	moveq	r3, #16
20010c28:	1c95      	addeq	r5, r2, #2
20010c2a:	9341      	streq	r3, [sp, #260]	; 0x104
20010c2c:	220a      	movs	r2, #10
20010c2e:	46ab      	mov	fp, r5
20010c30:	f81b 1b01 	ldrb.w	r1, [fp], #1
20010c34:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
20010c38:	2b09      	cmp	r3, #9
20010c3a:	d91d      	bls.n	20010c78 <__ssvfiscanf_r+0xdc>
20010c3c:	4891      	ldr	r0, [pc, #580]	; (20010e84 <__ssvfiscanf_r+0x2e8>)
20010c3e:	2203      	movs	r2, #3
20010c40:	f7fc face 	bl	2000d1e0 <memchr>
20010c44:	b140      	cbz	r0, 20010c58 <__ssvfiscanf_r+0xbc>
20010c46:	2301      	movs	r3, #1
20010c48:	eba0 0009 	sub.w	r0, r0, r9
20010c4c:	fa03 f000 	lsl.w	r0, r3, r0
20010c50:	9b41      	ldr	r3, [sp, #260]	; 0x104
20010c52:	4318      	orrs	r0, r3
20010c54:	9041      	str	r0, [sp, #260]	; 0x104
20010c56:	465d      	mov	r5, fp
20010c58:	f815 3b01 	ldrb.w	r3, [r5], #1
20010c5c:	2b78      	cmp	r3, #120	; 0x78
20010c5e:	d806      	bhi.n	20010c6e <__ssvfiscanf_r+0xd2>
20010c60:	2b57      	cmp	r3, #87	; 0x57
20010c62:	d810      	bhi.n	20010c86 <__ssvfiscanf_r+0xea>
20010c64:	2b25      	cmp	r3, #37	; 0x25
20010c66:	d05c      	beq.n	20010d22 <__ssvfiscanf_r+0x186>
20010c68:	d856      	bhi.n	20010d18 <__ssvfiscanf_r+0x17c>
20010c6a:	2b00      	cmp	r3, #0
20010c6c:	d074      	beq.n	20010d58 <__ssvfiscanf_r+0x1bc>
20010c6e:	2303      	movs	r3, #3
20010c70:	9347      	str	r3, [sp, #284]	; 0x11c
20010c72:	230a      	movs	r3, #10
20010c74:	9342      	str	r3, [sp, #264]	; 0x108
20010c76:	e081      	b.n	20010d7c <__ssvfiscanf_r+0x1e0>
20010c78:	9b43      	ldr	r3, [sp, #268]	; 0x10c
20010c7a:	fb02 1303 	mla	r3, r2, r3, r1
20010c7e:	3b30      	subs	r3, #48	; 0x30
20010c80:	9343      	str	r3, [sp, #268]	; 0x10c
20010c82:	465d      	mov	r5, fp
20010c84:	e7d3      	b.n	20010c2e <__ssvfiscanf_r+0x92>
20010c86:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
20010c8a:	2a20      	cmp	r2, #32
20010c8c:	d8ef      	bhi.n	20010c6e <__ssvfiscanf_r+0xd2>
20010c8e:	a101      	add	r1, pc, #4	; (adr r1, 20010c94 <__ssvfiscanf_r+0xf8>)
20010c90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
20010c94:	20010d67 	.word	0x20010d67
20010c98:	20010c6f 	.word	0x20010c6f
20010c9c:	20010c6f 	.word	0x20010c6f
20010ca0:	20010dc5 	.word	0x20010dc5
20010ca4:	20010c6f 	.word	0x20010c6f
20010ca8:	20010c6f 	.word	0x20010c6f
20010cac:	20010c6f 	.word	0x20010c6f
20010cb0:	20010c6f 	.word	0x20010c6f
20010cb4:	20010c6f 	.word	0x20010c6f
20010cb8:	20010c6f 	.word	0x20010c6f
20010cbc:	20010c6f 	.word	0x20010c6f
20010cc0:	20010ddb 	.word	0x20010ddb
20010cc4:	20010db1 	.word	0x20010db1
20010cc8:	20010d1f 	.word	0x20010d1f
20010ccc:	20010d1f 	.word	0x20010d1f
20010cd0:	20010d1f 	.word	0x20010d1f
20010cd4:	20010c6f 	.word	0x20010c6f
20010cd8:	20010db5 	.word	0x20010db5
20010cdc:	20010c6f 	.word	0x20010c6f
20010ce0:	20010c6f 	.word	0x20010c6f
20010ce4:	20010c6f 	.word	0x20010c6f
20010ce8:	20010c6f 	.word	0x20010c6f
20010cec:	20010deb 	.word	0x20010deb
20010cf0:	20010dbd 	.word	0x20010dbd
20010cf4:	20010d5f 	.word	0x20010d5f
20010cf8:	20010c6f 	.word	0x20010c6f
20010cfc:	20010c6f 	.word	0x20010c6f
20010d00:	20010de7 	.word	0x20010de7
20010d04:	20010c6f 	.word	0x20010c6f
20010d08:	20010db1 	.word	0x20010db1
20010d0c:	20010c6f 	.word	0x20010c6f
20010d10:	20010c6f 	.word	0x20010c6f
20010d14:	20010d67 	.word	0x20010d67
20010d18:	3b45      	subs	r3, #69	; 0x45
20010d1a:	2b02      	cmp	r3, #2
20010d1c:	d8a7      	bhi.n	20010c6e <__ssvfiscanf_r+0xd2>
20010d1e:	2305      	movs	r3, #5
20010d20:	e02b      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010d22:	6863      	ldr	r3, [r4, #4]
20010d24:	2b00      	cmp	r3, #0
20010d26:	dd0d      	ble.n	20010d44 <__ssvfiscanf_r+0x1a8>
20010d28:	6823      	ldr	r3, [r4, #0]
20010d2a:	781a      	ldrb	r2, [r3, #0]
20010d2c:	4552      	cmp	r2, sl
20010d2e:	f040 80a1 	bne.w	20010e74 <__ssvfiscanf_r+0x2d8>
20010d32:	3301      	adds	r3, #1
20010d34:	6862      	ldr	r2, [r4, #4]
20010d36:	6023      	str	r3, [r4, #0]
20010d38:	9b45      	ldr	r3, [sp, #276]	; 0x114
20010d3a:	3a01      	subs	r2, #1
20010d3c:	3301      	adds	r3, #1
20010d3e:	6062      	str	r2, [r4, #4]
20010d40:	9345      	str	r3, [sp, #276]	; 0x114
20010d42:	e755      	b.n	20010bf0 <__ssvfiscanf_r+0x54>
20010d44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
20010d46:	4621      	mov	r1, r4
20010d48:	4630      	mov	r0, r6
20010d4a:	4798      	blx	r3
20010d4c:	2800      	cmp	r0, #0
20010d4e:	d0eb      	beq.n	20010d28 <__ssvfiscanf_r+0x18c>
20010d50:	9844      	ldr	r0, [sp, #272]	; 0x110
20010d52:	2800      	cmp	r0, #0
20010d54:	f040 8084 	bne.w	20010e60 <__ssvfiscanf_r+0x2c4>
20010d58:	f04f 30ff 	mov.w	r0, #4294967295
20010d5c:	e086      	b.n	20010e6c <__ssvfiscanf_r+0x2d0>
20010d5e:	9a41      	ldr	r2, [sp, #260]	; 0x104
20010d60:	f042 0220 	orr.w	r2, r2, #32
20010d64:	9241      	str	r2, [sp, #260]	; 0x104
20010d66:	9a41      	ldr	r2, [sp, #260]	; 0x104
20010d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
20010d6c:	9241      	str	r2, [sp, #260]	; 0x104
20010d6e:	2210      	movs	r2, #16
20010d70:	2b6f      	cmp	r3, #111	; 0x6f
20010d72:	9242      	str	r2, [sp, #264]	; 0x108
20010d74:	bf34      	ite	cc
20010d76:	2303      	movcc	r3, #3
20010d78:	2304      	movcs	r3, #4
20010d7a:	9347      	str	r3, [sp, #284]	; 0x11c
20010d7c:	6863      	ldr	r3, [r4, #4]
20010d7e:	2b00      	cmp	r3, #0
20010d80:	dd41      	ble.n	20010e06 <__ssvfiscanf_r+0x26a>
20010d82:	9b41      	ldr	r3, [sp, #260]	; 0x104
20010d84:	0659      	lsls	r1, r3, #25
20010d86:	d404      	bmi.n	20010d92 <__ssvfiscanf_r+0x1f6>
20010d88:	6823      	ldr	r3, [r4, #0]
20010d8a:	781a      	ldrb	r2, [r3, #0]
20010d8c:	5cba      	ldrb	r2, [r7, r2]
20010d8e:	0712      	lsls	r2, r2, #28
20010d90:	d440      	bmi.n	20010e14 <__ssvfiscanf_r+0x278>
20010d92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
20010d94:	2b02      	cmp	r3, #2
20010d96:	dc4f      	bgt.n	20010e38 <__ssvfiscanf_r+0x29c>
20010d98:	466b      	mov	r3, sp
20010d9a:	4622      	mov	r2, r4
20010d9c:	a941      	add	r1, sp, #260	; 0x104
20010d9e:	4630      	mov	r0, r6
20010da0:	f000 fa08 	bl	200111b4 <_scanf_chars>
20010da4:	2801      	cmp	r0, #1
20010da6:	d065      	beq.n	20010e74 <__ssvfiscanf_r+0x2d8>
20010da8:	2802      	cmp	r0, #2
20010daa:	f47f af21 	bne.w	20010bf0 <__ssvfiscanf_r+0x54>
20010dae:	e7cf      	b.n	20010d50 <__ssvfiscanf_r+0x1b4>
20010db0:	220a      	movs	r2, #10
20010db2:	e7dd      	b.n	20010d70 <__ssvfiscanf_r+0x1d4>
20010db4:	2300      	movs	r3, #0
20010db6:	9342      	str	r3, [sp, #264]	; 0x108
20010db8:	2303      	movs	r3, #3
20010dba:	e7de      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010dbc:	2308      	movs	r3, #8
20010dbe:	9342      	str	r3, [sp, #264]	; 0x108
20010dc0:	2304      	movs	r3, #4
20010dc2:	e7da      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010dc4:	4629      	mov	r1, r5
20010dc6:	4640      	mov	r0, r8
20010dc8:	f000 fb40 	bl	2001144c <__sccl>
20010dcc:	9b41      	ldr	r3, [sp, #260]	; 0x104
20010dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20010dd2:	9341      	str	r3, [sp, #260]	; 0x104
20010dd4:	4605      	mov	r5, r0
20010dd6:	2301      	movs	r3, #1
20010dd8:	e7cf      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010dda:	9b41      	ldr	r3, [sp, #260]	; 0x104
20010ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
20010de0:	9341      	str	r3, [sp, #260]	; 0x104
20010de2:	2300      	movs	r3, #0
20010de4:	e7c9      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010de6:	2302      	movs	r3, #2
20010de8:	e7c7      	b.n	20010d7a <__ssvfiscanf_r+0x1de>
20010dea:	9841      	ldr	r0, [sp, #260]	; 0x104
20010dec:	06c3      	lsls	r3, r0, #27
20010dee:	f53f aeff 	bmi.w	20010bf0 <__ssvfiscanf_r+0x54>
20010df2:	9b00      	ldr	r3, [sp, #0]
20010df4:	9a45      	ldr	r2, [sp, #276]	; 0x114
20010df6:	1d19      	adds	r1, r3, #4
20010df8:	9100      	str	r1, [sp, #0]
20010dfa:	681b      	ldr	r3, [r3, #0]
20010dfc:	07c0      	lsls	r0, r0, #31
20010dfe:	bf4c      	ite	mi
20010e00:	801a      	strhmi	r2, [r3, #0]
20010e02:	601a      	strpl	r2, [r3, #0]
20010e04:	e6f4      	b.n	20010bf0 <__ssvfiscanf_r+0x54>
20010e06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
20010e08:	4621      	mov	r1, r4
20010e0a:	4630      	mov	r0, r6
20010e0c:	4798      	blx	r3
20010e0e:	2800      	cmp	r0, #0
20010e10:	d0b7      	beq.n	20010d82 <__ssvfiscanf_r+0x1e6>
20010e12:	e79d      	b.n	20010d50 <__ssvfiscanf_r+0x1b4>
20010e14:	9a45      	ldr	r2, [sp, #276]	; 0x114
20010e16:	3201      	adds	r2, #1
20010e18:	9245      	str	r2, [sp, #276]	; 0x114
20010e1a:	6862      	ldr	r2, [r4, #4]
20010e1c:	3a01      	subs	r2, #1
20010e1e:	2a00      	cmp	r2, #0
20010e20:	6062      	str	r2, [r4, #4]
20010e22:	dd02      	ble.n	20010e2a <__ssvfiscanf_r+0x28e>
20010e24:	3301      	adds	r3, #1
20010e26:	6023      	str	r3, [r4, #0]
20010e28:	e7ae      	b.n	20010d88 <__ssvfiscanf_r+0x1ec>
20010e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
20010e2c:	4621      	mov	r1, r4
20010e2e:	4630      	mov	r0, r6
20010e30:	4798      	blx	r3
20010e32:	2800      	cmp	r0, #0
20010e34:	d0a8      	beq.n	20010d88 <__ssvfiscanf_r+0x1ec>
20010e36:	e78b      	b.n	20010d50 <__ssvfiscanf_r+0x1b4>
20010e38:	2b04      	cmp	r3, #4
20010e3a:	dc06      	bgt.n	20010e4a <__ssvfiscanf_r+0x2ae>
20010e3c:	466b      	mov	r3, sp
20010e3e:	4622      	mov	r2, r4
20010e40:	a941      	add	r1, sp, #260	; 0x104
20010e42:	4630      	mov	r0, r6
20010e44:	f000 fa0e 	bl	20011264 <_scanf_i>
20010e48:	e7ac      	b.n	20010da4 <__ssvfiscanf_r+0x208>
20010e4a:	4b0f      	ldr	r3, [pc, #60]	; (20010e88 <__ssvfiscanf_r+0x2ec>)
20010e4c:	2b00      	cmp	r3, #0
20010e4e:	f43f aecf 	beq.w	20010bf0 <__ssvfiscanf_r+0x54>
20010e52:	466b      	mov	r3, sp
20010e54:	4622      	mov	r2, r4
20010e56:	a941      	add	r1, sp, #260	; 0x104
20010e58:	4630      	mov	r0, r6
20010e5a:	f3af 8000 	nop.w
20010e5e:	e7a1      	b.n	20010da4 <__ssvfiscanf_r+0x208>
20010e60:	89a3      	ldrh	r3, [r4, #12]
20010e62:	f013 0f40 	tst.w	r3, #64	; 0x40
20010e66:	bf18      	it	ne
20010e68:	f04f 30ff 	movne.w	r0, #4294967295
20010e6c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
20010e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20010e74:	9844      	ldr	r0, [sp, #272]	; 0x110
20010e76:	e7f9      	b.n	20010e6c <__ssvfiscanf_r+0x2d0>
20010e78:	20010ae9 	.word	0x20010ae9
20010e7c:	20010b63 	.word	0x20010b63
20010e80:	20011ea5 	.word	0x20011ea5
20010e84:	20011fab 	.word	0x20011fab
20010e88:	00000000 	.word	0x00000000

20010e8c <_printf_common>:
20010e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20010e90:	4616      	mov	r6, r2
20010e92:	4699      	mov	r9, r3
20010e94:	688a      	ldr	r2, [r1, #8]
20010e96:	690b      	ldr	r3, [r1, #16]
20010e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
20010e9c:	4293      	cmp	r3, r2
20010e9e:	bfb8      	it	lt
20010ea0:	4613      	movlt	r3, r2
20010ea2:	6033      	str	r3, [r6, #0]
20010ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
20010ea8:	4607      	mov	r7, r0
20010eaa:	460c      	mov	r4, r1
20010eac:	b10a      	cbz	r2, 20010eb2 <_printf_common+0x26>
20010eae:	3301      	adds	r3, #1
20010eb0:	6033      	str	r3, [r6, #0]
20010eb2:	6823      	ldr	r3, [r4, #0]
20010eb4:	0699      	lsls	r1, r3, #26
20010eb6:	bf42      	ittt	mi
20010eb8:	6833      	ldrmi	r3, [r6, #0]
20010eba:	3302      	addmi	r3, #2
20010ebc:	6033      	strmi	r3, [r6, #0]
20010ebe:	6825      	ldr	r5, [r4, #0]
20010ec0:	f015 0506 	ands.w	r5, r5, #6
20010ec4:	d106      	bne.n	20010ed4 <_printf_common+0x48>
20010ec6:	f104 0a19 	add.w	sl, r4, #25
20010eca:	68e3      	ldr	r3, [r4, #12]
20010ecc:	6832      	ldr	r2, [r6, #0]
20010ece:	1a9b      	subs	r3, r3, r2
20010ed0:	42ab      	cmp	r3, r5
20010ed2:	dc26      	bgt.n	20010f22 <_printf_common+0x96>
20010ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
20010ed8:	1e13      	subs	r3, r2, #0
20010eda:	6822      	ldr	r2, [r4, #0]
20010edc:	bf18      	it	ne
20010ede:	2301      	movne	r3, #1
20010ee0:	0692      	lsls	r2, r2, #26
20010ee2:	d42b      	bmi.n	20010f3c <_printf_common+0xb0>
20010ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
20010ee8:	4649      	mov	r1, r9
20010eea:	4638      	mov	r0, r7
20010eec:	47c0      	blx	r8
20010eee:	3001      	adds	r0, #1
20010ef0:	d01e      	beq.n	20010f30 <_printf_common+0xa4>
20010ef2:	6823      	ldr	r3, [r4, #0]
20010ef4:	68e5      	ldr	r5, [r4, #12]
20010ef6:	6832      	ldr	r2, [r6, #0]
20010ef8:	f003 0306 	and.w	r3, r3, #6
20010efc:	2b04      	cmp	r3, #4
20010efe:	bf08      	it	eq
20010f00:	1aad      	subeq	r5, r5, r2
20010f02:	68a3      	ldr	r3, [r4, #8]
20010f04:	6922      	ldr	r2, [r4, #16]
20010f06:	bf0c      	ite	eq
20010f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
20010f0c:	2500      	movne	r5, #0
20010f0e:	4293      	cmp	r3, r2
20010f10:	bfc4      	itt	gt
20010f12:	1a9b      	subgt	r3, r3, r2
20010f14:	18ed      	addgt	r5, r5, r3
20010f16:	2600      	movs	r6, #0
20010f18:	341a      	adds	r4, #26
20010f1a:	42b5      	cmp	r5, r6
20010f1c:	d11a      	bne.n	20010f54 <_printf_common+0xc8>
20010f1e:	2000      	movs	r0, #0
20010f20:	e008      	b.n	20010f34 <_printf_common+0xa8>
20010f22:	2301      	movs	r3, #1
20010f24:	4652      	mov	r2, sl
20010f26:	4649      	mov	r1, r9
20010f28:	4638      	mov	r0, r7
20010f2a:	47c0      	blx	r8
20010f2c:	3001      	adds	r0, #1
20010f2e:	d103      	bne.n	20010f38 <_printf_common+0xac>
20010f30:	f04f 30ff 	mov.w	r0, #4294967295
20010f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
20010f38:	3501      	adds	r5, #1
20010f3a:	e7c6      	b.n	20010eca <_printf_common+0x3e>
20010f3c:	18e1      	adds	r1, r4, r3
20010f3e:	1c5a      	adds	r2, r3, #1
20010f40:	2030      	movs	r0, #48	; 0x30
20010f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
20010f46:	4422      	add	r2, r4
20010f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
20010f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
20010f50:	3302      	adds	r3, #2
20010f52:	e7c7      	b.n	20010ee4 <_printf_common+0x58>
20010f54:	2301      	movs	r3, #1
20010f56:	4622      	mov	r2, r4
20010f58:	4649      	mov	r1, r9
20010f5a:	4638      	mov	r0, r7
20010f5c:	47c0      	blx	r8
20010f5e:	3001      	adds	r0, #1
20010f60:	d0e6      	beq.n	20010f30 <_printf_common+0xa4>
20010f62:	3601      	adds	r6, #1
20010f64:	e7d9      	b.n	20010f1a <_printf_common+0x8e>
	...

20010f68 <_printf_i>:
20010f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
20010f6c:	460c      	mov	r4, r1
20010f6e:	4691      	mov	r9, r2
20010f70:	7e27      	ldrb	r7, [r4, #24]
20010f72:	990c      	ldr	r1, [sp, #48]	; 0x30
20010f74:	2f78      	cmp	r7, #120	; 0x78
20010f76:	4680      	mov	r8, r0
20010f78:	469a      	mov	sl, r3
20010f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
20010f7e:	d807      	bhi.n	20010f90 <_printf_i+0x28>
20010f80:	2f62      	cmp	r7, #98	; 0x62
20010f82:	d80a      	bhi.n	20010f9a <_printf_i+0x32>
20010f84:	2f00      	cmp	r7, #0
20010f86:	f000 80d8 	beq.w	2001113a <_printf_i+0x1d2>
20010f8a:	2f58      	cmp	r7, #88	; 0x58
20010f8c:	f000 80a3 	beq.w	200110d6 <_printf_i+0x16e>
20010f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
20010f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
20010f98:	e03a      	b.n	20011010 <_printf_i+0xa8>
20010f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
20010f9e:	2b15      	cmp	r3, #21
20010fa0:	d8f6      	bhi.n	20010f90 <_printf_i+0x28>
20010fa2:	a001      	add	r0, pc, #4	; (adr r0, 20010fa8 <_printf_i+0x40>)
20010fa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
20010fa8:	20011001 	.word	0x20011001
20010fac:	20011015 	.word	0x20011015
20010fb0:	20010f91 	.word	0x20010f91
20010fb4:	20010f91 	.word	0x20010f91
20010fb8:	20010f91 	.word	0x20010f91
20010fbc:	20010f91 	.word	0x20010f91
20010fc0:	20011015 	.word	0x20011015
20010fc4:	20010f91 	.word	0x20010f91
20010fc8:	20010f91 	.word	0x20010f91
20010fcc:	20010f91 	.word	0x20010f91
20010fd0:	20010f91 	.word	0x20010f91
20010fd4:	20011121 	.word	0x20011121
20010fd8:	20011045 	.word	0x20011045
20010fdc:	20011103 	.word	0x20011103
20010fe0:	20010f91 	.word	0x20010f91
20010fe4:	20010f91 	.word	0x20010f91
20010fe8:	20011143 	.word	0x20011143
20010fec:	20010f91 	.word	0x20010f91
20010ff0:	20011045 	.word	0x20011045
20010ff4:	20010f91 	.word	0x20010f91
20010ff8:	20010f91 	.word	0x20010f91
20010ffc:	2001110b 	.word	0x2001110b
20011000:	680b      	ldr	r3, [r1, #0]
20011002:	1d1a      	adds	r2, r3, #4
20011004:	681b      	ldr	r3, [r3, #0]
20011006:	600a      	str	r2, [r1, #0]
20011008:	f104 0642 	add.w	r6, r4, #66	; 0x42
2001100c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
20011010:	2301      	movs	r3, #1
20011012:	e0a3      	b.n	2001115c <_printf_i+0x1f4>
20011014:	6825      	ldr	r5, [r4, #0]
20011016:	6808      	ldr	r0, [r1, #0]
20011018:	062e      	lsls	r6, r5, #24
2001101a:	f100 0304 	add.w	r3, r0, #4
2001101e:	d50a      	bpl.n	20011036 <_printf_i+0xce>
20011020:	6805      	ldr	r5, [r0, #0]
20011022:	600b      	str	r3, [r1, #0]
20011024:	2d00      	cmp	r5, #0
20011026:	da03      	bge.n	20011030 <_printf_i+0xc8>
20011028:	232d      	movs	r3, #45	; 0x2d
2001102a:	426d      	negs	r5, r5
2001102c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20011030:	485e      	ldr	r0, [pc, #376]	; (200111ac <_printf_i+0x244>)
20011032:	230a      	movs	r3, #10
20011034:	e019      	b.n	2001106a <_printf_i+0x102>
20011036:	f015 0f40 	tst.w	r5, #64	; 0x40
2001103a:	6805      	ldr	r5, [r0, #0]
2001103c:	600b      	str	r3, [r1, #0]
2001103e:	bf18      	it	ne
20011040:	b22d      	sxthne	r5, r5
20011042:	e7ef      	b.n	20011024 <_printf_i+0xbc>
20011044:	680b      	ldr	r3, [r1, #0]
20011046:	6825      	ldr	r5, [r4, #0]
20011048:	1d18      	adds	r0, r3, #4
2001104a:	6008      	str	r0, [r1, #0]
2001104c:	0628      	lsls	r0, r5, #24
2001104e:	d501      	bpl.n	20011054 <_printf_i+0xec>
20011050:	681d      	ldr	r5, [r3, #0]
20011052:	e002      	b.n	2001105a <_printf_i+0xf2>
20011054:	0669      	lsls	r1, r5, #25
20011056:	d5fb      	bpl.n	20011050 <_printf_i+0xe8>
20011058:	881d      	ldrh	r5, [r3, #0]
2001105a:	4854      	ldr	r0, [pc, #336]	; (200111ac <_printf_i+0x244>)
2001105c:	2f6f      	cmp	r7, #111	; 0x6f
2001105e:	bf0c      	ite	eq
20011060:	2308      	moveq	r3, #8
20011062:	230a      	movne	r3, #10
20011064:	2100      	movs	r1, #0
20011066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2001106a:	6866      	ldr	r6, [r4, #4]
2001106c:	60a6      	str	r6, [r4, #8]
2001106e:	2e00      	cmp	r6, #0
20011070:	bfa2      	ittt	ge
20011072:	6821      	ldrge	r1, [r4, #0]
20011074:	f021 0104 	bicge.w	r1, r1, #4
20011078:	6021      	strge	r1, [r4, #0]
2001107a:	b90d      	cbnz	r5, 20011080 <_printf_i+0x118>
2001107c:	2e00      	cmp	r6, #0
2001107e:	d04d      	beq.n	2001111c <_printf_i+0x1b4>
20011080:	4616      	mov	r6, r2
20011082:	fbb5 f1f3 	udiv	r1, r5, r3
20011086:	fb03 5711 	mls	r7, r3, r1, r5
2001108a:	5dc7      	ldrb	r7, [r0, r7]
2001108c:	f806 7d01 	strb.w	r7, [r6, #-1]!
20011090:	462f      	mov	r7, r5
20011092:	42bb      	cmp	r3, r7
20011094:	460d      	mov	r5, r1
20011096:	d9f4      	bls.n	20011082 <_printf_i+0x11a>
20011098:	2b08      	cmp	r3, #8
2001109a:	d10b      	bne.n	200110b4 <_printf_i+0x14c>
2001109c:	6823      	ldr	r3, [r4, #0]
2001109e:	07df      	lsls	r7, r3, #31
200110a0:	d508      	bpl.n	200110b4 <_printf_i+0x14c>
200110a2:	6923      	ldr	r3, [r4, #16]
200110a4:	6861      	ldr	r1, [r4, #4]
200110a6:	4299      	cmp	r1, r3
200110a8:	bfde      	ittt	le
200110aa:	2330      	movle	r3, #48	; 0x30
200110ac:	f806 3c01 	strble.w	r3, [r6, #-1]
200110b0:	f106 36ff 	addle.w	r6, r6, #4294967295
200110b4:	1b92      	subs	r2, r2, r6
200110b6:	6122      	str	r2, [r4, #16]
200110b8:	f8cd a000 	str.w	sl, [sp]
200110bc:	464b      	mov	r3, r9
200110be:	aa03      	add	r2, sp, #12
200110c0:	4621      	mov	r1, r4
200110c2:	4640      	mov	r0, r8
200110c4:	f7ff fee2 	bl	20010e8c <_printf_common>
200110c8:	3001      	adds	r0, #1
200110ca:	d14c      	bne.n	20011166 <_printf_i+0x1fe>
200110cc:	f04f 30ff 	mov.w	r0, #4294967295
200110d0:	b004      	add	sp, #16
200110d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200110d6:	4835      	ldr	r0, [pc, #212]	; (200111ac <_printf_i+0x244>)
200110d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
200110dc:	6823      	ldr	r3, [r4, #0]
200110de:	680e      	ldr	r6, [r1, #0]
200110e0:	061f      	lsls	r7, r3, #24
200110e2:	f856 5b04 	ldr.w	r5, [r6], #4
200110e6:	600e      	str	r6, [r1, #0]
200110e8:	d514      	bpl.n	20011114 <_printf_i+0x1ac>
200110ea:	07d9      	lsls	r1, r3, #31
200110ec:	bf44      	itt	mi
200110ee:	f043 0320 	orrmi.w	r3, r3, #32
200110f2:	6023      	strmi	r3, [r4, #0]
200110f4:	b91d      	cbnz	r5, 200110fe <_printf_i+0x196>
200110f6:	6823      	ldr	r3, [r4, #0]
200110f8:	f023 0320 	bic.w	r3, r3, #32
200110fc:	6023      	str	r3, [r4, #0]
200110fe:	2310      	movs	r3, #16
20011100:	e7b0      	b.n	20011064 <_printf_i+0xfc>
20011102:	6823      	ldr	r3, [r4, #0]
20011104:	f043 0320 	orr.w	r3, r3, #32
20011108:	6023      	str	r3, [r4, #0]
2001110a:	2378      	movs	r3, #120	; 0x78
2001110c:	4828      	ldr	r0, [pc, #160]	; (200111b0 <_printf_i+0x248>)
2001110e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
20011112:	e7e3      	b.n	200110dc <_printf_i+0x174>
20011114:	065e      	lsls	r6, r3, #25
20011116:	bf48      	it	mi
20011118:	b2ad      	uxthmi	r5, r5
2001111a:	e7e6      	b.n	200110ea <_printf_i+0x182>
2001111c:	4616      	mov	r6, r2
2001111e:	e7bb      	b.n	20011098 <_printf_i+0x130>
20011120:	680b      	ldr	r3, [r1, #0]
20011122:	6826      	ldr	r6, [r4, #0]
20011124:	6960      	ldr	r0, [r4, #20]
20011126:	1d1d      	adds	r5, r3, #4
20011128:	600d      	str	r5, [r1, #0]
2001112a:	0635      	lsls	r5, r6, #24
2001112c:	681b      	ldr	r3, [r3, #0]
2001112e:	d501      	bpl.n	20011134 <_printf_i+0x1cc>
20011130:	6018      	str	r0, [r3, #0]
20011132:	e002      	b.n	2001113a <_printf_i+0x1d2>
20011134:	0671      	lsls	r1, r6, #25
20011136:	d5fb      	bpl.n	20011130 <_printf_i+0x1c8>
20011138:	8018      	strh	r0, [r3, #0]
2001113a:	2300      	movs	r3, #0
2001113c:	6123      	str	r3, [r4, #16]
2001113e:	4616      	mov	r6, r2
20011140:	e7ba      	b.n	200110b8 <_printf_i+0x150>
20011142:	680b      	ldr	r3, [r1, #0]
20011144:	1d1a      	adds	r2, r3, #4
20011146:	600a      	str	r2, [r1, #0]
20011148:	681e      	ldr	r6, [r3, #0]
2001114a:	6862      	ldr	r2, [r4, #4]
2001114c:	2100      	movs	r1, #0
2001114e:	4630      	mov	r0, r6
20011150:	f7fc f846 	bl	2000d1e0 <memchr>
20011154:	b108      	cbz	r0, 2001115a <_printf_i+0x1f2>
20011156:	1b80      	subs	r0, r0, r6
20011158:	6060      	str	r0, [r4, #4]
2001115a:	6863      	ldr	r3, [r4, #4]
2001115c:	6123      	str	r3, [r4, #16]
2001115e:	2300      	movs	r3, #0
20011160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
20011164:	e7a8      	b.n	200110b8 <_printf_i+0x150>
20011166:	6923      	ldr	r3, [r4, #16]
20011168:	4632      	mov	r2, r6
2001116a:	4649      	mov	r1, r9
2001116c:	4640      	mov	r0, r8
2001116e:	47d0      	blx	sl
20011170:	3001      	adds	r0, #1
20011172:	d0ab      	beq.n	200110cc <_printf_i+0x164>
20011174:	6823      	ldr	r3, [r4, #0]
20011176:	079b      	lsls	r3, r3, #30
20011178:	d413      	bmi.n	200111a2 <_printf_i+0x23a>
2001117a:	68e0      	ldr	r0, [r4, #12]
2001117c:	9b03      	ldr	r3, [sp, #12]
2001117e:	4298      	cmp	r0, r3
20011180:	bfb8      	it	lt
20011182:	4618      	movlt	r0, r3
20011184:	e7a4      	b.n	200110d0 <_printf_i+0x168>
20011186:	2301      	movs	r3, #1
20011188:	4632      	mov	r2, r6
2001118a:	4649      	mov	r1, r9
2001118c:	4640      	mov	r0, r8
2001118e:	47d0      	blx	sl
20011190:	3001      	adds	r0, #1
20011192:	d09b      	beq.n	200110cc <_printf_i+0x164>
20011194:	3501      	adds	r5, #1
20011196:	68e3      	ldr	r3, [r4, #12]
20011198:	9903      	ldr	r1, [sp, #12]
2001119a:	1a5b      	subs	r3, r3, r1
2001119c:	42ab      	cmp	r3, r5
2001119e:	dcf2      	bgt.n	20011186 <_printf_i+0x21e>
200111a0:	e7eb      	b.n	2001117a <_printf_i+0x212>
200111a2:	2500      	movs	r5, #0
200111a4:	f104 0619 	add.w	r6, r4, #25
200111a8:	e7f5      	b.n	20011196 <_printf_i+0x22e>
200111aa:	bf00      	nop
200111ac:	20011fb6 	.word	0x20011fb6
200111b0:	20011fc7 	.word	0x20011fc7

200111b4 <_scanf_chars>:
200111b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
200111b8:	4615      	mov	r5, r2
200111ba:	688a      	ldr	r2, [r1, #8]
200111bc:	4680      	mov	r8, r0
200111be:	460c      	mov	r4, r1
200111c0:	b932      	cbnz	r2, 200111d0 <_scanf_chars+0x1c>
200111c2:	698a      	ldr	r2, [r1, #24]
200111c4:	2a00      	cmp	r2, #0
200111c6:	bf0c      	ite	eq
200111c8:	2201      	moveq	r2, #1
200111ca:	f04f 32ff 	movne.w	r2, #4294967295
200111ce:	608a      	str	r2, [r1, #8]
200111d0:	6822      	ldr	r2, [r4, #0]
200111d2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 20011260 <_scanf_chars+0xac>
200111d6:	06d1      	lsls	r1, r2, #27
200111d8:	bf5f      	itttt	pl
200111da:	681a      	ldrpl	r2, [r3, #0]
200111dc:	1d11      	addpl	r1, r2, #4
200111de:	6019      	strpl	r1, [r3, #0]
200111e0:	6816      	ldrpl	r6, [r2, #0]
200111e2:	2700      	movs	r7, #0
200111e4:	69a0      	ldr	r0, [r4, #24]
200111e6:	b188      	cbz	r0, 2001120c <_scanf_chars+0x58>
200111e8:	2801      	cmp	r0, #1
200111ea:	d107      	bne.n	200111fc <_scanf_chars+0x48>
200111ec:	682b      	ldr	r3, [r5, #0]
200111ee:	781a      	ldrb	r2, [r3, #0]
200111f0:	6963      	ldr	r3, [r4, #20]
200111f2:	5c9b      	ldrb	r3, [r3, r2]
200111f4:	b953      	cbnz	r3, 2001120c <_scanf_chars+0x58>
200111f6:	bb27      	cbnz	r7, 20011242 <_scanf_chars+0x8e>
200111f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
200111fc:	2802      	cmp	r0, #2
200111fe:	d120      	bne.n	20011242 <_scanf_chars+0x8e>
20011200:	682b      	ldr	r3, [r5, #0]
20011202:	781b      	ldrb	r3, [r3, #0]
20011204:	f813 3009 	ldrb.w	r3, [r3, r9]
20011208:	071b      	lsls	r3, r3, #28
2001120a:	d41a      	bmi.n	20011242 <_scanf_chars+0x8e>
2001120c:	6823      	ldr	r3, [r4, #0]
2001120e:	06da      	lsls	r2, r3, #27
20011210:	bf5e      	ittt	pl
20011212:	682b      	ldrpl	r3, [r5, #0]
20011214:	781b      	ldrbpl	r3, [r3, #0]
20011216:	f806 3b01 	strbpl.w	r3, [r6], #1
2001121a:	682a      	ldr	r2, [r5, #0]
2001121c:	686b      	ldr	r3, [r5, #4]
2001121e:	3201      	adds	r2, #1
20011220:	602a      	str	r2, [r5, #0]
20011222:	68a2      	ldr	r2, [r4, #8]
20011224:	3b01      	subs	r3, #1
20011226:	3a01      	subs	r2, #1
20011228:	606b      	str	r3, [r5, #4]
2001122a:	3701      	adds	r7, #1
2001122c:	60a2      	str	r2, [r4, #8]
2001122e:	b142      	cbz	r2, 20011242 <_scanf_chars+0x8e>
20011230:	2b00      	cmp	r3, #0
20011232:	dcd7      	bgt.n	200111e4 <_scanf_chars+0x30>
20011234:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
20011238:	4629      	mov	r1, r5
2001123a:	4640      	mov	r0, r8
2001123c:	4798      	blx	r3
2001123e:	2800      	cmp	r0, #0
20011240:	d0d0      	beq.n	200111e4 <_scanf_chars+0x30>
20011242:	6823      	ldr	r3, [r4, #0]
20011244:	f013 0310 	ands.w	r3, r3, #16
20011248:	d105      	bne.n	20011256 <_scanf_chars+0xa2>
2001124a:	68e2      	ldr	r2, [r4, #12]
2001124c:	3201      	adds	r2, #1
2001124e:	60e2      	str	r2, [r4, #12]
20011250:	69a2      	ldr	r2, [r4, #24]
20011252:	b102      	cbz	r2, 20011256 <_scanf_chars+0xa2>
20011254:	7033      	strb	r3, [r6, #0]
20011256:	6923      	ldr	r3, [r4, #16]
20011258:	441f      	add	r7, r3
2001125a:	6127      	str	r7, [r4, #16]
2001125c:	2000      	movs	r0, #0
2001125e:	e7cb      	b.n	200111f8 <_scanf_chars+0x44>
20011260:	20011ea5 	.word	0x20011ea5

20011264 <_scanf_i>:
20011264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
20011268:	4698      	mov	r8, r3
2001126a:	4b74      	ldr	r3, [pc, #464]	; (2001143c <_scanf_i+0x1d8>)
2001126c:	460c      	mov	r4, r1
2001126e:	4682      	mov	sl, r0
20011270:	4616      	mov	r6, r2
20011272:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
20011276:	b087      	sub	sp, #28
20011278:	ab03      	add	r3, sp, #12
2001127a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
2001127e:	4b70      	ldr	r3, [pc, #448]	; (20011440 <_scanf_i+0x1dc>)
20011280:	69a1      	ldr	r1, [r4, #24]
20011282:	4a70      	ldr	r2, [pc, #448]	; (20011444 <_scanf_i+0x1e0>)
20011284:	2903      	cmp	r1, #3
20011286:	bf18      	it	ne
20011288:	461a      	movne	r2, r3
2001128a:	68a3      	ldr	r3, [r4, #8]
2001128c:	9201      	str	r2, [sp, #4]
2001128e:	1e5a      	subs	r2, r3, #1
20011290:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
20011294:	bf88      	it	hi
20011296:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
2001129a:	4627      	mov	r7, r4
2001129c:	bf82      	ittt	hi
2001129e:	eb03 0905 	addhi.w	r9, r3, r5
200112a2:	f240 135d 	movwhi	r3, #349	; 0x15d
200112a6:	60a3      	strhi	r3, [r4, #8]
200112a8:	f857 3b1c 	ldr.w	r3, [r7], #28
200112ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
200112b0:	bf98      	it	ls
200112b2:	f04f 0900 	movls.w	r9, #0
200112b6:	6023      	str	r3, [r4, #0]
200112b8:	463d      	mov	r5, r7
200112ba:	f04f 0b00 	mov.w	fp, #0
200112be:	6831      	ldr	r1, [r6, #0]
200112c0:	ab03      	add	r3, sp, #12
200112c2:	7809      	ldrb	r1, [r1, #0]
200112c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
200112c8:	2202      	movs	r2, #2
200112ca:	f7fb ff89 	bl	2000d1e0 <memchr>
200112ce:	b328      	cbz	r0, 2001131c <_scanf_i+0xb8>
200112d0:	f1bb 0f01 	cmp.w	fp, #1
200112d4:	d159      	bne.n	2001138a <_scanf_i+0x126>
200112d6:	6862      	ldr	r2, [r4, #4]
200112d8:	b92a      	cbnz	r2, 200112e6 <_scanf_i+0x82>
200112da:	6822      	ldr	r2, [r4, #0]
200112dc:	2308      	movs	r3, #8
200112de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
200112e2:	6063      	str	r3, [r4, #4]
200112e4:	6022      	str	r2, [r4, #0]
200112e6:	6822      	ldr	r2, [r4, #0]
200112e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
200112ec:	6022      	str	r2, [r4, #0]
200112ee:	68a2      	ldr	r2, [r4, #8]
200112f0:	1e51      	subs	r1, r2, #1
200112f2:	60a1      	str	r1, [r4, #8]
200112f4:	b192      	cbz	r2, 2001131c <_scanf_i+0xb8>
200112f6:	6832      	ldr	r2, [r6, #0]
200112f8:	1c51      	adds	r1, r2, #1
200112fa:	6031      	str	r1, [r6, #0]
200112fc:	7812      	ldrb	r2, [r2, #0]
200112fe:	f805 2b01 	strb.w	r2, [r5], #1
20011302:	6872      	ldr	r2, [r6, #4]
20011304:	3a01      	subs	r2, #1
20011306:	2a00      	cmp	r2, #0
20011308:	6072      	str	r2, [r6, #4]
2001130a:	dc07      	bgt.n	2001131c <_scanf_i+0xb8>
2001130c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
20011310:	4631      	mov	r1, r6
20011312:	4650      	mov	r0, sl
20011314:	4790      	blx	r2
20011316:	2800      	cmp	r0, #0
20011318:	f040 8085 	bne.w	20011426 <_scanf_i+0x1c2>
2001131c:	f10b 0b01 	add.w	fp, fp, #1
20011320:	f1bb 0f03 	cmp.w	fp, #3
20011324:	d1cb      	bne.n	200112be <_scanf_i+0x5a>
20011326:	6863      	ldr	r3, [r4, #4]
20011328:	b90b      	cbnz	r3, 2001132e <_scanf_i+0xca>
2001132a:	230a      	movs	r3, #10
2001132c:	6063      	str	r3, [r4, #4]
2001132e:	6863      	ldr	r3, [r4, #4]
20011330:	4945      	ldr	r1, [pc, #276]	; (20011448 <_scanf_i+0x1e4>)
20011332:	6960      	ldr	r0, [r4, #20]
20011334:	1ac9      	subs	r1, r1, r3
20011336:	f000 f889 	bl	2001144c <__sccl>
2001133a:	f04f 0b00 	mov.w	fp, #0
2001133e:	68a3      	ldr	r3, [r4, #8]
20011340:	6822      	ldr	r2, [r4, #0]
20011342:	2b00      	cmp	r3, #0
20011344:	d03d      	beq.n	200113c2 <_scanf_i+0x15e>
20011346:	6831      	ldr	r1, [r6, #0]
20011348:	6960      	ldr	r0, [r4, #20]
2001134a:	f891 c000 	ldrb.w	ip, [r1]
2001134e:	f810 000c 	ldrb.w	r0, [r0, ip]
20011352:	2800      	cmp	r0, #0
20011354:	d035      	beq.n	200113c2 <_scanf_i+0x15e>
20011356:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
2001135a:	d124      	bne.n	200113a6 <_scanf_i+0x142>
2001135c:	0510      	lsls	r0, r2, #20
2001135e:	d522      	bpl.n	200113a6 <_scanf_i+0x142>
20011360:	f10b 0b01 	add.w	fp, fp, #1
20011364:	f1b9 0f00 	cmp.w	r9, #0
20011368:	d003      	beq.n	20011372 <_scanf_i+0x10e>
2001136a:	3301      	adds	r3, #1
2001136c:	f109 39ff 	add.w	r9, r9, #4294967295
20011370:	60a3      	str	r3, [r4, #8]
20011372:	6873      	ldr	r3, [r6, #4]
20011374:	3b01      	subs	r3, #1
20011376:	2b00      	cmp	r3, #0
20011378:	6073      	str	r3, [r6, #4]
2001137a:	dd1b      	ble.n	200113b4 <_scanf_i+0x150>
2001137c:	6833      	ldr	r3, [r6, #0]
2001137e:	3301      	adds	r3, #1
20011380:	6033      	str	r3, [r6, #0]
20011382:	68a3      	ldr	r3, [r4, #8]
20011384:	3b01      	subs	r3, #1
20011386:	60a3      	str	r3, [r4, #8]
20011388:	e7d9      	b.n	2001133e <_scanf_i+0xda>
2001138a:	f1bb 0f02 	cmp.w	fp, #2
2001138e:	d1ae      	bne.n	200112ee <_scanf_i+0x8a>
20011390:	6822      	ldr	r2, [r4, #0]
20011392:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
20011396:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
2001139a:	d1bf      	bne.n	2001131c <_scanf_i+0xb8>
2001139c:	2310      	movs	r3, #16
2001139e:	6063      	str	r3, [r4, #4]
200113a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
200113a4:	e7a2      	b.n	200112ec <_scanf_i+0x88>
200113a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
200113aa:	6022      	str	r2, [r4, #0]
200113ac:	780b      	ldrb	r3, [r1, #0]
200113ae:	f805 3b01 	strb.w	r3, [r5], #1
200113b2:	e7de      	b.n	20011372 <_scanf_i+0x10e>
200113b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
200113b8:	4631      	mov	r1, r6
200113ba:	4650      	mov	r0, sl
200113bc:	4798      	blx	r3
200113be:	2800      	cmp	r0, #0
200113c0:	d0df      	beq.n	20011382 <_scanf_i+0x11e>
200113c2:	6823      	ldr	r3, [r4, #0]
200113c4:	05d9      	lsls	r1, r3, #23
200113c6:	d50d      	bpl.n	200113e4 <_scanf_i+0x180>
200113c8:	42bd      	cmp	r5, r7
200113ca:	d909      	bls.n	200113e0 <_scanf_i+0x17c>
200113cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
200113d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
200113d4:	4632      	mov	r2, r6
200113d6:	4650      	mov	r0, sl
200113d8:	4798      	blx	r3
200113da:	f105 39ff 	add.w	r9, r5, #4294967295
200113de:	464d      	mov	r5, r9
200113e0:	42bd      	cmp	r5, r7
200113e2:	d028      	beq.n	20011436 <_scanf_i+0x1d2>
200113e4:	6822      	ldr	r2, [r4, #0]
200113e6:	f012 0210 	ands.w	r2, r2, #16
200113ea:	d113      	bne.n	20011414 <_scanf_i+0x1b0>
200113ec:	702a      	strb	r2, [r5, #0]
200113ee:	6863      	ldr	r3, [r4, #4]
200113f0:	9e01      	ldr	r6, [sp, #4]
200113f2:	4639      	mov	r1, r7
200113f4:	4650      	mov	r0, sl
200113f6:	47b0      	blx	r6
200113f8:	f8d8 3000 	ldr.w	r3, [r8]
200113fc:	6821      	ldr	r1, [r4, #0]
200113fe:	1d1a      	adds	r2, r3, #4
20011400:	f8c8 2000 	str.w	r2, [r8]
20011404:	f011 0f20 	tst.w	r1, #32
20011408:	681b      	ldr	r3, [r3, #0]
2001140a:	d00f      	beq.n	2001142c <_scanf_i+0x1c8>
2001140c:	6018      	str	r0, [r3, #0]
2001140e:	68e3      	ldr	r3, [r4, #12]
20011410:	3301      	adds	r3, #1
20011412:	60e3      	str	r3, [r4, #12]
20011414:	1bed      	subs	r5, r5, r7
20011416:	44ab      	add	fp, r5
20011418:	6925      	ldr	r5, [r4, #16]
2001141a:	445d      	add	r5, fp
2001141c:	6125      	str	r5, [r4, #16]
2001141e:	2000      	movs	r0, #0
20011420:	b007      	add	sp, #28
20011422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20011426:	f04f 0b00 	mov.w	fp, #0
2001142a:	e7ca      	b.n	200113c2 <_scanf_i+0x15e>
2001142c:	07ca      	lsls	r2, r1, #31
2001142e:	bf4c      	ite	mi
20011430:	8018      	strhmi	r0, [r3, #0]
20011432:	6018      	strpl	r0, [r3, #0]
20011434:	e7eb      	b.n	2001140e <_scanf_i+0x1aa>
20011436:	2001      	movs	r0, #1
20011438:	e7f2      	b.n	20011420 <_scanf_i+0x1bc>
2001143a:	bf00      	nop
2001143c:	20011a80 	.word	0x20011a80
20011440:	200116c5 	.word	0x200116c5
20011444:	200115c9 	.word	0x200115c9
20011448:	20011ff1 	.word	0x20011ff1

2001144c <__sccl>:
2001144c:	b570      	push	{r4, r5, r6, lr}
2001144e:	780b      	ldrb	r3, [r1, #0]
20011450:	4604      	mov	r4, r0
20011452:	2b5e      	cmp	r3, #94	; 0x5e
20011454:	bf0b      	itete	eq
20011456:	784b      	ldrbeq	r3, [r1, #1]
20011458:	1c48      	addne	r0, r1, #1
2001145a:	1c88      	addeq	r0, r1, #2
2001145c:	2200      	movne	r2, #0
2001145e:	bf08      	it	eq
20011460:	2201      	moveq	r2, #1
20011462:	1e61      	subs	r1, r4, #1
20011464:	f104 05ff 	add.w	r5, r4, #255	; 0xff
20011468:	f801 2f01 	strb.w	r2, [r1, #1]!
2001146c:	42a9      	cmp	r1, r5
2001146e:	d1fb      	bne.n	20011468 <__sccl+0x1c>
20011470:	b90b      	cbnz	r3, 20011476 <__sccl+0x2a>
20011472:	3801      	subs	r0, #1
20011474:	bd70      	pop	{r4, r5, r6, pc}
20011476:	f082 0101 	eor.w	r1, r2, #1
2001147a:	54e1      	strb	r1, [r4, r3]
2001147c:	1c42      	adds	r2, r0, #1
2001147e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
20011482:	2d2d      	cmp	r5, #45	; 0x2d
20011484:	f102 36ff 	add.w	r6, r2, #4294967295
20011488:	4610      	mov	r0, r2
2001148a:	d006      	beq.n	2001149a <__sccl+0x4e>
2001148c:	2d5d      	cmp	r5, #93	; 0x5d
2001148e:	d0f1      	beq.n	20011474 <__sccl+0x28>
20011490:	b90d      	cbnz	r5, 20011496 <__sccl+0x4a>
20011492:	4630      	mov	r0, r6
20011494:	e7ee      	b.n	20011474 <__sccl+0x28>
20011496:	462b      	mov	r3, r5
20011498:	e7ef      	b.n	2001147a <__sccl+0x2e>
2001149a:	7816      	ldrb	r6, [r2, #0]
2001149c:	2e5d      	cmp	r6, #93	; 0x5d
2001149e:	d0fa      	beq.n	20011496 <__sccl+0x4a>
200114a0:	42b3      	cmp	r3, r6
200114a2:	dcf8      	bgt.n	20011496 <__sccl+0x4a>
200114a4:	4618      	mov	r0, r3
200114a6:	3001      	adds	r0, #1
200114a8:	4286      	cmp	r6, r0
200114aa:	5421      	strb	r1, [r4, r0]
200114ac:	dcfb      	bgt.n	200114a6 <__sccl+0x5a>
200114ae:	43d8      	mvns	r0, r3
200114b0:	4430      	add	r0, r6
200114b2:	1c5d      	adds	r5, r3, #1
200114b4:	42b3      	cmp	r3, r6
200114b6:	bfa8      	it	ge
200114b8:	2000      	movge	r0, #0
200114ba:	182b      	adds	r3, r5, r0
200114bc:	3202      	adds	r2, #2
200114be:	e7de      	b.n	2001147e <__sccl+0x32>

200114c0 <_strtol_l.isra.0>:
200114c0:	2b01      	cmp	r3, #1
200114c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
200114c6:	d001      	beq.n	200114cc <_strtol_l.isra.0+0xc>
200114c8:	2b24      	cmp	r3, #36	; 0x24
200114ca:	d906      	bls.n	200114da <_strtol_l.isra.0+0x1a>
200114cc:	f7ff f8ec 	bl	200106a8 <__errno>
200114d0:	2316      	movs	r3, #22
200114d2:	6003      	str	r3, [r0, #0]
200114d4:	2000      	movs	r0, #0
200114d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200114da:	4f3a      	ldr	r7, [pc, #232]	; (200115c4 <_strtol_l.isra.0+0x104>)
200114dc:	468e      	mov	lr, r1
200114de:	4676      	mov	r6, lr
200114e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
200114e4:	5de5      	ldrb	r5, [r4, r7]
200114e6:	f015 0508 	ands.w	r5, r5, #8
200114ea:	d1f8      	bne.n	200114de <_strtol_l.isra.0+0x1e>
200114ec:	2c2d      	cmp	r4, #45	; 0x2d
200114ee:	d134      	bne.n	2001155a <_strtol_l.isra.0+0x9a>
200114f0:	f89e 4000 	ldrb.w	r4, [lr]
200114f4:	f04f 0801 	mov.w	r8, #1
200114f8:	f106 0e02 	add.w	lr, r6, #2
200114fc:	2b00      	cmp	r3, #0
200114fe:	d05c      	beq.n	200115ba <_strtol_l.isra.0+0xfa>
20011500:	2b10      	cmp	r3, #16
20011502:	d10c      	bne.n	2001151e <_strtol_l.isra.0+0x5e>
20011504:	2c30      	cmp	r4, #48	; 0x30
20011506:	d10a      	bne.n	2001151e <_strtol_l.isra.0+0x5e>
20011508:	f89e 4000 	ldrb.w	r4, [lr]
2001150c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
20011510:	2c58      	cmp	r4, #88	; 0x58
20011512:	d14d      	bne.n	200115b0 <_strtol_l.isra.0+0xf0>
20011514:	f89e 4001 	ldrb.w	r4, [lr, #1]
20011518:	2310      	movs	r3, #16
2001151a:	f10e 0e02 	add.w	lr, lr, #2
2001151e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
20011522:	f10c 3cff 	add.w	ip, ip, #4294967295
20011526:	2600      	movs	r6, #0
20011528:	fbbc f9f3 	udiv	r9, ip, r3
2001152c:	4635      	mov	r5, r6
2001152e:	fb03 ca19 	mls	sl, r3, r9, ip
20011532:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
20011536:	2f09      	cmp	r7, #9
20011538:	d818      	bhi.n	2001156c <_strtol_l.isra.0+0xac>
2001153a:	463c      	mov	r4, r7
2001153c:	42a3      	cmp	r3, r4
2001153e:	dd24      	ble.n	2001158a <_strtol_l.isra.0+0xca>
20011540:	2e00      	cmp	r6, #0
20011542:	db1f      	blt.n	20011584 <_strtol_l.isra.0+0xc4>
20011544:	45a9      	cmp	r9, r5
20011546:	d31d      	bcc.n	20011584 <_strtol_l.isra.0+0xc4>
20011548:	d101      	bne.n	2001154e <_strtol_l.isra.0+0x8e>
2001154a:	45a2      	cmp	sl, r4
2001154c:	db1a      	blt.n	20011584 <_strtol_l.isra.0+0xc4>
2001154e:	fb05 4503 	mla	r5, r5, r3, r4
20011552:	2601      	movs	r6, #1
20011554:	f81e 4b01 	ldrb.w	r4, [lr], #1
20011558:	e7eb      	b.n	20011532 <_strtol_l.isra.0+0x72>
2001155a:	2c2b      	cmp	r4, #43	; 0x2b
2001155c:	bf08      	it	eq
2001155e:	f89e 4000 	ldrbeq.w	r4, [lr]
20011562:	46a8      	mov	r8, r5
20011564:	bf08      	it	eq
20011566:	f106 0e02 	addeq.w	lr, r6, #2
2001156a:	e7c7      	b.n	200114fc <_strtol_l.isra.0+0x3c>
2001156c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
20011570:	2f19      	cmp	r7, #25
20011572:	d801      	bhi.n	20011578 <_strtol_l.isra.0+0xb8>
20011574:	3c37      	subs	r4, #55	; 0x37
20011576:	e7e1      	b.n	2001153c <_strtol_l.isra.0+0x7c>
20011578:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
2001157c:	2f19      	cmp	r7, #25
2001157e:	d804      	bhi.n	2001158a <_strtol_l.isra.0+0xca>
20011580:	3c57      	subs	r4, #87	; 0x57
20011582:	e7db      	b.n	2001153c <_strtol_l.isra.0+0x7c>
20011584:	f04f 36ff 	mov.w	r6, #4294967295
20011588:	e7e4      	b.n	20011554 <_strtol_l.isra.0+0x94>
2001158a:	2e00      	cmp	r6, #0
2001158c:	da05      	bge.n	2001159a <_strtol_l.isra.0+0xda>
2001158e:	2322      	movs	r3, #34	; 0x22
20011590:	6003      	str	r3, [r0, #0]
20011592:	4665      	mov	r5, ip
20011594:	b942      	cbnz	r2, 200115a8 <_strtol_l.isra.0+0xe8>
20011596:	4628      	mov	r0, r5
20011598:	e79d      	b.n	200114d6 <_strtol_l.isra.0+0x16>
2001159a:	f1b8 0f00 	cmp.w	r8, #0
2001159e:	d000      	beq.n	200115a2 <_strtol_l.isra.0+0xe2>
200115a0:	426d      	negs	r5, r5
200115a2:	2a00      	cmp	r2, #0
200115a4:	d0f7      	beq.n	20011596 <_strtol_l.isra.0+0xd6>
200115a6:	b10e      	cbz	r6, 200115ac <_strtol_l.isra.0+0xec>
200115a8:	f10e 31ff 	add.w	r1, lr, #4294967295
200115ac:	6011      	str	r1, [r2, #0]
200115ae:	e7f2      	b.n	20011596 <_strtol_l.isra.0+0xd6>
200115b0:	2430      	movs	r4, #48	; 0x30
200115b2:	2b00      	cmp	r3, #0
200115b4:	d1b3      	bne.n	2001151e <_strtol_l.isra.0+0x5e>
200115b6:	2308      	movs	r3, #8
200115b8:	e7b1      	b.n	2001151e <_strtol_l.isra.0+0x5e>
200115ba:	2c30      	cmp	r4, #48	; 0x30
200115bc:	d0a4      	beq.n	20011508 <_strtol_l.isra.0+0x48>
200115be:	230a      	movs	r3, #10
200115c0:	e7ad      	b.n	2001151e <_strtol_l.isra.0+0x5e>
200115c2:	bf00      	nop
200115c4:	20011ea5 	.word	0x20011ea5

200115c8 <_strtol_r>:
200115c8:	f7ff bf7a 	b.w	200114c0 <_strtol_l.isra.0>

200115cc <_strtoul_l.isra.0>:
200115cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
200115d0:	4e3b      	ldr	r6, [pc, #236]	; (200116c0 <_strtoul_l.isra.0+0xf4>)
200115d2:	4686      	mov	lr, r0
200115d4:	468c      	mov	ip, r1
200115d6:	4660      	mov	r0, ip
200115d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
200115dc:	5da5      	ldrb	r5, [r4, r6]
200115de:	f015 0508 	ands.w	r5, r5, #8
200115e2:	d1f8      	bne.n	200115d6 <_strtoul_l.isra.0+0xa>
200115e4:	2c2d      	cmp	r4, #45	; 0x2d
200115e6:	d134      	bne.n	20011652 <_strtoul_l.isra.0+0x86>
200115e8:	f89c 4000 	ldrb.w	r4, [ip]
200115ec:	f04f 0801 	mov.w	r8, #1
200115f0:	f100 0c02 	add.w	ip, r0, #2
200115f4:	2b00      	cmp	r3, #0
200115f6:	d05e      	beq.n	200116b6 <_strtoul_l.isra.0+0xea>
200115f8:	2b10      	cmp	r3, #16
200115fa:	d10c      	bne.n	20011616 <_strtoul_l.isra.0+0x4a>
200115fc:	2c30      	cmp	r4, #48	; 0x30
200115fe:	d10a      	bne.n	20011616 <_strtoul_l.isra.0+0x4a>
20011600:	f89c 0000 	ldrb.w	r0, [ip]
20011604:	f000 00df 	and.w	r0, r0, #223	; 0xdf
20011608:	2858      	cmp	r0, #88	; 0x58
2001160a:	d14f      	bne.n	200116ac <_strtoul_l.isra.0+0xe0>
2001160c:	f89c 4001 	ldrb.w	r4, [ip, #1]
20011610:	2310      	movs	r3, #16
20011612:	f10c 0c02 	add.w	ip, ip, #2
20011616:	f04f 37ff 	mov.w	r7, #4294967295
2001161a:	2500      	movs	r5, #0
2001161c:	fbb7 f7f3 	udiv	r7, r7, r3
20011620:	fb03 f907 	mul.w	r9, r3, r7
20011624:	ea6f 0909 	mvn.w	r9, r9
20011628:	4628      	mov	r0, r5
2001162a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
2001162e:	2e09      	cmp	r6, #9
20011630:	d818      	bhi.n	20011664 <_strtoul_l.isra.0+0x98>
20011632:	4634      	mov	r4, r6
20011634:	42a3      	cmp	r3, r4
20011636:	dd24      	ble.n	20011682 <_strtoul_l.isra.0+0xb6>
20011638:	2d00      	cmp	r5, #0
2001163a:	db1f      	blt.n	2001167c <_strtoul_l.isra.0+0xb0>
2001163c:	4287      	cmp	r7, r0
2001163e:	d31d      	bcc.n	2001167c <_strtoul_l.isra.0+0xb0>
20011640:	d101      	bne.n	20011646 <_strtoul_l.isra.0+0x7a>
20011642:	45a1      	cmp	r9, r4
20011644:	db1a      	blt.n	2001167c <_strtoul_l.isra.0+0xb0>
20011646:	fb00 4003 	mla	r0, r0, r3, r4
2001164a:	2501      	movs	r5, #1
2001164c:	f81c 4b01 	ldrb.w	r4, [ip], #1
20011650:	e7eb      	b.n	2001162a <_strtoul_l.isra.0+0x5e>
20011652:	2c2b      	cmp	r4, #43	; 0x2b
20011654:	bf08      	it	eq
20011656:	f89c 4000 	ldrbeq.w	r4, [ip]
2001165a:	46a8      	mov	r8, r5
2001165c:	bf08      	it	eq
2001165e:	f100 0c02 	addeq.w	ip, r0, #2
20011662:	e7c7      	b.n	200115f4 <_strtoul_l.isra.0+0x28>
20011664:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
20011668:	2e19      	cmp	r6, #25
2001166a:	d801      	bhi.n	20011670 <_strtoul_l.isra.0+0xa4>
2001166c:	3c37      	subs	r4, #55	; 0x37
2001166e:	e7e1      	b.n	20011634 <_strtoul_l.isra.0+0x68>
20011670:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
20011674:	2e19      	cmp	r6, #25
20011676:	d804      	bhi.n	20011682 <_strtoul_l.isra.0+0xb6>
20011678:	3c57      	subs	r4, #87	; 0x57
2001167a:	e7db      	b.n	20011634 <_strtoul_l.isra.0+0x68>
2001167c:	f04f 35ff 	mov.w	r5, #4294967295
20011680:	e7e4      	b.n	2001164c <_strtoul_l.isra.0+0x80>
20011682:	2d00      	cmp	r5, #0
20011684:	da07      	bge.n	20011696 <_strtoul_l.isra.0+0xca>
20011686:	2322      	movs	r3, #34	; 0x22
20011688:	f8ce 3000 	str.w	r3, [lr]
2001168c:	f04f 30ff 	mov.w	r0, #4294967295
20011690:	b942      	cbnz	r2, 200116a4 <_strtoul_l.isra.0+0xd8>
20011692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
20011696:	f1b8 0f00 	cmp.w	r8, #0
2001169a:	d000      	beq.n	2001169e <_strtoul_l.isra.0+0xd2>
2001169c:	4240      	negs	r0, r0
2001169e:	2a00      	cmp	r2, #0
200116a0:	d0f7      	beq.n	20011692 <_strtoul_l.isra.0+0xc6>
200116a2:	b10d      	cbz	r5, 200116a8 <_strtoul_l.isra.0+0xdc>
200116a4:	f10c 31ff 	add.w	r1, ip, #4294967295
200116a8:	6011      	str	r1, [r2, #0]
200116aa:	e7f2      	b.n	20011692 <_strtoul_l.isra.0+0xc6>
200116ac:	2430      	movs	r4, #48	; 0x30
200116ae:	2b00      	cmp	r3, #0
200116b0:	d1b1      	bne.n	20011616 <_strtoul_l.isra.0+0x4a>
200116b2:	2308      	movs	r3, #8
200116b4:	e7af      	b.n	20011616 <_strtoul_l.isra.0+0x4a>
200116b6:	2c30      	cmp	r4, #48	; 0x30
200116b8:	d0a2      	beq.n	20011600 <_strtoul_l.isra.0+0x34>
200116ba:	230a      	movs	r3, #10
200116bc:	e7ab      	b.n	20011616 <_strtoul_l.isra.0+0x4a>
200116be:	bf00      	nop
200116c0:	20011ea5 	.word	0x20011ea5

200116c4 <_strtoul_r>:
200116c4:	f7ff bf82 	b.w	200115cc <_strtoul_l.isra.0>

200116c8 <__submore>:
200116c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
200116cc:	460c      	mov	r4, r1
200116ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
200116d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
200116d4:	4299      	cmp	r1, r3
200116d6:	d11d      	bne.n	20011714 <__submore+0x4c>
200116d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
200116dc:	f000 f8a8 	bl	20011830 <_malloc_r>
200116e0:	b918      	cbnz	r0, 200116ea <__submore+0x22>
200116e2:	f04f 30ff 	mov.w	r0, #4294967295
200116e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
200116ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
200116ee:	63a3      	str	r3, [r4, #56]	; 0x38
200116f0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
200116f4:	6360      	str	r0, [r4, #52]	; 0x34
200116f6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
200116fa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
200116fe:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
20011702:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
20011706:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
2001170a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
2001170e:	6020      	str	r0, [r4, #0]
20011710:	2000      	movs	r0, #0
20011712:	e7e8      	b.n	200116e6 <__submore+0x1e>
20011714:	6ba6      	ldr	r6, [r4, #56]	; 0x38
20011716:	0077      	lsls	r7, r6, #1
20011718:	463a      	mov	r2, r7
2001171a:	f000 f8e3 	bl	200118e4 <_realloc_r>
2001171e:	4605      	mov	r5, r0
20011720:	2800      	cmp	r0, #0
20011722:	d0de      	beq.n	200116e2 <__submore+0x1a>
20011724:	eb00 0806 	add.w	r8, r0, r6
20011728:	4601      	mov	r1, r0
2001172a:	4632      	mov	r2, r6
2001172c:	4640      	mov	r0, r8
2001172e:	f000 f807 	bl	20011740 <memcpy>
20011732:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
20011736:	f8c4 8000 	str.w	r8, [r4]
2001173a:	e7e9      	b.n	20011710 <__submore+0x48>

2001173c <__retarget_lock_acquire_recursive>:
2001173c:	4770      	bx	lr

2001173e <__retarget_lock_release_recursive>:
2001173e:	4770      	bx	lr

20011740 <memcpy>:
20011740:	440a      	add	r2, r1
20011742:	4291      	cmp	r1, r2
20011744:	f100 33ff 	add.w	r3, r0, #4294967295
20011748:	d100      	bne.n	2001174c <memcpy+0xc>
2001174a:	4770      	bx	lr
2001174c:	b510      	push	{r4, lr}
2001174e:	f811 4b01 	ldrb.w	r4, [r1], #1
20011752:	f803 4f01 	strb.w	r4, [r3, #1]!
20011756:	4291      	cmp	r1, r2
20011758:	d1f9      	bne.n	2001174e <memcpy+0xe>
2001175a:	bd10      	pop	{r4, pc}

2001175c <memmove>:
2001175c:	4288      	cmp	r0, r1
2001175e:	b510      	push	{r4, lr}
20011760:	eb01 0402 	add.w	r4, r1, r2
20011764:	d902      	bls.n	2001176c <memmove+0x10>
20011766:	4284      	cmp	r4, r0
20011768:	4623      	mov	r3, r4
2001176a:	d807      	bhi.n	2001177c <memmove+0x20>
2001176c:	1e43      	subs	r3, r0, #1
2001176e:	42a1      	cmp	r1, r4
20011770:	d008      	beq.n	20011784 <memmove+0x28>
20011772:	f811 2b01 	ldrb.w	r2, [r1], #1
20011776:	f803 2f01 	strb.w	r2, [r3, #1]!
2001177a:	e7f8      	b.n	2001176e <memmove+0x12>
2001177c:	4402      	add	r2, r0
2001177e:	4601      	mov	r1, r0
20011780:	428a      	cmp	r2, r1
20011782:	d100      	bne.n	20011786 <memmove+0x2a>
20011784:	bd10      	pop	{r4, pc}
20011786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2001178a:	f802 4d01 	strb.w	r4, [r2, #-1]!
2001178e:	e7f7      	b.n	20011780 <memmove+0x24>

20011790 <_free_r>:
20011790:	b537      	push	{r0, r1, r2, r4, r5, lr}
20011792:	2900      	cmp	r1, #0
20011794:	d048      	beq.n	20011828 <_free_r+0x98>
20011796:	f851 3c04 	ldr.w	r3, [r1, #-4]
2001179a:	9001      	str	r0, [sp, #4]
2001179c:	2b00      	cmp	r3, #0
2001179e:	f1a1 0404 	sub.w	r4, r1, #4
200117a2:	bfb8      	it	lt
200117a4:	18e4      	addlt	r4, r4, r3
200117a6:	f000 f8d3 	bl	20011950 <__malloc_lock>
200117aa:	4a20      	ldr	r2, [pc, #128]	; (2001182c <_free_r+0x9c>)
200117ac:	9801      	ldr	r0, [sp, #4]
200117ae:	6813      	ldr	r3, [r2, #0]
200117b0:	4615      	mov	r5, r2
200117b2:	b933      	cbnz	r3, 200117c2 <_free_r+0x32>
200117b4:	6063      	str	r3, [r4, #4]
200117b6:	6014      	str	r4, [r2, #0]
200117b8:	b003      	add	sp, #12
200117ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
200117be:	f000 b8cd 	b.w	2001195c <__malloc_unlock>
200117c2:	42a3      	cmp	r3, r4
200117c4:	d90b      	bls.n	200117de <_free_r+0x4e>
200117c6:	6821      	ldr	r1, [r4, #0]
200117c8:	1862      	adds	r2, r4, r1
200117ca:	4293      	cmp	r3, r2
200117cc:	bf04      	itt	eq
200117ce:	681a      	ldreq	r2, [r3, #0]
200117d0:	685b      	ldreq	r3, [r3, #4]
200117d2:	6063      	str	r3, [r4, #4]
200117d4:	bf04      	itt	eq
200117d6:	1852      	addeq	r2, r2, r1
200117d8:	6022      	streq	r2, [r4, #0]
200117da:	602c      	str	r4, [r5, #0]
200117dc:	e7ec      	b.n	200117b8 <_free_r+0x28>
200117de:	461a      	mov	r2, r3
200117e0:	685b      	ldr	r3, [r3, #4]
200117e2:	b10b      	cbz	r3, 200117e8 <_free_r+0x58>
200117e4:	42a3      	cmp	r3, r4
200117e6:	d9fa      	bls.n	200117de <_free_r+0x4e>
200117e8:	6811      	ldr	r1, [r2, #0]
200117ea:	1855      	adds	r5, r2, r1
200117ec:	42a5      	cmp	r5, r4
200117ee:	d10b      	bne.n	20011808 <_free_r+0x78>
200117f0:	6824      	ldr	r4, [r4, #0]
200117f2:	4421      	add	r1, r4
200117f4:	1854      	adds	r4, r2, r1
200117f6:	42a3      	cmp	r3, r4
200117f8:	6011      	str	r1, [r2, #0]
200117fa:	d1dd      	bne.n	200117b8 <_free_r+0x28>
200117fc:	681c      	ldr	r4, [r3, #0]
200117fe:	685b      	ldr	r3, [r3, #4]
20011800:	6053      	str	r3, [r2, #4]
20011802:	4421      	add	r1, r4
20011804:	6011      	str	r1, [r2, #0]
20011806:	e7d7      	b.n	200117b8 <_free_r+0x28>
20011808:	d902      	bls.n	20011810 <_free_r+0x80>
2001180a:	230c      	movs	r3, #12
2001180c:	6003      	str	r3, [r0, #0]
2001180e:	e7d3      	b.n	200117b8 <_free_r+0x28>
20011810:	6825      	ldr	r5, [r4, #0]
20011812:	1961      	adds	r1, r4, r5
20011814:	428b      	cmp	r3, r1
20011816:	bf04      	itt	eq
20011818:	6819      	ldreq	r1, [r3, #0]
2001181a:	685b      	ldreq	r3, [r3, #4]
2001181c:	6063      	str	r3, [r4, #4]
2001181e:	bf04      	itt	eq
20011820:	1949      	addeq	r1, r1, r5
20011822:	6021      	streq	r1, [r4, #0]
20011824:	6054      	str	r4, [r2, #4]
20011826:	e7c7      	b.n	200117b8 <_free_r+0x28>
20011828:	b003      	add	sp, #12
2001182a:	bd30      	pop	{r4, r5, pc}
2001182c:	2001231c 	.word	0x2001231c

20011830 <_malloc_r>:
20011830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20011832:	1ccd      	adds	r5, r1, #3
20011834:	f025 0503 	bic.w	r5, r5, #3
20011838:	3508      	adds	r5, #8
2001183a:	2d0c      	cmp	r5, #12
2001183c:	bf38      	it	cc
2001183e:	250c      	movcc	r5, #12
20011840:	2d00      	cmp	r5, #0
20011842:	4606      	mov	r6, r0
20011844:	db01      	blt.n	2001184a <_malloc_r+0x1a>
20011846:	42a9      	cmp	r1, r5
20011848:	d903      	bls.n	20011852 <_malloc_r+0x22>
2001184a:	230c      	movs	r3, #12
2001184c:	6033      	str	r3, [r6, #0]
2001184e:	2000      	movs	r0, #0
20011850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20011852:	f000 f87d 	bl	20011950 <__malloc_lock>
20011856:	4921      	ldr	r1, [pc, #132]	; (200118dc <_malloc_r+0xac>)
20011858:	680a      	ldr	r2, [r1, #0]
2001185a:	4614      	mov	r4, r2
2001185c:	b99c      	cbnz	r4, 20011886 <_malloc_r+0x56>
2001185e:	4f20      	ldr	r7, [pc, #128]	; (200118e0 <_malloc_r+0xb0>)
20011860:	683b      	ldr	r3, [r7, #0]
20011862:	b923      	cbnz	r3, 2001186e <_malloc_r+0x3e>
20011864:	4621      	mov	r1, r4
20011866:	4630      	mov	r0, r6
20011868:	f000 f862 	bl	20011930 <_sbrk_r>
2001186c:	6038      	str	r0, [r7, #0]
2001186e:	4629      	mov	r1, r5
20011870:	4630      	mov	r0, r6
20011872:	f000 f85d 	bl	20011930 <_sbrk_r>
20011876:	1c43      	adds	r3, r0, #1
20011878:	d123      	bne.n	200118c2 <_malloc_r+0x92>
2001187a:	230c      	movs	r3, #12
2001187c:	6033      	str	r3, [r6, #0]
2001187e:	4630      	mov	r0, r6
20011880:	f000 f86c 	bl	2001195c <__malloc_unlock>
20011884:	e7e3      	b.n	2001184e <_malloc_r+0x1e>
20011886:	6823      	ldr	r3, [r4, #0]
20011888:	1b5b      	subs	r3, r3, r5
2001188a:	d417      	bmi.n	200118bc <_malloc_r+0x8c>
2001188c:	2b0b      	cmp	r3, #11
2001188e:	d903      	bls.n	20011898 <_malloc_r+0x68>
20011890:	6023      	str	r3, [r4, #0]
20011892:	441c      	add	r4, r3
20011894:	6025      	str	r5, [r4, #0]
20011896:	e004      	b.n	200118a2 <_malloc_r+0x72>
20011898:	6863      	ldr	r3, [r4, #4]
2001189a:	42a2      	cmp	r2, r4
2001189c:	bf0c      	ite	eq
2001189e:	600b      	streq	r3, [r1, #0]
200118a0:	6053      	strne	r3, [r2, #4]
200118a2:	4630      	mov	r0, r6
200118a4:	f000 f85a 	bl	2001195c <__malloc_unlock>
200118a8:	f104 000b 	add.w	r0, r4, #11
200118ac:	1d23      	adds	r3, r4, #4
200118ae:	f020 0007 	bic.w	r0, r0, #7
200118b2:	1ac2      	subs	r2, r0, r3
200118b4:	d0cc      	beq.n	20011850 <_malloc_r+0x20>
200118b6:	1a1b      	subs	r3, r3, r0
200118b8:	50a3      	str	r3, [r4, r2]
200118ba:	e7c9      	b.n	20011850 <_malloc_r+0x20>
200118bc:	4622      	mov	r2, r4
200118be:	6864      	ldr	r4, [r4, #4]
200118c0:	e7cc      	b.n	2001185c <_malloc_r+0x2c>
200118c2:	1cc4      	adds	r4, r0, #3
200118c4:	f024 0403 	bic.w	r4, r4, #3
200118c8:	42a0      	cmp	r0, r4
200118ca:	d0e3      	beq.n	20011894 <_malloc_r+0x64>
200118cc:	1a21      	subs	r1, r4, r0
200118ce:	4630      	mov	r0, r6
200118d0:	f000 f82e 	bl	20011930 <_sbrk_r>
200118d4:	3001      	adds	r0, #1
200118d6:	d1dd      	bne.n	20011894 <_malloc_r+0x64>
200118d8:	e7cf      	b.n	2001187a <_malloc_r+0x4a>
200118da:	bf00      	nop
200118dc:	2001231c 	.word	0x2001231c
200118e0:	20012320 	.word	0x20012320

200118e4 <_realloc_r>:
200118e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
200118e6:	4607      	mov	r7, r0
200118e8:	4614      	mov	r4, r2
200118ea:	460e      	mov	r6, r1
200118ec:	b921      	cbnz	r1, 200118f8 <_realloc_r+0x14>
200118ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
200118f2:	4611      	mov	r1, r2
200118f4:	f7ff bf9c 	b.w	20011830 <_malloc_r>
200118f8:	b922      	cbnz	r2, 20011904 <_realloc_r+0x20>
200118fa:	f7ff ff49 	bl	20011790 <_free_r>
200118fe:	4625      	mov	r5, r4
20011900:	4628      	mov	r0, r5
20011902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
20011904:	f000 f830 	bl	20011968 <_malloc_usable_size_r>
20011908:	42a0      	cmp	r0, r4
2001190a:	d20f      	bcs.n	2001192c <_realloc_r+0x48>
2001190c:	4621      	mov	r1, r4
2001190e:	4638      	mov	r0, r7
20011910:	f7ff ff8e 	bl	20011830 <_malloc_r>
20011914:	4605      	mov	r5, r0
20011916:	2800      	cmp	r0, #0
20011918:	d0f2      	beq.n	20011900 <_realloc_r+0x1c>
2001191a:	4631      	mov	r1, r6
2001191c:	4622      	mov	r2, r4
2001191e:	f7ff ff0f 	bl	20011740 <memcpy>
20011922:	4631      	mov	r1, r6
20011924:	4638      	mov	r0, r7
20011926:	f7ff ff33 	bl	20011790 <_free_r>
2001192a:	e7e9      	b.n	20011900 <_realloc_r+0x1c>
2001192c:	4635      	mov	r5, r6
2001192e:	e7e7      	b.n	20011900 <_realloc_r+0x1c>

20011930 <_sbrk_r>:
20011930:	b538      	push	{r3, r4, r5, lr}
20011932:	4d06      	ldr	r5, [pc, #24]	; (2001194c <_sbrk_r+0x1c>)
20011934:	2300      	movs	r3, #0
20011936:	4604      	mov	r4, r0
20011938:	4608      	mov	r0, r1
2001193a:	602b      	str	r3, [r5, #0]
2001193c:	f7fc ffe2 	bl	2000e904 <_sbrk>
20011940:	1c43      	adds	r3, r0, #1
20011942:	d102      	bne.n	2001194a <_sbrk_r+0x1a>
20011944:	682b      	ldr	r3, [r5, #0]
20011946:	b103      	cbz	r3, 2001194a <_sbrk_r+0x1a>
20011948:	6023      	str	r3, [r4, #0]
2001194a:	bd38      	pop	{r3, r4, r5, pc}
2001194c:	200124b4 	.word	0x200124b4

20011950 <__malloc_lock>:
20011950:	4801      	ldr	r0, [pc, #4]	; (20011958 <__malloc_lock+0x8>)
20011952:	f7ff bef3 	b.w	2001173c <__retarget_lock_acquire_recursive>
20011956:	bf00      	nop
20011958:	200124bc 	.word	0x200124bc

2001195c <__malloc_unlock>:
2001195c:	4801      	ldr	r0, [pc, #4]	; (20011964 <__malloc_unlock+0x8>)
2001195e:	f7ff beee 	b.w	2001173e <__retarget_lock_release_recursive>
20011962:	bf00      	nop
20011964:	200124bc 	.word	0x200124bc

20011968 <_malloc_usable_size_r>:
20011968:	f851 3c04 	ldr.w	r3, [r1, #-4]
2001196c:	1f18      	subs	r0, r3, #4
2001196e:	2b00      	cmp	r3, #0
20011970:	bfbc      	itt	lt
20011972:	580b      	ldrlt	r3, [r1, r0]
20011974:	18c0      	addlt	r0, r0, r3
20011976:	4770      	bx	lr

20011978 <_init>:
20011978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2001197a:	bf00      	nop
2001197c:	bcf8      	pop	{r3, r4, r5, r6, r7}
2001197e:	bc08      	pop	{r3}
20011980:	469e      	mov	lr, r3
20011982:	4770      	bx	lr

20011984 <_fini>:
20011984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20011986:	bf00      	nop
20011988:	bcf8      	pop	{r3, r4, r5, r6, r7}
2001198a:	bc08      	pop	{r3}
2001198c:	469e      	mov	lr, r3
2001198e:	4770      	bx	lr
