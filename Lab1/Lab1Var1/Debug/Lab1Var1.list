
Lab1Var1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  2000d000  2000d000  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  2000d190  2000d190  0000d190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  2000f4fc  2000f4fc  0000f4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  2000f960  2000f960  0000f9f0  2**0
                  CONTENTS
  4 .ARM          00000008  2000f960  2000f960  0000f960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  2000f968  2000f9f0  0000f9f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  2000f968  2000f968  0000f968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  2000f96c  2000f96c  0000f96c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  2000f970  2000f970  0000f970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000f9f0  2000f9f0  0000f9f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fb3c  2000fb3c  0000f9f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f9f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006983  00000000  00000000  0000fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d2  00000000  00000000  000163a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004e0  00000000  00000000  00017b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00018058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202a1  00000000  00000000  00018450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007093  00000000  00000000  000386f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c05b1  00000000  00000000  0003f784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ffd35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001414  00000000  00000000  000ffd88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

2000d190 <__do_global_dtors_aux>:
2000d190:	b510      	push	{r4, lr}
2000d192:	4c05      	ldr	r4, [pc, #20]	; (2000d1a8 <__do_global_dtors_aux+0x18>)
2000d194:	7823      	ldrb	r3, [r4, #0]
2000d196:	b933      	cbnz	r3, 2000d1a6 <__do_global_dtors_aux+0x16>
2000d198:	4b04      	ldr	r3, [pc, #16]	; (2000d1ac <__do_global_dtors_aux+0x1c>)
2000d19a:	b113      	cbz	r3, 2000d1a2 <__do_global_dtors_aux+0x12>
2000d19c:	4804      	ldr	r0, [pc, #16]	; (2000d1b0 <__do_global_dtors_aux+0x20>)
2000d19e:	f3af 8000 	nop.w
2000d1a2:	2301      	movs	r3, #1
2000d1a4:	7023      	strb	r3, [r4, #0]
2000d1a6:	bd10      	pop	{r4, pc}
2000d1a8:	2000f9f0 	.word	0x2000f9f0
2000d1ac:	00000000 	.word	0x00000000
2000d1b0:	2000f4e4 	.word	0x2000f4e4

2000d1b4 <frame_dummy>:
2000d1b4:	b508      	push	{r3, lr}
2000d1b6:	4b03      	ldr	r3, [pc, #12]	; (2000d1c4 <frame_dummy+0x10>)
2000d1b8:	b11b      	cbz	r3, 2000d1c2 <frame_dummy+0xe>
2000d1ba:	4903      	ldr	r1, [pc, #12]	; (2000d1c8 <frame_dummy+0x14>)
2000d1bc:	4803      	ldr	r0, [pc, #12]	; (2000d1cc <frame_dummy+0x18>)
2000d1be:	f3af 8000 	nop.w
2000d1c2:	bd08      	pop	{r3, pc}
2000d1c4:	00000000 	.word	0x00000000
2000d1c8:	2000f9f4 	.word	0x2000f9f4
2000d1cc:	2000f4e4 	.word	0x2000f4e4

2000d1d0 <strlen>:
2000d1d0:	4603      	mov	r3, r0
2000d1d2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000d1d6:	2a00      	cmp	r2, #0
2000d1d8:	d1fb      	bne.n	2000d1d2 <strlen+0x2>
2000d1da:	1a18      	subs	r0, r3, r0
2000d1dc:	3801      	subs	r0, #1
2000d1de:	4770      	bx	lr

2000d1e0 <memchr>:
2000d1e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d1e4:	2a10      	cmp	r2, #16
2000d1e6:	db2b      	blt.n	2000d240 <memchr+0x60>
2000d1e8:	f010 0f07 	tst.w	r0, #7
2000d1ec:	d008      	beq.n	2000d200 <memchr+0x20>
2000d1ee:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d1f2:	3a01      	subs	r2, #1
2000d1f4:	428b      	cmp	r3, r1
2000d1f6:	d02d      	beq.n	2000d254 <memchr+0x74>
2000d1f8:	f010 0f07 	tst.w	r0, #7
2000d1fc:	b342      	cbz	r2, 2000d250 <memchr+0x70>
2000d1fe:	d1f6      	bne.n	2000d1ee <memchr+0xe>
2000d200:	b4f0      	push	{r4, r5, r6, r7}
2000d202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
2000d206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
2000d20a:	f022 0407 	bic.w	r4, r2, #7
2000d20e:	f07f 0700 	mvns.w	r7, #0
2000d212:	2300      	movs	r3, #0
2000d214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
2000d218:	3c08      	subs	r4, #8
2000d21a:	ea85 0501 	eor.w	r5, r5, r1
2000d21e:	ea86 0601 	eor.w	r6, r6, r1
2000d222:	fa85 f547 	uadd8	r5, r5, r7
2000d226:	faa3 f587 	sel	r5, r3, r7
2000d22a:	fa86 f647 	uadd8	r6, r6, r7
2000d22e:	faa5 f687 	sel	r6, r5, r7
2000d232:	b98e      	cbnz	r6, 2000d258 <memchr+0x78>
2000d234:	d1ee      	bne.n	2000d214 <memchr+0x34>
2000d236:	bcf0      	pop	{r4, r5, r6, r7}
2000d238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
2000d23c:	f002 0207 	and.w	r2, r2, #7
2000d240:	b132      	cbz	r2, 2000d250 <memchr+0x70>
2000d242:	f810 3b01 	ldrb.w	r3, [r0], #1
2000d246:	3a01      	subs	r2, #1
2000d248:	ea83 0301 	eor.w	r3, r3, r1
2000d24c:	b113      	cbz	r3, 2000d254 <memchr+0x74>
2000d24e:	d1f8      	bne.n	2000d242 <memchr+0x62>
2000d250:	2000      	movs	r0, #0
2000d252:	4770      	bx	lr
2000d254:	3801      	subs	r0, #1
2000d256:	4770      	bx	lr
2000d258:	2d00      	cmp	r5, #0
2000d25a:	bf06      	itte	eq
2000d25c:	4635      	moveq	r5, r6
2000d25e:	3803      	subeq	r0, #3
2000d260:	3807      	subne	r0, #7
2000d262:	f015 0f01 	tst.w	r5, #1
2000d266:	d107      	bne.n	2000d278 <memchr+0x98>
2000d268:	3001      	adds	r0, #1
2000d26a:	f415 7f80 	tst.w	r5, #256	; 0x100
2000d26e:	bf02      	ittt	eq
2000d270:	3001      	addeq	r0, #1
2000d272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
2000d276:	3001      	addeq	r0, #1
2000d278:	bcf0      	pop	{r4, r5, r6, r7}
2000d27a:	3801      	subs	r0, #1
2000d27c:	4770      	bx	lr
2000d27e:	bf00      	nop

2000d280 <__aeabi_uldivmod>:
2000d280:	b953      	cbnz	r3, 2000d298 <__aeabi_uldivmod+0x18>
2000d282:	b94a      	cbnz	r2, 2000d298 <__aeabi_uldivmod+0x18>
2000d284:	2900      	cmp	r1, #0
2000d286:	bf08      	it	eq
2000d288:	2800      	cmpeq	r0, #0
2000d28a:	bf1c      	itt	ne
2000d28c:	f04f 31ff 	movne.w	r1, #4294967295
2000d290:	f04f 30ff 	movne.w	r0, #4294967295
2000d294:	f000 b96e 	b.w	2000d574 <__aeabi_idiv0>
2000d298:	f1ad 0c08 	sub.w	ip, sp, #8
2000d29c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
2000d2a0:	f000 f806 	bl	2000d2b0 <__udivmoddi4>
2000d2a4:	f8dd e004 	ldr.w	lr, [sp, #4]
2000d2a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
2000d2ac:	b004      	add	sp, #16
2000d2ae:	4770      	bx	lr

2000d2b0 <__udivmoddi4>:
2000d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000d2b4:	9d08      	ldr	r5, [sp, #32]
2000d2b6:	4604      	mov	r4, r0
2000d2b8:	468c      	mov	ip, r1
2000d2ba:	2b00      	cmp	r3, #0
2000d2bc:	f040 8083 	bne.w	2000d3c6 <__udivmoddi4+0x116>
2000d2c0:	428a      	cmp	r2, r1
2000d2c2:	4617      	mov	r7, r2
2000d2c4:	d947      	bls.n	2000d356 <__udivmoddi4+0xa6>
2000d2c6:	fab2 f282 	clz	r2, r2
2000d2ca:	b142      	cbz	r2, 2000d2de <__udivmoddi4+0x2e>
2000d2cc:	f1c2 0020 	rsb	r0, r2, #32
2000d2d0:	fa24 f000 	lsr.w	r0, r4, r0
2000d2d4:	4091      	lsls	r1, r2
2000d2d6:	4097      	lsls	r7, r2
2000d2d8:	ea40 0c01 	orr.w	ip, r0, r1
2000d2dc:	4094      	lsls	r4, r2
2000d2de:	ea4f 4817 	mov.w	r8, r7, lsr #16
2000d2e2:	0c23      	lsrs	r3, r4, #16
2000d2e4:	fbbc f6f8 	udiv	r6, ip, r8
2000d2e8:	fa1f fe87 	uxth.w	lr, r7
2000d2ec:	fb08 c116 	mls	r1, r8, r6, ip
2000d2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d2f4:	fb06 f10e 	mul.w	r1, r6, lr
2000d2f8:	4299      	cmp	r1, r3
2000d2fa:	d909      	bls.n	2000d310 <__udivmoddi4+0x60>
2000d2fc:	18fb      	adds	r3, r7, r3
2000d2fe:	f106 30ff 	add.w	r0, r6, #4294967295
2000d302:	f080 8119 	bcs.w	2000d538 <__udivmoddi4+0x288>
2000d306:	4299      	cmp	r1, r3
2000d308:	f240 8116 	bls.w	2000d538 <__udivmoddi4+0x288>
2000d30c:	3e02      	subs	r6, #2
2000d30e:	443b      	add	r3, r7
2000d310:	1a5b      	subs	r3, r3, r1
2000d312:	b2a4      	uxth	r4, r4
2000d314:	fbb3 f0f8 	udiv	r0, r3, r8
2000d318:	fb08 3310 	mls	r3, r8, r0, r3
2000d31c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
2000d320:	fb00 fe0e 	mul.w	lr, r0, lr
2000d324:	45a6      	cmp	lr, r4
2000d326:	d909      	bls.n	2000d33c <__udivmoddi4+0x8c>
2000d328:	193c      	adds	r4, r7, r4
2000d32a:	f100 33ff 	add.w	r3, r0, #4294967295
2000d32e:	f080 8105 	bcs.w	2000d53c <__udivmoddi4+0x28c>
2000d332:	45a6      	cmp	lr, r4
2000d334:	f240 8102 	bls.w	2000d53c <__udivmoddi4+0x28c>
2000d338:	3802      	subs	r0, #2
2000d33a:	443c      	add	r4, r7
2000d33c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
2000d340:	eba4 040e 	sub.w	r4, r4, lr
2000d344:	2600      	movs	r6, #0
2000d346:	b11d      	cbz	r5, 2000d350 <__udivmoddi4+0xa0>
2000d348:	40d4      	lsrs	r4, r2
2000d34a:	2300      	movs	r3, #0
2000d34c:	e9c5 4300 	strd	r4, r3, [r5]
2000d350:	4631      	mov	r1, r6
2000d352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d356:	b902      	cbnz	r2, 2000d35a <__udivmoddi4+0xaa>
2000d358:	deff      	udf	#255	; 0xff
2000d35a:	fab2 f282 	clz	r2, r2
2000d35e:	2a00      	cmp	r2, #0
2000d360:	d150      	bne.n	2000d404 <__udivmoddi4+0x154>
2000d362:	1bcb      	subs	r3, r1, r7
2000d364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
2000d368:	fa1f f887 	uxth.w	r8, r7
2000d36c:	2601      	movs	r6, #1
2000d36e:	fbb3 fcfe 	udiv	ip, r3, lr
2000d372:	0c21      	lsrs	r1, r4, #16
2000d374:	fb0e 331c 	mls	r3, lr, ip, r3
2000d378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d37c:	fb08 f30c 	mul.w	r3, r8, ip
2000d380:	428b      	cmp	r3, r1
2000d382:	d907      	bls.n	2000d394 <__udivmoddi4+0xe4>
2000d384:	1879      	adds	r1, r7, r1
2000d386:	f10c 30ff 	add.w	r0, ip, #4294967295
2000d38a:	d202      	bcs.n	2000d392 <__udivmoddi4+0xe2>
2000d38c:	428b      	cmp	r3, r1
2000d38e:	f200 80e9 	bhi.w	2000d564 <__udivmoddi4+0x2b4>
2000d392:	4684      	mov	ip, r0
2000d394:	1ac9      	subs	r1, r1, r3
2000d396:	b2a3      	uxth	r3, r4
2000d398:	fbb1 f0fe 	udiv	r0, r1, lr
2000d39c:	fb0e 1110 	mls	r1, lr, r0, r1
2000d3a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
2000d3a4:	fb08 f800 	mul.w	r8, r8, r0
2000d3a8:	45a0      	cmp	r8, r4
2000d3aa:	d907      	bls.n	2000d3bc <__udivmoddi4+0x10c>
2000d3ac:	193c      	adds	r4, r7, r4
2000d3ae:	f100 33ff 	add.w	r3, r0, #4294967295
2000d3b2:	d202      	bcs.n	2000d3ba <__udivmoddi4+0x10a>
2000d3b4:	45a0      	cmp	r8, r4
2000d3b6:	f200 80d9 	bhi.w	2000d56c <__udivmoddi4+0x2bc>
2000d3ba:	4618      	mov	r0, r3
2000d3bc:	eba4 0408 	sub.w	r4, r4, r8
2000d3c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
2000d3c4:	e7bf      	b.n	2000d346 <__udivmoddi4+0x96>
2000d3c6:	428b      	cmp	r3, r1
2000d3c8:	d909      	bls.n	2000d3de <__udivmoddi4+0x12e>
2000d3ca:	2d00      	cmp	r5, #0
2000d3cc:	f000 80b1 	beq.w	2000d532 <__udivmoddi4+0x282>
2000d3d0:	2600      	movs	r6, #0
2000d3d2:	e9c5 0100 	strd	r0, r1, [r5]
2000d3d6:	4630      	mov	r0, r6
2000d3d8:	4631      	mov	r1, r6
2000d3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d3de:	fab3 f683 	clz	r6, r3
2000d3e2:	2e00      	cmp	r6, #0
2000d3e4:	d14a      	bne.n	2000d47c <__udivmoddi4+0x1cc>
2000d3e6:	428b      	cmp	r3, r1
2000d3e8:	d302      	bcc.n	2000d3f0 <__udivmoddi4+0x140>
2000d3ea:	4282      	cmp	r2, r0
2000d3ec:	f200 80b8 	bhi.w	2000d560 <__udivmoddi4+0x2b0>
2000d3f0:	1a84      	subs	r4, r0, r2
2000d3f2:	eb61 0103 	sbc.w	r1, r1, r3
2000d3f6:	2001      	movs	r0, #1
2000d3f8:	468c      	mov	ip, r1
2000d3fa:	2d00      	cmp	r5, #0
2000d3fc:	d0a8      	beq.n	2000d350 <__udivmoddi4+0xa0>
2000d3fe:	e9c5 4c00 	strd	r4, ip, [r5]
2000d402:	e7a5      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d404:	f1c2 0320 	rsb	r3, r2, #32
2000d408:	fa20 f603 	lsr.w	r6, r0, r3
2000d40c:	4097      	lsls	r7, r2
2000d40e:	fa01 f002 	lsl.w	r0, r1, r2
2000d412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
2000d416:	40d9      	lsrs	r1, r3
2000d418:	4330      	orrs	r0, r6
2000d41a:	0c03      	lsrs	r3, r0, #16
2000d41c:	fbb1 f6fe 	udiv	r6, r1, lr
2000d420:	fa1f f887 	uxth.w	r8, r7
2000d424:	fb0e 1116 	mls	r1, lr, r6, r1
2000d428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
2000d42c:	fb06 f108 	mul.w	r1, r6, r8
2000d430:	4299      	cmp	r1, r3
2000d432:	fa04 f402 	lsl.w	r4, r4, r2
2000d436:	d909      	bls.n	2000d44c <__udivmoddi4+0x19c>
2000d438:	18fb      	adds	r3, r7, r3
2000d43a:	f106 3cff 	add.w	ip, r6, #4294967295
2000d43e:	f080 808d 	bcs.w	2000d55c <__udivmoddi4+0x2ac>
2000d442:	4299      	cmp	r1, r3
2000d444:	f240 808a 	bls.w	2000d55c <__udivmoddi4+0x2ac>
2000d448:	3e02      	subs	r6, #2
2000d44a:	443b      	add	r3, r7
2000d44c:	1a5b      	subs	r3, r3, r1
2000d44e:	b281      	uxth	r1, r0
2000d450:	fbb3 f0fe 	udiv	r0, r3, lr
2000d454:	fb0e 3310 	mls	r3, lr, r0, r3
2000d458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
2000d45c:	fb00 f308 	mul.w	r3, r0, r8
2000d460:	428b      	cmp	r3, r1
2000d462:	d907      	bls.n	2000d474 <__udivmoddi4+0x1c4>
2000d464:	1879      	adds	r1, r7, r1
2000d466:	f100 3cff 	add.w	ip, r0, #4294967295
2000d46a:	d273      	bcs.n	2000d554 <__udivmoddi4+0x2a4>
2000d46c:	428b      	cmp	r3, r1
2000d46e:	d971      	bls.n	2000d554 <__udivmoddi4+0x2a4>
2000d470:	3802      	subs	r0, #2
2000d472:	4439      	add	r1, r7
2000d474:	1acb      	subs	r3, r1, r3
2000d476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
2000d47a:	e778      	b.n	2000d36e <__udivmoddi4+0xbe>
2000d47c:	f1c6 0c20 	rsb	ip, r6, #32
2000d480:	fa03 f406 	lsl.w	r4, r3, r6
2000d484:	fa22 f30c 	lsr.w	r3, r2, ip
2000d488:	431c      	orrs	r4, r3
2000d48a:	fa20 f70c 	lsr.w	r7, r0, ip
2000d48e:	fa01 f306 	lsl.w	r3, r1, r6
2000d492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
2000d496:	fa21 f10c 	lsr.w	r1, r1, ip
2000d49a:	431f      	orrs	r7, r3
2000d49c:	0c3b      	lsrs	r3, r7, #16
2000d49e:	fbb1 f9fe 	udiv	r9, r1, lr
2000d4a2:	fa1f f884 	uxth.w	r8, r4
2000d4a6:	fb0e 1119 	mls	r1, lr, r9, r1
2000d4aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
2000d4ae:	fb09 fa08 	mul.w	sl, r9, r8
2000d4b2:	458a      	cmp	sl, r1
2000d4b4:	fa02 f206 	lsl.w	r2, r2, r6
2000d4b8:	fa00 f306 	lsl.w	r3, r0, r6
2000d4bc:	d908      	bls.n	2000d4d0 <__udivmoddi4+0x220>
2000d4be:	1861      	adds	r1, r4, r1
2000d4c0:	f109 30ff 	add.w	r0, r9, #4294967295
2000d4c4:	d248      	bcs.n	2000d558 <__udivmoddi4+0x2a8>
2000d4c6:	458a      	cmp	sl, r1
2000d4c8:	d946      	bls.n	2000d558 <__udivmoddi4+0x2a8>
2000d4ca:	f1a9 0902 	sub.w	r9, r9, #2
2000d4ce:	4421      	add	r1, r4
2000d4d0:	eba1 010a 	sub.w	r1, r1, sl
2000d4d4:	b2bf      	uxth	r7, r7
2000d4d6:	fbb1 f0fe 	udiv	r0, r1, lr
2000d4da:	fb0e 1110 	mls	r1, lr, r0, r1
2000d4de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
2000d4e2:	fb00 f808 	mul.w	r8, r0, r8
2000d4e6:	45b8      	cmp	r8, r7
2000d4e8:	d907      	bls.n	2000d4fa <__udivmoddi4+0x24a>
2000d4ea:	19e7      	adds	r7, r4, r7
2000d4ec:	f100 31ff 	add.w	r1, r0, #4294967295
2000d4f0:	d22e      	bcs.n	2000d550 <__udivmoddi4+0x2a0>
2000d4f2:	45b8      	cmp	r8, r7
2000d4f4:	d92c      	bls.n	2000d550 <__udivmoddi4+0x2a0>
2000d4f6:	3802      	subs	r0, #2
2000d4f8:	4427      	add	r7, r4
2000d4fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
2000d4fe:	eba7 0708 	sub.w	r7, r7, r8
2000d502:	fba0 8902 	umull	r8, r9, r0, r2
2000d506:	454f      	cmp	r7, r9
2000d508:	46c6      	mov	lr, r8
2000d50a:	4649      	mov	r1, r9
2000d50c:	d31a      	bcc.n	2000d544 <__udivmoddi4+0x294>
2000d50e:	d017      	beq.n	2000d540 <__udivmoddi4+0x290>
2000d510:	b15d      	cbz	r5, 2000d52a <__udivmoddi4+0x27a>
2000d512:	ebb3 020e 	subs.w	r2, r3, lr
2000d516:	eb67 0701 	sbc.w	r7, r7, r1
2000d51a:	fa07 fc0c 	lsl.w	ip, r7, ip
2000d51e:	40f2      	lsrs	r2, r6
2000d520:	ea4c 0202 	orr.w	r2, ip, r2
2000d524:	40f7      	lsrs	r7, r6
2000d526:	e9c5 2700 	strd	r2, r7, [r5]
2000d52a:	2600      	movs	r6, #0
2000d52c:	4631      	mov	r1, r6
2000d52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000d532:	462e      	mov	r6, r5
2000d534:	4628      	mov	r0, r5
2000d536:	e70b      	b.n	2000d350 <__udivmoddi4+0xa0>
2000d538:	4606      	mov	r6, r0
2000d53a:	e6e9      	b.n	2000d310 <__udivmoddi4+0x60>
2000d53c:	4618      	mov	r0, r3
2000d53e:	e6fd      	b.n	2000d33c <__udivmoddi4+0x8c>
2000d540:	4543      	cmp	r3, r8
2000d542:	d2e5      	bcs.n	2000d510 <__udivmoddi4+0x260>
2000d544:	ebb8 0e02 	subs.w	lr, r8, r2
2000d548:	eb69 0104 	sbc.w	r1, r9, r4
2000d54c:	3801      	subs	r0, #1
2000d54e:	e7df      	b.n	2000d510 <__udivmoddi4+0x260>
2000d550:	4608      	mov	r0, r1
2000d552:	e7d2      	b.n	2000d4fa <__udivmoddi4+0x24a>
2000d554:	4660      	mov	r0, ip
2000d556:	e78d      	b.n	2000d474 <__udivmoddi4+0x1c4>
2000d558:	4681      	mov	r9, r0
2000d55a:	e7b9      	b.n	2000d4d0 <__udivmoddi4+0x220>
2000d55c:	4666      	mov	r6, ip
2000d55e:	e775      	b.n	2000d44c <__udivmoddi4+0x19c>
2000d560:	4630      	mov	r0, r6
2000d562:	e74a      	b.n	2000d3fa <__udivmoddi4+0x14a>
2000d564:	f1ac 0c02 	sub.w	ip, ip, #2
2000d568:	4439      	add	r1, r7
2000d56a:	e713      	b.n	2000d394 <__udivmoddi4+0xe4>
2000d56c:	3802      	subs	r0, #2
2000d56e:	443c      	add	r4, r7
2000d570:	e724      	b.n	2000d3bc <__udivmoddi4+0x10c>
2000d572:	bf00      	nop

2000d574 <__aeabi_idiv0>:
2000d574:	4770      	bx	lr
2000d576:	bf00      	nop

2000d578 <crc32stream>:
    0xBAD03605UL, 0xCDD70693UL, 0x54DE5729UL, 0x23D967BFUL, 
    0xB3667A2EUL, 0xC4614AB8UL, 0x5D681B02UL, 0x2A6F2B94UL, 
    0xB40BBE37UL, 0xC30C8EA1UL, 0x5A05DF1BUL, 0x2D02EF8DUL };

unsigned long crc32stream( unsigned char c, unsigned long crc )    
{
2000d578:	b480      	push	{r7}
2000d57a:	b083      	sub	sp, #12
2000d57c:	af00      	add	r7, sp, #0
2000d57e:	4603      	mov	r3, r0
2000d580:	6039      	str	r1, [r7, #0]
2000d582:	71fb      	strb	r3, [r7, #7]
    crc = ((crc>>8) & 0x00FFFFFF) ^ crc32_table[ (crc^c) & 0xFF ];
2000d584:	683b      	ldr	r3, [r7, #0]
2000d586:	0a1a      	lsrs	r2, r3, #8
2000d588:	79f9      	ldrb	r1, [r7, #7]
2000d58a:	683b      	ldr	r3, [r7, #0]
2000d58c:	404b      	eors	r3, r1
2000d58e:	b2db      	uxtb	r3, r3
2000d590:	4906      	ldr	r1, [pc, #24]	; (2000d5ac <crc32stream+0x34>)
2000d592:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
2000d596:	4053      	eors	r3, r2
2000d598:	603b      	str	r3, [r7, #0]
    return( crc^0xFFFFFFFF );
2000d59a:	683b      	ldr	r3, [r7, #0]
2000d59c:	43db      	mvns	r3, r3
}
2000d59e:	4618      	mov	r0, r3
2000d5a0:	370c      	adds	r7, #12
2000d5a2:	46bd      	mov	sp, r7
2000d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d5a8:	4770      	bx	lr
2000d5aa:	bf00      	nop
2000d5ac:	2000f51c 	.word	0x2000f51c

2000d5b0 <crc32>:


unsigned long crc32( unsigned char * buf, unsigned long len, unsigned long crc )    
{
2000d5b0:	b580      	push	{r7, lr}
2000d5b2:	b086      	sub	sp, #24
2000d5b4:	af00      	add	r7, sp, #0
2000d5b6:	60f8      	str	r0, [r7, #12]
2000d5b8:	60b9      	str	r1, [r7, #8]
2000d5ba:	607a      	str	r2, [r7, #4]
unsigned long i;

    for( i = 0; i < len; i++ )
2000d5bc:	2300      	movs	r3, #0
2000d5be:	617b      	str	r3, [r7, #20]
2000d5c0:	e00b      	b.n	2000d5da <crc32+0x2a>
	{
        crc = crc32stream( buf[ i ], crc );
2000d5c2:	68fa      	ldr	r2, [r7, #12]
2000d5c4:	697b      	ldr	r3, [r7, #20]
2000d5c6:	4413      	add	r3, r2
2000d5c8:	781b      	ldrb	r3, [r3, #0]
2000d5ca:	6879      	ldr	r1, [r7, #4]
2000d5cc:	4618      	mov	r0, r3
2000d5ce:	f7ff ffd3 	bl	2000d578 <crc32stream>
2000d5d2:	6078      	str	r0, [r7, #4]
    for( i = 0; i < len; i++ )
2000d5d4:	697b      	ldr	r3, [r7, #20]
2000d5d6:	3301      	adds	r3, #1
2000d5d8:	617b      	str	r3, [r7, #20]
2000d5da:	697a      	ldr	r2, [r7, #20]
2000d5dc:	68bb      	ldr	r3, [r7, #8]
2000d5de:	429a      	cmp	r2, r3
2000d5e0:	d3ef      	bcc.n	2000d5c2 <crc32+0x12>
	}

    return crc;
2000d5e2:	687b      	ldr	r3, [r7, #4]
}
2000d5e4:	4618      	mov	r0, r3
2000d5e6:	3718      	adds	r7, #24
2000d5e8:	46bd      	mov	sp, r7
2000d5ea:	bd80      	pop	{r7, pc}

2000d5ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
2000d5ec:	b580      	push	{r7, lr}
2000d5ee:	b08a      	sub	sp, #40	; 0x28
2000d5f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000d5f2:	f107 0314 	add.w	r3, r7, #20
2000d5f6:	2200      	movs	r2, #0
2000d5f8:	601a      	str	r2, [r3, #0]
2000d5fa:	605a      	str	r2, [r3, #4]
2000d5fc:	609a      	str	r2, [r3, #8]
2000d5fe:	60da      	str	r2, [r3, #12]
2000d600:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
2000d602:	2300      	movs	r3, #0
2000d604:	613b      	str	r3, [r7, #16]
2000d606:	4b27      	ldr	r3, [pc, #156]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d60a:	4a26      	ldr	r2, [pc, #152]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000d610:	6313      	str	r3, [r2, #48]	; 0x30
2000d612:	4b24      	ldr	r3, [pc, #144]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d616:	f003 0380 	and.w	r3, r3, #128	; 0x80
2000d61a:	613b      	str	r3, [r7, #16]
2000d61c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
2000d61e:	2300      	movs	r3, #0
2000d620:	60fb      	str	r3, [r7, #12]
2000d622:	4b20      	ldr	r3, [pc, #128]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d626:	4a1f      	ldr	r2, [pc, #124]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d628:	f043 0308 	orr.w	r3, r3, #8
2000d62c:	6313      	str	r3, [r2, #48]	; 0x30
2000d62e:	4b1d      	ldr	r3, [pc, #116]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d632:	f003 0308 	and.w	r3, r3, #8
2000d636:	60fb      	str	r3, [r7, #12]
2000d638:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
2000d63a:	2300      	movs	r3, #0
2000d63c:	60bb      	str	r3, [r7, #8]
2000d63e:	4b19      	ldr	r3, [pc, #100]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d642:	4a18      	ldr	r2, [pc, #96]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d644:	f043 0301 	orr.w	r3, r3, #1
2000d648:	6313      	str	r3, [r2, #48]	; 0x30
2000d64a:	4b16      	ldr	r3, [pc, #88]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d64c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d64e:	f003 0301 	and.w	r3, r3, #1
2000d652:	60bb      	str	r3, [r7, #8]
2000d654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
2000d656:	2300      	movs	r3, #0
2000d658:	607b      	str	r3, [r7, #4]
2000d65a:	4b12      	ldr	r3, [pc, #72]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d65e:	4a11      	ldr	r2, [pc, #68]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d660:	f043 0302 	orr.w	r3, r3, #2
2000d664:	6313      	str	r3, [r2, #48]	; 0x30
2000d666:	4b0f      	ldr	r3, [pc, #60]	; (2000d6a4 <MX_GPIO_Init+0xb8>)
2000d668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2000d66a:	f003 0302 	and.w	r3, r3, #2
2000d66e:	607b      	str	r3, [r7, #4]
2000d670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
2000d672:	2200      	movs	r2, #0
2000d674:	f44f 4160 	mov.w	r1, #57344	; 0xe000
2000d678:	480b      	ldr	r0, [pc, #44]	; (2000d6a8 <MX_GPIO_Init+0xbc>)
2000d67a:	f000 fe4d 	bl	2000e318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
2000d67e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
2000d682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
2000d684:	2301      	movs	r3, #1
2000d686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
2000d688:	2300      	movs	r3, #0
2000d68a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
2000d68c:	2302      	movs	r3, #2
2000d68e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
2000d690:	f107 0314 	add.w	r3, r7, #20
2000d694:	4619      	mov	r1, r3
2000d696:	4804      	ldr	r0, [pc, #16]	; (2000d6a8 <MX_GPIO_Init+0xbc>)
2000d698:	f000 fc8a 	bl	2000dfb0 <HAL_GPIO_Init>

}
2000d69c:	bf00      	nop
2000d69e:	3728      	adds	r7, #40	; 0x28
2000d6a0:	46bd      	mov	sp, r7
2000d6a2:	bd80      	pop	{r7, pc}
2000d6a4:	40023800 	.word	0x40023800
2000d6a8:	40020c00 	.word	0x40020c00

2000d6ac <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
2000d6ac:	b580      	push	{r7, lr}
2000d6ae:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
2000d6b0:	4b09      	ldr	r3, [pc, #36]	; (2000d6d8 <MX_IWDG_Init+0x2c>)
2000d6b2:	4a0a      	ldr	r2, [pc, #40]	; (2000d6dc <MX_IWDG_Init+0x30>)
2000d6b4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
2000d6b6:	4b08      	ldr	r3, [pc, #32]	; (2000d6d8 <MX_IWDG_Init+0x2c>)
2000d6b8:	2204      	movs	r2, #4
2000d6ba:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
2000d6bc:	4b06      	ldr	r3, [pc, #24]	; (2000d6d8 <MX_IWDG_Init+0x2c>)
2000d6be:	f640 72ff 	movw	r2, #4095	; 0xfff
2000d6c2:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
2000d6c4:	4804      	ldr	r0, [pc, #16]	; (2000d6d8 <MX_IWDG_Init+0x2c>)
2000d6c6:	f000 fe5b 	bl	2000e380 <HAL_IWDG_Init>
2000d6ca:	4603      	mov	r3, r0
2000d6cc:	2b00      	cmp	r3, #0
2000d6ce:	d001      	beq.n	2000d6d4 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
2000d6d0:	f000 f90c 	bl	2000d8ec <Error_Handler>
  }

}
2000d6d4:	bf00      	nop
2000d6d6:	bd80      	pop	{r7, pc}
2000d6d8:	2000fa1c 	.word	0x2000fa1c
2000d6dc:	40003000 	.word	0x40003000

2000d6e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
2000d6e0:	b580      	push	{r7, lr}
2000d6e2:	b082      	sub	sp, #8
2000d6e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
2000d6e6:	f000 fae7 	bl	2000dcb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000d6ea:	f000 f893 	bl	2000d814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
2000d6ee:	f7ff ff7d 	bl	2000d5ec <MX_GPIO_Init>
  MX_IWDG_Init();
2000d6f2:	f7ff ffdb 	bl	2000d6ac <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  /* Do not remove this code below */
  MX_TRACE_Init();
2000d6f6:	f000 f9a3 	bl	2000da40 <MX_TRACE_Init>
  SDK_TRACE_Start();
2000d6fa:	f000 f9c3 	bl	2000da84 <SDK_TRACE_Start>
  /* Do not remove this code from above */

  SDK_TRACE_Timestamp(PRINT, 1);
2000d6fe:	2101      	movs	r1, #1
2000d700:	2004      	movs	r0, #4
2000d702:	f000 f9f7 	bl	2000daf4 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","LEDs Blink test");
2000d706:	493f      	ldr	r1, [pc, #252]	; (2000d804 <main+0x124>)
2000d708:	483f      	ldr	r0, [pc, #252]	; (2000d808 <main+0x128>)
2000d70a:	f000 fa45 	bl	2000db98 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000d70e:	2100      	movs	r1, #0
2000d710:	2004      	movs	r0, #4
2000d712:	f000 f9ef 	bl	2000daf4 <SDK_TRACE_Timestamp>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000d716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d71a:	483c      	ldr	r0, [pc, #240]	; (2000d80c <main+0x12c>)
2000d71c:	f000 fe15 	bl	2000e34a <HAL_GPIO_TogglePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d724:	4839      	ldr	r0, [pc, #228]	; (2000d80c <main+0x12c>)
2000d726:	f000 fddf 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d72a:	4603      	mov	r3, r0
2000d72c:	4619      	mov	r1, r3
2000d72e:	2003      	movs	r0, #3
2000d730:	f000 f9e0 	bl	2000daf4 <SDK_TRACE_Timestamp>
  /* Place your code from here */
  /* Example of using LED tracing */

  for (int i = 0; i < 20; i++) {
2000d734:	2300      	movs	r3, #0
2000d736:	607b      	str	r3, [r7, #4]
2000d738:	e032      	b.n	2000d7a0 <main+0xc0>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
2000d73a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d73e:	4833      	ldr	r0, [pc, #204]	; (2000d80c <main+0x12c>)
2000d740:	f000 fe03 	bl	2000e34a <HAL_GPIO_TogglePin>
  	  SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000d744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d748:	4830      	ldr	r0, [pc, #192]	; (2000d80c <main+0x12c>)
2000d74a:	f000 fdcd 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d74e:	4603      	mov	r3, r0
2000d750:	4619      	mov	r1, r3
2000d752:	2001      	movs	r0, #1
2000d754:	f000 f9ce 	bl	2000daf4 <SDK_TRACE_Timestamp>
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
2000d758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d75c:	482b      	ldr	r0, [pc, #172]	; (2000d80c <main+0x12c>)
2000d75e:	f000 fdf4 	bl	2000e34a <HAL_GPIO_TogglePin>
  	  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d762:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d766:	4829      	ldr	r0, [pc, #164]	; (2000d80c <main+0x12c>)
2000d768:	f000 fdbe 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d76c:	4603      	mov	r3, r0
2000d76e:	4619      	mov	r1, r3
2000d770:	2003      	movs	r0, #3
2000d772:	f000 f9bf 	bl	2000daf4 <SDK_TRACE_Timestamp>
  	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
2000d776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2000d77a:	4824      	ldr	r0, [pc, #144]	; (2000d80c <main+0x12c>)
2000d77c:	f000 fde5 	bl	2000e34a <HAL_GPIO_TogglePin>
  	  SDK_TRACE_Timestamp(LED2, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14));
2000d780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
2000d784:	4821      	ldr	r0, [pc, #132]	; (2000d80c <main+0x12c>)
2000d786:	f000 fdaf 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d78a:	4603      	mov	r3, r0
2000d78c:	4619      	mov	r1, r3
2000d78e:	2002      	movs	r0, #2
2000d790:	f000 f9b0 	bl	2000daf4 <SDK_TRACE_Timestamp>
  	  HAL_Delay(50);
2000d794:	2032      	movs	r0, #50	; 0x32
2000d796:	f000 fb01 	bl	2000dd9c <HAL_Delay>
  for (int i = 0; i < 20; i++) {
2000d79a:	687b      	ldr	r3, [r7, #4]
2000d79c:	3301      	adds	r3, #1
2000d79e:	607b      	str	r3, [r7, #4]
2000d7a0:	687b      	ldr	r3, [r7, #4]
2000d7a2:	2b13      	cmp	r3, #19
2000d7a4:	ddc9      	ble.n	2000d73a <main+0x5a>
  }

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
2000d7a6:	2200      	movs	r2, #0
2000d7a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d7ac:	4817      	ldr	r0, [pc, #92]	; (2000d80c <main+0x12c>)
2000d7ae:	f000 fdb3 	bl	2000e318 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED1, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13));
2000d7b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
2000d7b6:	4815      	ldr	r0, [pc, #84]	; (2000d80c <main+0x12c>)
2000d7b8:	f000 fd96 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d7bc:	4603      	mov	r3, r0
2000d7be:	4619      	mov	r1, r3
2000d7c0:	2001      	movs	r0, #1
2000d7c2:	f000 f997 	bl	2000daf4 <SDK_TRACE_Timestamp>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
2000d7c6:	2200      	movs	r2, #0
2000d7c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d7cc:	480f      	ldr	r0, [pc, #60]	; (2000d80c <main+0x12c>)
2000d7ce:	f000 fda3 	bl	2000e318 <HAL_GPIO_WritePin>
  SDK_TRACE_Timestamp(LED3, HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15));
2000d7d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
2000d7d6:	480d      	ldr	r0, [pc, #52]	; (2000d80c <main+0x12c>)
2000d7d8:	f000 fd86 	bl	2000e2e8 <HAL_GPIO_ReadPin>
2000d7dc:	4603      	mov	r3, r0
2000d7de:	4619      	mov	r1, r3
2000d7e0:	2003      	movs	r0, #3
2000d7e2:	f000 f987 	bl	2000daf4 <SDK_TRACE_Timestamp>

  SDK_TRACE_Timestamp(PRINT, 1);
2000d7e6:	2101      	movs	r1, #1
2000d7e8:	2004      	movs	r0, #4
2000d7ea:	f000 f983 	bl	2000daf4 <SDK_TRACE_Timestamp>
  SDK_TRACE_Print("%s","Test passed");
2000d7ee:	4908      	ldr	r1, [pc, #32]	; (2000d810 <main+0x130>)
2000d7f0:	4805      	ldr	r0, [pc, #20]	; (2000d808 <main+0x128>)
2000d7f2:	f000 f9d1 	bl	2000db98 <SDK_TRACE_Print>
  SDK_TRACE_Timestamp(PRINT, 0);
2000d7f6:	2100      	movs	r1, #0
2000d7f8:	2004      	movs	r0, #4
2000d7fa:	f000 f97b 	bl	2000daf4 <SDK_TRACE_Timestamp>
  //uint8_t data[4] = { 0xDE, 0xAD, 0xBE, 0xEF };
  //SDK_TRACE_Dump(&data, 4);

  /* Place your code before here */
  /* Do not remove this code below */
  SDK_TRACE_Stop();
2000d7fe:	f000 f951 	bl	2000daa4 <SDK_TRACE_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
2000d802:	e7fe      	b.n	2000d802 <main+0x122>
2000d804:	2000f4fc 	.word	0x2000f4fc
2000d808:	2000f50c 	.word	0x2000f50c
2000d80c:	40020c00 	.word	0x40020c00
2000d810:	2000f510 	.word	0x2000f510

2000d814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000d814:	b580      	push	{r7, lr}
2000d816:	b094      	sub	sp, #80	; 0x50
2000d818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
2000d81a:	f107 0320 	add.w	r3, r7, #32
2000d81e:	2230      	movs	r2, #48	; 0x30
2000d820:	2100      	movs	r1, #0
2000d822:	4618      	mov	r0, r3
2000d824:	f001 fa28 	bl	2000ec78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000d828:	f107 030c 	add.w	r3, r7, #12
2000d82c:	2200      	movs	r2, #0
2000d82e:	601a      	str	r2, [r3, #0]
2000d830:	605a      	str	r2, [r3, #4]
2000d832:	609a      	str	r2, [r3, #8]
2000d834:	60da      	str	r2, [r3, #12]
2000d836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
2000d838:	2300      	movs	r3, #0
2000d83a:	60bb      	str	r3, [r7, #8]
2000d83c:	4b29      	ldr	r3, [pc, #164]	; (2000d8e4 <SystemClock_Config+0xd0>)
2000d83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d840:	4a28      	ldr	r2, [pc, #160]	; (2000d8e4 <SystemClock_Config+0xd0>)
2000d842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d846:	6413      	str	r3, [r2, #64]	; 0x40
2000d848:	4b26      	ldr	r3, [pc, #152]	; (2000d8e4 <SystemClock_Config+0xd0>)
2000d84a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d84c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d850:	60bb      	str	r3, [r7, #8]
2000d852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
2000d854:	2300      	movs	r3, #0
2000d856:	607b      	str	r3, [r7, #4]
2000d858:	4b23      	ldr	r3, [pc, #140]	; (2000d8e8 <SystemClock_Config+0xd4>)
2000d85a:	681b      	ldr	r3, [r3, #0]
2000d85c:	4a22      	ldr	r2, [pc, #136]	; (2000d8e8 <SystemClock_Config+0xd4>)
2000d85e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d862:	6013      	str	r3, [r2, #0]
2000d864:	4b20      	ldr	r3, [pc, #128]	; (2000d8e8 <SystemClock_Config+0xd4>)
2000d866:	681b      	ldr	r3, [r3, #0]
2000d868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d86c:	607b      	str	r3, [r7, #4]
2000d86e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
2000d870:	2309      	movs	r3, #9
2000d872:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
2000d874:	f44f 3380 	mov.w	r3, #65536	; 0x10000
2000d878:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
2000d87a:	2301      	movs	r3, #1
2000d87c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
2000d87e:	2302      	movs	r3, #2
2000d880:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
2000d882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
2000d886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
2000d888:	2319      	movs	r3, #25
2000d88a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
2000d88c:	f44f 73a8 	mov.w	r3, #336	; 0x150
2000d890:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
2000d892:	2302      	movs	r3, #2
2000d894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
2000d896:	2304      	movs	r3, #4
2000d898:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000d89a:	f107 0320 	add.w	r3, r7, #32
2000d89e:	4618      	mov	r0, r3
2000d8a0:	f000 fda8 	bl	2000e3f4 <HAL_RCC_OscConfig>
2000d8a4:	4603      	mov	r3, r0
2000d8a6:	2b00      	cmp	r3, #0
2000d8a8:	d001      	beq.n	2000d8ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
2000d8aa:	f000 f81f 	bl	2000d8ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
2000d8ae:	230f      	movs	r3, #15
2000d8b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
2000d8b2:	2302      	movs	r3, #2
2000d8b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000d8b6:	2300      	movs	r3, #0
2000d8b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
2000d8ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
2000d8be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
2000d8c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
2000d8c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
2000d8c6:	f107 030c 	add.w	r3, r7, #12
2000d8ca:	2105      	movs	r1, #5
2000d8cc:	4618      	mov	r0, r3
2000d8ce:	f001 f801 	bl	2000e8d4 <HAL_RCC_ClockConfig>
2000d8d2:	4603      	mov	r3, r0
2000d8d4:	2b00      	cmp	r3, #0
2000d8d6:	d001      	beq.n	2000d8dc <SystemClock_Config+0xc8>
  {
    Error_Handler();
2000d8d8:	f000 f808 	bl	2000d8ec <Error_Handler>
  }
}
2000d8dc:	bf00      	nop
2000d8de:	3750      	adds	r7, #80	; 0x50
2000d8e0:	46bd      	mov	sp, r7
2000d8e2:	bd80      	pop	{r7, pc}
2000d8e4:	40023800 	.word	0x40023800
2000d8e8:	40007000 	.word	0x40007000

2000d8ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
2000d8ec:	b480      	push	{r7}
2000d8ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
2000d8f0:	bf00      	nop
2000d8f2:	46bd      	mov	sp, r7
2000d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d8f8:	4770      	bx	lr
	...

2000d8fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
2000d8fc:	b480      	push	{r7}
2000d8fe:	b083      	sub	sp, #12
2000d900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
2000d902:	2300      	movs	r3, #0
2000d904:	607b      	str	r3, [r7, #4]
2000d906:	4b10      	ldr	r3, [pc, #64]	; (2000d948 <HAL_MspInit+0x4c>)
2000d908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d90a:	4a0f      	ldr	r2, [pc, #60]	; (2000d948 <HAL_MspInit+0x4c>)
2000d90c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000d910:	6453      	str	r3, [r2, #68]	; 0x44
2000d912:	4b0d      	ldr	r3, [pc, #52]	; (2000d948 <HAL_MspInit+0x4c>)
2000d914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000d916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000d91a:	607b      	str	r3, [r7, #4]
2000d91c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
2000d91e:	2300      	movs	r3, #0
2000d920:	603b      	str	r3, [r7, #0]
2000d922:	4b09      	ldr	r3, [pc, #36]	; (2000d948 <HAL_MspInit+0x4c>)
2000d924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d926:	4a08      	ldr	r2, [pc, #32]	; (2000d948 <HAL_MspInit+0x4c>)
2000d928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000d92c:	6413      	str	r3, [r2, #64]	; 0x40
2000d92e:	4b06      	ldr	r3, [pc, #24]	; (2000d948 <HAL_MspInit+0x4c>)
2000d930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000d932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000d936:	603b      	str	r3, [r7, #0]
2000d938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
2000d93a:	bf00      	nop
2000d93c:	370c      	adds	r7, #12
2000d93e:	46bd      	mov	sp, r7
2000d940:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d944:	4770      	bx	lr
2000d946:	bf00      	nop
2000d948:	40023800 	.word	0x40023800

2000d94c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
2000d94c:	b480      	push	{r7}
2000d94e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
2000d950:	bf00      	nop
2000d952:	46bd      	mov	sp, r7
2000d954:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d958:	4770      	bx	lr

2000d95a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
2000d95a:	b480      	push	{r7}
2000d95c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
2000d95e:	e7fe      	b.n	2000d95e <HardFault_Handler+0x4>

2000d960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
2000d960:	b480      	push	{r7}
2000d962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
2000d964:	e7fe      	b.n	2000d964 <MemManage_Handler+0x4>

2000d966 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
2000d966:	b480      	push	{r7}
2000d968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
2000d96a:	e7fe      	b.n	2000d96a <BusFault_Handler+0x4>

2000d96c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
2000d96c:	b480      	push	{r7}
2000d96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
2000d970:	e7fe      	b.n	2000d970 <UsageFault_Handler+0x4>

2000d972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
2000d972:	b480      	push	{r7}
2000d974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
2000d976:	bf00      	nop
2000d978:	46bd      	mov	sp, r7
2000d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d97e:	4770      	bx	lr

2000d980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
2000d980:	b480      	push	{r7}
2000d982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
2000d984:	bf00      	nop
2000d986:	46bd      	mov	sp, r7
2000d988:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d98c:	4770      	bx	lr

2000d98e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
2000d98e:	b480      	push	{r7}
2000d990:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
2000d992:	bf00      	nop
2000d994:	46bd      	mov	sp, r7
2000d996:	f85d 7b04 	ldr.w	r7, [sp], #4
2000d99a:	4770      	bx	lr

2000d99c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
2000d99c:	b580      	push	{r7, lr}
2000d99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
2000d9a0:	f000 f9dc 	bl	2000dd5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
2000d9a4:	bf00      	nop
2000d9a6:	bd80      	pop	{r7, pc}

2000d9a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
2000d9a8:	b580      	push	{r7, lr}
2000d9aa:	b086      	sub	sp, #24
2000d9ac:	af00      	add	r7, sp, #0
2000d9ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
2000d9b0:	4a14      	ldr	r2, [pc, #80]	; (2000da04 <_sbrk+0x5c>)
2000d9b2:	4b15      	ldr	r3, [pc, #84]	; (2000da08 <_sbrk+0x60>)
2000d9b4:	1ad3      	subs	r3, r2, r3
2000d9b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
2000d9b8:	697b      	ldr	r3, [r7, #20]
2000d9ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
2000d9bc:	4b13      	ldr	r3, [pc, #76]	; (2000da0c <_sbrk+0x64>)
2000d9be:	681b      	ldr	r3, [r3, #0]
2000d9c0:	2b00      	cmp	r3, #0
2000d9c2:	d102      	bne.n	2000d9ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
2000d9c4:	4b11      	ldr	r3, [pc, #68]	; (2000da0c <_sbrk+0x64>)
2000d9c6:	4a12      	ldr	r2, [pc, #72]	; (2000da10 <_sbrk+0x68>)
2000d9c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
2000d9ca:	4b10      	ldr	r3, [pc, #64]	; (2000da0c <_sbrk+0x64>)
2000d9cc:	681a      	ldr	r2, [r3, #0]
2000d9ce:	687b      	ldr	r3, [r7, #4]
2000d9d0:	4413      	add	r3, r2
2000d9d2:	693a      	ldr	r2, [r7, #16]
2000d9d4:	429a      	cmp	r2, r3
2000d9d6:	d207      	bcs.n	2000d9e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
2000d9d8:	f001 f924 	bl	2000ec24 <__errno>
2000d9dc:	4603      	mov	r3, r0
2000d9de:	220c      	movs	r2, #12
2000d9e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
2000d9e2:	f04f 33ff 	mov.w	r3, #4294967295
2000d9e6:	e009      	b.n	2000d9fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
2000d9e8:	4b08      	ldr	r3, [pc, #32]	; (2000da0c <_sbrk+0x64>)
2000d9ea:	681b      	ldr	r3, [r3, #0]
2000d9ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
2000d9ee:	4b07      	ldr	r3, [pc, #28]	; (2000da0c <_sbrk+0x64>)
2000d9f0:	681a      	ldr	r2, [r3, #0]
2000d9f2:	687b      	ldr	r3, [r7, #4]
2000d9f4:	4413      	add	r3, r2
2000d9f6:	4a05      	ldr	r2, [pc, #20]	; (2000da0c <_sbrk+0x64>)
2000d9f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
2000d9fa:	68fb      	ldr	r3, [r7, #12]
}
2000d9fc:	4618      	mov	r0, r3
2000d9fe:	3718      	adds	r7, #24
2000da00:	46bd      	mov	sp, r7
2000da02:	bd80      	pop	{r7, pc}
2000da04:	20020000 	.word	0x20020000
2000da08:	00000400 	.word	0x00000400
2000da0c:	2000fa0c 	.word	0x2000fa0c
2000da10:	2000fb40 	.word	0x2000fb40

2000da14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
2000da14:	b480      	push	{r7}
2000da16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
2000da18:	4b07      	ldr	r3, [pc, #28]	; (2000da38 <SystemInit+0x24>)
2000da1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
2000da1e:	4a06      	ldr	r2, [pc, #24]	; (2000da38 <SystemInit+0x24>)
2000da20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
2000da24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
2000da28:	4b03      	ldr	r3, [pc, #12]	; (2000da38 <SystemInit+0x24>)
2000da2a:	4a04      	ldr	r2, [pc, #16]	; (2000da3c <SystemInit+0x28>)
2000da2c:	609a      	str	r2, [r3, #8]
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
2000da2e:	bf00      	nop
2000da30:	46bd      	mov	sp, r7
2000da32:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da36:	4770      	bx	lr
2000da38:	e000ed00 	.word	0xe000ed00
2000da3c:	2000d000 	.word	0x2000d000

2000da40 <MX_TRACE_Init>:
 * ----------------------------------------------------------------------
 * Trace initialization function
 *-----------------------------------------------------------------------
 */
void MX_TRACE_Init(void)
{
2000da40:	b480      	push	{r7}
2000da42:	af00      	add	r7, sp, #0
	InitCC();
2000da44:	4b0c      	ldr	r3, [pc, #48]	; (2000da78 <MX_TRACE_Init+0x38>)
2000da46:	681b      	ldr	r3, [r3, #0]
2000da48:	4a0b      	ldr	r2, [pc, #44]	; (2000da78 <MX_TRACE_Init+0x38>)
2000da4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2000da4e:	6013      	str	r3, [r2, #0]
	ResetCC();
2000da50:	4b0a      	ldr	r3, [pc, #40]	; (2000da7c <MX_TRACE_Init+0x3c>)
2000da52:	2200      	movs	r2, #0
2000da54:	601a      	str	r2, [r3, #0]
	TI->printlog_size = 0x00;
2000da56:	4b0a      	ldr	r3, [pc, #40]	; (2000da80 <MX_TRACE_Init+0x40>)
2000da58:	681b      	ldr	r3, [r3, #0]
2000da5a:	2200      	movs	r2, #0
2000da5c:	605a      	str	r2, [r3, #4]
	TI->tracelog_size = 0x00;
2000da5e:	4b08      	ldr	r3, [pc, #32]	; (2000da80 <MX_TRACE_Init+0x40>)
2000da60:	681b      	ldr	r3, [r3, #0]
2000da62:	2200      	movs	r2, #0
2000da64:	601a      	str	r2, [r3, #0]
	TI->dumpbuf_size = 0x00;
2000da66:	4b06      	ldr	r3, [pc, #24]	; (2000da80 <MX_TRACE_Init+0x40>)
2000da68:	681b      	ldr	r3, [r3, #0]
2000da6a:	2200      	movs	r2, #0
2000da6c:	609a      	str	r2, [r3, #8]
}
2000da6e:	bf00      	nop
2000da70:	46bd      	mov	sp, r7
2000da72:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da76:	4770      	bx	lr
2000da78:	e000edfc 	.word	0xe000edfc
2000da7c:	e0001004 	.word	0xe0001004
2000da80:	2000f974 	.word	0x2000f974

2000da84 <SDK_TRACE_Start>:
 * ----------------------------------------------------------------------
 * Start trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Start(void)
{
2000da84:	b480      	push	{r7}
2000da86:	af00      	add	r7, sp, #0
	EnableCC();
2000da88:	4b05      	ldr	r3, [pc, #20]	; (2000daa0 <SDK_TRACE_Start+0x1c>)
2000da8a:	681b      	ldr	r3, [r3, #0]
2000da8c:	4a04      	ldr	r2, [pc, #16]	; (2000daa0 <SDK_TRACE_Start+0x1c>)
2000da8e:	f043 0301 	orr.w	r3, r3, #1
2000da92:	6013      	str	r3, [r2, #0]
}
2000da94:	bf00      	nop
2000da96:	46bd      	mov	sp, r7
2000da98:	f85d 7b04 	ldr.w	r7, [sp], #4
2000da9c:	4770      	bx	lr
2000da9e:	bf00      	nop
2000daa0:	e0001000 	.word	0xe0001000

2000daa4 <SDK_TRACE_Stop>:
 * ----------------------------------------------------------------------
 * Stop trace recording function
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Stop(void)
{
2000daa4:	b598      	push	{r3, r4, r7, lr}
2000daa6:	af00      	add	r7, sp, #0
	DisableCC();
2000daa8:	4b0c      	ldr	r3, [pc, #48]	; (2000dadc <SDK_TRACE_Stop+0x38>)
2000daaa:	681b      	ldr	r3, [r3, #0]
2000daac:	4a0b      	ldr	r2, [pc, #44]	; (2000dadc <SDK_TRACE_Stop+0x38>)
2000daae:	f023 0301 	bic.w	r3, r3, #1
2000dab2:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
2000dab4:	b672      	cpsid	i
}
2000dab6:	bf00      	nop
	__disable_irq();
	*CRC32 = crc32((unsigned char *)TRACEINFO_ADDR, sizeof(traceinfo_t) + (TI->tracelog_size), 0);
2000dab8:	4b09      	ldr	r3, [pc, #36]	; (2000dae0 <SDK_TRACE_Stop+0x3c>)
2000daba:	681b      	ldr	r3, [r3, #0]
2000dabc:	681b      	ldr	r3, [r3, #0]
2000dabe:	3310      	adds	r3, #16
2000dac0:	4a08      	ldr	r2, [pc, #32]	; (2000dae4 <SDK_TRACE_Stop+0x40>)
2000dac2:	6814      	ldr	r4, [r2, #0]
2000dac4:	2200      	movs	r2, #0
2000dac6:	4619      	mov	r1, r3
2000dac8:	4807      	ldr	r0, [pc, #28]	; (2000dae8 <SDK_TRACE_Stop+0x44>)
2000daca:	f7ff fd71 	bl	2000d5b0 <crc32>
2000dace:	4603      	mov	r3, r0
2000dad0:	6023      	str	r3, [r4, #0]
	SCB->AIRCR = 0x05FA0004;
2000dad2:	4b06      	ldr	r3, [pc, #24]	; (2000daec <SDK_TRACE_Stop+0x48>)
2000dad4:	4a06      	ldr	r2, [pc, #24]	; (2000daf0 <SDK_TRACE_Stop+0x4c>)
2000dad6:	60da      	str	r2, [r3, #12]
}
2000dad8:	bf00      	nop
2000dada:	bd98      	pop	{r3, r4, r7, pc}
2000dadc:	e0001000 	.word	0xe0001000
2000dae0:	2000f974 	.word	0x2000f974
2000dae4:	2000f97c 	.word	0x2000f97c
2000dae8:	10000004 	.word	0x10000004
2000daec:	e000ed00 	.word	0xe000ed00
2000daf0:	05fa0004 	.word	0x05fa0004

2000daf4 <SDK_TRACE_Timestamp>:
 * @param id Event ID (For example: LED1)
 * @param value LED port state (0 or 1)
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Timestamp(uint8_t id, uint8_t value)
{
2000daf4:	b590      	push	{r4, r7, lr}
2000daf6:	b085      	sub	sp, #20
2000daf8:	af00      	add	r7, sp, #0
2000dafa:	4603      	mov	r3, r0
2000dafc:	460a      	mov	r2, r1
2000dafe:	71fb      	strb	r3, [r7, #7]
2000db00:	4613      	mov	r3, r2
2000db02:	71bb      	strb	r3, [r7, #6]
	uint32_t eCode = 0x00;
2000db04:	2300      	movs	r3, #0
2000db06:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + 0x01;
2000db08:	68fb      	ldr	r3, [r7, #12]
2000db0a:	021b      	lsls	r3, r3, #8
2000db0c:	3301      	adds	r3, #1
2000db0e:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + value;
2000db10:	68fb      	ldr	r3, [r7, #12]
2000db12:	021a      	lsls	r2, r3, #8
2000db14:	79bb      	ldrb	r3, [r7, #6]
2000db16:	4413      	add	r3, r2
2000db18:	60fb      	str	r3, [r7, #12]
	eCode = (eCode << 8) + id;
2000db1a:	68fb      	ldr	r3, [r7, #12]
2000db1c:	021a      	lsls	r2, r3, #8
2000db1e:	79fb      	ldrb	r3, [r7, #7]
2000db20:	4413      	add	r3, r2
2000db22:	60fb      	str	r3, [r7, #12]
	TL[TI->tracelog_size/8].timecode = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000db24:	4b17      	ldr	r3, [pc, #92]	; (2000db84 <SDK_TRACE_Timestamp+0x90>)
2000db26:	681c      	ldr	r4, [r3, #0]
2000db28:	f001 f870 	bl	2000ec0c <HAL_RCC_GetHCLKFreq>
2000db2c:	4603      	mov	r3, r0
2000db2e:	4a16      	ldr	r2, [pc, #88]	; (2000db88 <SDK_TRACE_Timestamp+0x94>)
2000db30:	fba2 2303 	umull	r2, r3, r2, r3
2000db34:	0c9a      	lsrs	r2, r3, #18
2000db36:	4b15      	ldr	r3, [pc, #84]	; (2000db8c <SDK_TRACE_Timestamp+0x98>)
2000db38:	6819      	ldr	r1, [r3, #0]
2000db3a:	4b15      	ldr	r3, [pc, #84]	; (2000db90 <SDK_TRACE_Timestamp+0x9c>)
2000db3c:	681b      	ldr	r3, [r3, #0]
2000db3e:	681b      	ldr	r3, [r3, #0]
2000db40:	f023 0307 	bic.w	r3, r3, #7
2000db44:	440b      	add	r3, r1
2000db46:	fbb4 f2f2 	udiv	r2, r4, r2
2000db4a:	601a      	str	r2, [r3, #0]
	TL[TI->tracelog_size/8].eventcode = eCode;
2000db4c:	4b0f      	ldr	r3, [pc, #60]	; (2000db8c <SDK_TRACE_Timestamp+0x98>)
2000db4e:	681a      	ldr	r2, [r3, #0]
2000db50:	4b0f      	ldr	r3, [pc, #60]	; (2000db90 <SDK_TRACE_Timestamp+0x9c>)
2000db52:	681b      	ldr	r3, [r3, #0]
2000db54:	681b      	ldr	r3, [r3, #0]
2000db56:	f023 0307 	bic.w	r3, r3, #7
2000db5a:	4413      	add	r3, r2
2000db5c:	68fa      	ldr	r2, [r7, #12]
2000db5e:	605a      	str	r2, [r3, #4]
	TI->tracelog_size+=8;
2000db60:	4b0b      	ldr	r3, [pc, #44]	; (2000db90 <SDK_TRACE_Timestamp+0x9c>)
2000db62:	681b      	ldr	r3, [r3, #0]
2000db64:	681a      	ldr	r2, [r3, #0]
2000db66:	4b0a      	ldr	r3, [pc, #40]	; (2000db90 <SDK_TRACE_Timestamp+0x9c>)
2000db68:	681b      	ldr	r3, [r3, #0]
2000db6a:	3208      	adds	r2, #8
2000db6c:	601a      	str	r2, [r3, #0]
	eventId++;
2000db6e:	4b09      	ldr	r3, [pc, #36]	; (2000db94 <SDK_TRACE_Timestamp+0xa0>)
2000db70:	781b      	ldrb	r3, [r3, #0]
2000db72:	3301      	adds	r3, #1
2000db74:	b2da      	uxtb	r2, r3
2000db76:	4b07      	ldr	r3, [pc, #28]	; (2000db94 <SDK_TRACE_Timestamp+0xa0>)
2000db78:	701a      	strb	r2, [r3, #0]
}
2000db7a:	bf00      	nop
2000db7c:	3714      	adds	r7, #20
2000db7e:	46bd      	mov	sp, r7
2000db80:	bd90      	pop	{r4, r7, pc}
2000db82:	bf00      	nop
2000db84:	e0001004 	.word	0xe0001004
2000db88:	431bde83 	.word	0x431bde83
2000db8c:	2000f978 	.word	0x2000f978
2000db90:	2000f974 	.word	0x2000f974
2000db94:	2000fa10 	.word	0x2000fa10

2000db98 <SDK_TRACE_Print>:
 * ----------------------------------------------------------------------
 * Writes the C string pointed by format to the trace buffer
 *-----------------------------------------------------------------------
 */
void SDK_TRACE_Print(char * format, ...)
{
2000db98:	b40f      	push	{r0, r1, r2, r3}
2000db9a:	b590      	push	{r4, r7, lr}
2000db9c:	b085      	sub	sp, #20
2000db9e:	af00      	add	r7, sp, #0

	va_list args;
	va_start(args, format);
2000dba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
2000dba4:	607b      	str	r3, [r7, #4]

	vsprintf( __buf, format, args);
2000dba6:	687a      	ldr	r2, [r7, #4]
2000dba8:	6a39      	ldr	r1, [r7, #32]
2000dbaa:	4829      	ldr	r0, [pc, #164]	; (2000dc50 <SDK_TRACE_Print+0xb8>)
2000dbac:	f001 f882 	bl	2000ecb4 <vsiprintf>

	uint8_t len = strlen(__buf);
2000dbb0:	4827      	ldr	r0, [pc, #156]	; (2000dc50 <SDK_TRACE_Print+0xb8>)
2000dbb2:	f7ff fb0d 	bl	2000d1d0 <strlen>
2000dbb6:	4603      	mov	r3, r0
2000dbb8:	72fb      	strb	r3, [r7, #11]

	*(__IO uint32_t *)(Print_Write_Address+TI->printlog_size) = GetCC() / (HAL_RCC_GetHCLKFreq() / CLK_Prescaler);
2000dbba:	4b26      	ldr	r3, [pc, #152]	; (2000dc54 <SDK_TRACE_Print+0xbc>)
2000dbbc:	681c      	ldr	r4, [r3, #0]
2000dbbe:	f001 f825 	bl	2000ec0c <HAL_RCC_GetHCLKFreq>
2000dbc2:	4603      	mov	r3, r0
2000dbc4:	4a24      	ldr	r2, [pc, #144]	; (2000dc58 <SDK_TRACE_Print+0xc0>)
2000dbc6:	fba2 2303 	umull	r2, r3, r2, r3
2000dbca:	0c9b      	lsrs	r3, r3, #18
2000dbcc:	4a23      	ldr	r2, [pc, #140]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dbce:	6812      	ldr	r2, [r2, #0]
2000dbd0:	6851      	ldr	r1, [r2, #4]
2000dbd2:	4a23      	ldr	r2, [pc, #140]	; (2000dc60 <SDK_TRACE_Print+0xc8>)
2000dbd4:	6812      	ldr	r2, [r2, #0]
2000dbd6:	440a      	add	r2, r1
2000dbd8:	fbb4 f3f3 	udiv	r3, r4, r3
2000dbdc:	6013      	str	r3, [r2, #0]
	TI->printlog_size+=4;
2000dbde:	4b1f      	ldr	r3, [pc, #124]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dbe0:	681b      	ldr	r3, [r3, #0]
2000dbe2:	685a      	ldr	r2, [r3, #4]
2000dbe4:	4b1d      	ldr	r3, [pc, #116]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dbe6:	681b      	ldr	r3, [r3, #0]
2000dbe8:	3204      	adds	r2, #4
2000dbea:	605a      	str	r2, [r3, #4]

	*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = len;
2000dbec:	4b1b      	ldr	r3, [pc, #108]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dbee:	681b      	ldr	r3, [r3, #0]
2000dbf0:	685a      	ldr	r2, [r3, #4]
2000dbf2:	4b1b      	ldr	r3, [pc, #108]	; (2000dc60 <SDK_TRACE_Print+0xc8>)
2000dbf4:	681b      	ldr	r3, [r3, #0]
2000dbf6:	4413      	add	r3, r2
2000dbf8:	461a      	mov	r2, r3
2000dbfa:	7afb      	ldrb	r3, [r7, #11]
2000dbfc:	7013      	strb	r3, [r2, #0]
	TI->printlog_size++;
2000dbfe:	4b17      	ldr	r3, [pc, #92]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dc00:	681b      	ldr	r3, [r3, #0]
2000dc02:	685a      	ldr	r2, [r3, #4]
2000dc04:	3201      	adds	r2, #1
2000dc06:	605a      	str	r2, [r3, #4]

	for (int i = 0; i < len; i++)
2000dc08:	2300      	movs	r3, #0
2000dc0a:	60fb      	str	r3, [r7, #12]
2000dc0c:	e013      	b.n	2000dc36 <SDK_TRACE_Print+0x9e>
	{
		*(__IO uint8_t *)(Print_Write_Address+TI->printlog_size) = __buf[i];
2000dc0e:	4b13      	ldr	r3, [pc, #76]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dc10:	681b      	ldr	r3, [r3, #0]
2000dc12:	685a      	ldr	r2, [r3, #4]
2000dc14:	4b12      	ldr	r3, [pc, #72]	; (2000dc60 <SDK_TRACE_Print+0xc8>)
2000dc16:	681b      	ldr	r3, [r3, #0]
2000dc18:	4413      	add	r3, r2
2000dc1a:	4619      	mov	r1, r3
2000dc1c:	4a0c      	ldr	r2, [pc, #48]	; (2000dc50 <SDK_TRACE_Print+0xb8>)
2000dc1e:	68fb      	ldr	r3, [r7, #12]
2000dc20:	4413      	add	r3, r2
2000dc22:	781b      	ldrb	r3, [r3, #0]
2000dc24:	700b      	strb	r3, [r1, #0]
		TI->printlog_size++;
2000dc26:	4b0d      	ldr	r3, [pc, #52]	; (2000dc5c <SDK_TRACE_Print+0xc4>)
2000dc28:	681b      	ldr	r3, [r3, #0]
2000dc2a:	685a      	ldr	r2, [r3, #4]
2000dc2c:	3201      	adds	r2, #1
2000dc2e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < len; i++)
2000dc30:	68fb      	ldr	r3, [r7, #12]
2000dc32:	3301      	adds	r3, #1
2000dc34:	60fb      	str	r3, [r7, #12]
2000dc36:	7afb      	ldrb	r3, [r7, #11]
2000dc38:	68fa      	ldr	r2, [r7, #12]
2000dc3a:	429a      	cmp	r2, r3
2000dc3c:	dbe7      	blt.n	2000dc0e <SDK_TRACE_Print+0x76>
	}
}
2000dc3e:	bf00      	nop
2000dc40:	bf00      	nop
2000dc42:	3714      	adds	r7, #20
2000dc44:	46bd      	mov	sp, r7
2000dc46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
2000dc4a:	b004      	add	sp, #16
2000dc4c:	4770      	bx	lr
2000dc4e:	bf00      	nop
2000dc50:	2000fa28 	.word	0x2000fa28
2000dc54:	e0001004 	.word	0xe0001004
2000dc58:	431bde83 	.word	0x431bde83
2000dc5c:	2000f974 	.word	0x2000f974
2000dc60:	2000f980 	.word	0x2000f980

2000dc64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
2000dc64:	f8df d034 	ldr.w	sp, [pc, #52]	; 2000dc9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2000dc68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2000dc6a:	e003      	b.n	2000dc74 <LoopCopyDataInit>

2000dc6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2000dc6c:	4b0c      	ldr	r3, [pc, #48]	; (2000dca0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
2000dc6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2000dc70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2000dc72:	3104      	adds	r1, #4

2000dc74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2000dc74:	480b      	ldr	r0, [pc, #44]	; (2000dca4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
2000dc76:	4b0c      	ldr	r3, [pc, #48]	; (2000dca8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
2000dc78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2000dc7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2000dc7c:	d3f6      	bcc.n	2000dc6c <CopyDataInit>
  ldr  r2, =_sbss
2000dc7e:	4a0b      	ldr	r2, [pc, #44]	; (2000dcac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
2000dc80:	e002      	b.n	2000dc88 <LoopFillZerobss>

2000dc82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2000dc82:	2300      	movs	r3, #0
  str  r3, [r2], #4
2000dc84:	f842 3b04 	str.w	r3, [r2], #4

2000dc88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2000dc88:	4b09      	ldr	r3, [pc, #36]	; (2000dcb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
2000dc8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
2000dc8c:	d3f9      	bcc.n	2000dc82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
2000dc8e:	f7ff fec1 	bl	2000da14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
2000dc92:	f000 ffcd 	bl	2000ec30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2000dc96:	f7ff fd23 	bl	2000d6e0 <main>
  bx  lr    
2000dc9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
2000dc9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
2000dca0:	2000f970 	.word	0x2000f970
  ldr  r0, =_sdata
2000dca4:	2000f970 	.word	0x2000f970
  ldr  r3, =_edata
2000dca8:	2000f9f0 	.word	0x2000f9f0
  ldr  r2, =_sbss
2000dcac:	2000f9f0 	.word	0x2000f9f0
  ldr  r3, = _ebss
2000dcb0:	2000fb3c 	.word	0x2000fb3c

2000dcb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2000dcb4:	e7fe      	b.n	2000dcb4 <ADC_IRQHandler>
	...

2000dcb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
2000dcb8:	b580      	push	{r7, lr}
2000dcba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
2000dcbc:	4b0e      	ldr	r3, [pc, #56]	; (2000dcf8 <HAL_Init+0x40>)
2000dcbe:	681b      	ldr	r3, [r3, #0]
2000dcc0:	4a0d      	ldr	r2, [pc, #52]	; (2000dcf8 <HAL_Init+0x40>)
2000dcc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2000dcc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
2000dcc8:	4b0b      	ldr	r3, [pc, #44]	; (2000dcf8 <HAL_Init+0x40>)
2000dcca:	681b      	ldr	r3, [r3, #0]
2000dccc:	4a0a      	ldr	r2, [pc, #40]	; (2000dcf8 <HAL_Init+0x40>)
2000dcce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
2000dcd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
2000dcd4:	4b08      	ldr	r3, [pc, #32]	; (2000dcf8 <HAL_Init+0x40>)
2000dcd6:	681b      	ldr	r3, [r3, #0]
2000dcd8:	4a07      	ldr	r2, [pc, #28]	; (2000dcf8 <HAL_Init+0x40>)
2000dcda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000dcde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
2000dce0:	2003      	movs	r0, #3
2000dce2:	f000 f931 	bl	2000df48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
2000dce6:	2000      	movs	r0, #0
2000dce8:	f000 f808 	bl	2000dcfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
2000dcec:	f7ff fe06 	bl	2000d8fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
2000dcf0:	2300      	movs	r3, #0
}
2000dcf2:	4618      	mov	r0, r3
2000dcf4:	bd80      	pop	{r7, pc}
2000dcf6:	bf00      	nop
2000dcf8:	40023c00 	.word	0x40023c00

2000dcfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
2000dcfc:	b580      	push	{r7, lr}
2000dcfe:	b082      	sub	sp, #8
2000dd00:	af00      	add	r7, sp, #0
2000dd02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
2000dd04:	4b12      	ldr	r3, [pc, #72]	; (2000dd50 <HAL_InitTick+0x54>)
2000dd06:	681a      	ldr	r2, [r3, #0]
2000dd08:	4b12      	ldr	r3, [pc, #72]	; (2000dd54 <HAL_InitTick+0x58>)
2000dd0a:	781b      	ldrb	r3, [r3, #0]
2000dd0c:	4619      	mov	r1, r3
2000dd0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2000dd12:	fbb3 f3f1 	udiv	r3, r3, r1
2000dd16:	fbb2 f3f3 	udiv	r3, r2, r3
2000dd1a:	4618      	mov	r0, r3
2000dd1c:	f000 f93b 	bl	2000df96 <HAL_SYSTICK_Config>
2000dd20:	4603      	mov	r3, r0
2000dd22:	2b00      	cmp	r3, #0
2000dd24:	d001      	beq.n	2000dd2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
2000dd26:	2301      	movs	r3, #1
2000dd28:	e00e      	b.n	2000dd48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
2000dd2a:	687b      	ldr	r3, [r7, #4]
2000dd2c:	2b0f      	cmp	r3, #15
2000dd2e:	d80a      	bhi.n	2000dd46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000dd30:	2200      	movs	r2, #0
2000dd32:	6879      	ldr	r1, [r7, #4]
2000dd34:	f04f 30ff 	mov.w	r0, #4294967295
2000dd38:	f000 f911 	bl	2000df5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
2000dd3c:	4a06      	ldr	r2, [pc, #24]	; (2000dd58 <HAL_InitTick+0x5c>)
2000dd3e:	687b      	ldr	r3, [r7, #4]
2000dd40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2000dd42:	2300      	movs	r3, #0
2000dd44:	e000      	b.n	2000dd48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
2000dd46:	2301      	movs	r3, #1
}
2000dd48:	4618      	mov	r0, r3
2000dd4a:	3708      	adds	r7, #8
2000dd4c:	46bd      	mov	sp, r7
2000dd4e:	bd80      	pop	{r7, pc}
2000dd50:	2000f970 	.word	0x2000f970
2000dd54:	2000f988 	.word	0x2000f988
2000dd58:	2000f984 	.word	0x2000f984

2000dd5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
2000dd5c:	b480      	push	{r7}
2000dd5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000dd60:	4b06      	ldr	r3, [pc, #24]	; (2000dd7c <HAL_IncTick+0x20>)
2000dd62:	781b      	ldrb	r3, [r3, #0]
2000dd64:	461a      	mov	r2, r3
2000dd66:	4b06      	ldr	r3, [pc, #24]	; (2000dd80 <HAL_IncTick+0x24>)
2000dd68:	681b      	ldr	r3, [r3, #0]
2000dd6a:	4413      	add	r3, r2
2000dd6c:	4a04      	ldr	r2, [pc, #16]	; (2000dd80 <HAL_IncTick+0x24>)
2000dd6e:	6013      	str	r3, [r2, #0]
}
2000dd70:	bf00      	nop
2000dd72:	46bd      	mov	sp, r7
2000dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dd78:	4770      	bx	lr
2000dd7a:	bf00      	nop
2000dd7c:	2000f988 	.word	0x2000f988
2000dd80:	2000fb28 	.word	0x2000fb28

2000dd84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000dd84:	b480      	push	{r7}
2000dd86:	af00      	add	r7, sp, #0
  return uwTick;
2000dd88:	4b03      	ldr	r3, [pc, #12]	; (2000dd98 <HAL_GetTick+0x14>)
2000dd8a:	681b      	ldr	r3, [r3, #0]
}
2000dd8c:	4618      	mov	r0, r3
2000dd8e:	46bd      	mov	sp, r7
2000dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
2000dd94:	4770      	bx	lr
2000dd96:	bf00      	nop
2000dd98:	2000fb28 	.word	0x2000fb28

2000dd9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
2000dd9c:	b580      	push	{r7, lr}
2000dd9e:	b084      	sub	sp, #16
2000dda0:	af00      	add	r7, sp, #0
2000dda2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2000dda4:	f7ff ffee 	bl	2000dd84 <HAL_GetTick>
2000dda8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
2000ddaa:	687b      	ldr	r3, [r7, #4]
2000ddac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
2000ddae:	68fb      	ldr	r3, [r7, #12]
2000ddb0:	f1b3 3fff 	cmp.w	r3, #4294967295
2000ddb4:	d005      	beq.n	2000ddc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2000ddb6:	4b0a      	ldr	r3, [pc, #40]	; (2000dde0 <HAL_Delay+0x44>)
2000ddb8:	781b      	ldrb	r3, [r3, #0]
2000ddba:	461a      	mov	r2, r3
2000ddbc:	68fb      	ldr	r3, [r7, #12]
2000ddbe:	4413      	add	r3, r2
2000ddc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
2000ddc2:	bf00      	nop
2000ddc4:	f7ff ffde 	bl	2000dd84 <HAL_GetTick>
2000ddc8:	4602      	mov	r2, r0
2000ddca:	68bb      	ldr	r3, [r7, #8]
2000ddcc:	1ad3      	subs	r3, r2, r3
2000ddce:	68fa      	ldr	r2, [r7, #12]
2000ddd0:	429a      	cmp	r2, r3
2000ddd2:	d8f7      	bhi.n	2000ddc4 <HAL_Delay+0x28>
  {
  }
}
2000ddd4:	bf00      	nop
2000ddd6:	bf00      	nop
2000ddd8:	3710      	adds	r7, #16
2000ddda:	46bd      	mov	sp, r7
2000dddc:	bd80      	pop	{r7, pc}
2000ddde:	bf00      	nop
2000dde0:	2000f988 	.word	0x2000f988

2000dde4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000dde4:	b480      	push	{r7}
2000dde6:	b085      	sub	sp, #20
2000dde8:	af00      	add	r7, sp, #0
2000ddea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000ddec:	687b      	ldr	r3, [r7, #4]
2000ddee:	f003 0307 	and.w	r3, r3, #7
2000ddf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
2000ddf4:	4b0c      	ldr	r3, [pc, #48]	; (2000de28 <__NVIC_SetPriorityGrouping+0x44>)
2000ddf6:	68db      	ldr	r3, [r3, #12]
2000ddf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
2000ddfa:	68ba      	ldr	r2, [r7, #8]
2000ddfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
2000de00:	4013      	ands	r3, r2
2000de02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
2000de04:	68fb      	ldr	r3, [r7, #12]
2000de06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
2000de08:	68bb      	ldr	r3, [r7, #8]
2000de0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
2000de0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
2000de10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2000de14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
2000de16:	4a04      	ldr	r2, [pc, #16]	; (2000de28 <__NVIC_SetPriorityGrouping+0x44>)
2000de18:	68bb      	ldr	r3, [r7, #8]
2000de1a:	60d3      	str	r3, [r2, #12]
}
2000de1c:	bf00      	nop
2000de1e:	3714      	adds	r7, #20
2000de20:	46bd      	mov	sp, r7
2000de22:	f85d 7b04 	ldr.w	r7, [sp], #4
2000de26:	4770      	bx	lr
2000de28:	e000ed00 	.word	0xe000ed00

2000de2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
2000de2c:	b480      	push	{r7}
2000de2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
2000de30:	4b04      	ldr	r3, [pc, #16]	; (2000de44 <__NVIC_GetPriorityGrouping+0x18>)
2000de32:	68db      	ldr	r3, [r3, #12]
2000de34:	0a1b      	lsrs	r3, r3, #8
2000de36:	f003 0307 	and.w	r3, r3, #7
}
2000de3a:	4618      	mov	r0, r3
2000de3c:	46bd      	mov	sp, r7
2000de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000de42:	4770      	bx	lr
2000de44:	e000ed00 	.word	0xe000ed00

2000de48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
2000de48:	b480      	push	{r7}
2000de4a:	b083      	sub	sp, #12
2000de4c:	af00      	add	r7, sp, #0
2000de4e:	4603      	mov	r3, r0
2000de50:	6039      	str	r1, [r7, #0]
2000de52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
2000de54:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000de58:	2b00      	cmp	r3, #0
2000de5a:	db0a      	blt.n	2000de72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000de5c:	683b      	ldr	r3, [r7, #0]
2000de5e:	b2da      	uxtb	r2, r3
2000de60:	490c      	ldr	r1, [pc, #48]	; (2000de94 <__NVIC_SetPriority+0x4c>)
2000de62:	f997 3007 	ldrsb.w	r3, [r7, #7]
2000de66:	0112      	lsls	r2, r2, #4
2000de68:	b2d2      	uxtb	r2, r2
2000de6a:	440b      	add	r3, r1
2000de6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
2000de70:	e00a      	b.n	2000de88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000de72:	683b      	ldr	r3, [r7, #0]
2000de74:	b2da      	uxtb	r2, r3
2000de76:	4908      	ldr	r1, [pc, #32]	; (2000de98 <__NVIC_SetPriority+0x50>)
2000de78:	79fb      	ldrb	r3, [r7, #7]
2000de7a:	f003 030f 	and.w	r3, r3, #15
2000de7e:	3b04      	subs	r3, #4
2000de80:	0112      	lsls	r2, r2, #4
2000de82:	b2d2      	uxtb	r2, r2
2000de84:	440b      	add	r3, r1
2000de86:	761a      	strb	r2, [r3, #24]
}
2000de88:	bf00      	nop
2000de8a:	370c      	adds	r7, #12
2000de8c:	46bd      	mov	sp, r7
2000de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
2000de92:	4770      	bx	lr
2000de94:	e000e100 	.word	0xe000e100
2000de98:	e000ed00 	.word	0xe000ed00

2000de9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000de9c:	b480      	push	{r7}
2000de9e:	b089      	sub	sp, #36	; 0x24
2000dea0:	af00      	add	r7, sp, #0
2000dea2:	60f8      	str	r0, [r7, #12]
2000dea4:	60b9      	str	r1, [r7, #8]
2000dea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
2000dea8:	68fb      	ldr	r3, [r7, #12]
2000deaa:	f003 0307 	and.w	r3, r3, #7
2000deae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
2000deb0:	69fb      	ldr	r3, [r7, #28]
2000deb2:	f1c3 0307 	rsb	r3, r3, #7
2000deb6:	2b04      	cmp	r3, #4
2000deb8:	bf28      	it	cs
2000deba:	2304      	movcs	r3, #4
2000debc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000debe:	69fb      	ldr	r3, [r7, #28]
2000dec0:	3304      	adds	r3, #4
2000dec2:	2b06      	cmp	r3, #6
2000dec4:	d902      	bls.n	2000decc <NVIC_EncodePriority+0x30>
2000dec6:	69fb      	ldr	r3, [r7, #28]
2000dec8:	3b03      	subs	r3, #3
2000deca:	e000      	b.n	2000dece <NVIC_EncodePriority+0x32>
2000decc:	2300      	movs	r3, #0
2000dece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000ded0:	f04f 32ff 	mov.w	r2, #4294967295
2000ded4:	69bb      	ldr	r3, [r7, #24]
2000ded6:	fa02 f303 	lsl.w	r3, r2, r3
2000deda:	43da      	mvns	r2, r3
2000dedc:	68bb      	ldr	r3, [r7, #8]
2000dede:	401a      	ands	r2, r3
2000dee0:	697b      	ldr	r3, [r7, #20]
2000dee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2000dee4:	f04f 31ff 	mov.w	r1, #4294967295
2000dee8:	697b      	ldr	r3, [r7, #20]
2000deea:	fa01 f303 	lsl.w	r3, r1, r3
2000deee:	43d9      	mvns	r1, r3
2000def0:	687b      	ldr	r3, [r7, #4]
2000def2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
2000def4:	4313      	orrs	r3, r2
         );
}
2000def6:	4618      	mov	r0, r3
2000def8:	3724      	adds	r7, #36	; 0x24
2000defa:	46bd      	mov	sp, r7
2000defc:	f85d 7b04 	ldr.w	r7, [sp], #4
2000df00:	4770      	bx	lr
	...

2000df04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
2000df04:	b580      	push	{r7, lr}
2000df06:	b082      	sub	sp, #8
2000df08:	af00      	add	r7, sp, #0
2000df0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
2000df0c:	687b      	ldr	r3, [r7, #4]
2000df0e:	3b01      	subs	r3, #1
2000df10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
2000df14:	d301      	bcc.n	2000df1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
2000df16:	2301      	movs	r3, #1
2000df18:	e00f      	b.n	2000df3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
2000df1a:	4a0a      	ldr	r2, [pc, #40]	; (2000df44 <SysTick_Config+0x40>)
2000df1c:	687b      	ldr	r3, [r7, #4]
2000df1e:	3b01      	subs	r3, #1
2000df20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
2000df22:	210f      	movs	r1, #15
2000df24:	f04f 30ff 	mov.w	r0, #4294967295
2000df28:	f7ff ff8e 	bl	2000de48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
2000df2c:	4b05      	ldr	r3, [pc, #20]	; (2000df44 <SysTick_Config+0x40>)
2000df2e:	2200      	movs	r2, #0
2000df30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
2000df32:	4b04      	ldr	r3, [pc, #16]	; (2000df44 <SysTick_Config+0x40>)
2000df34:	2207      	movs	r2, #7
2000df36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
2000df38:	2300      	movs	r3, #0
}
2000df3a:	4618      	mov	r0, r3
2000df3c:	3708      	adds	r7, #8
2000df3e:	46bd      	mov	sp, r7
2000df40:	bd80      	pop	{r7, pc}
2000df42:	bf00      	nop
2000df44:	e000e010 	.word	0xe000e010

2000df48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
2000df48:	b580      	push	{r7, lr}
2000df4a:	b082      	sub	sp, #8
2000df4c:	af00      	add	r7, sp, #0
2000df4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
2000df50:	6878      	ldr	r0, [r7, #4]
2000df52:	f7ff ff47 	bl	2000dde4 <__NVIC_SetPriorityGrouping>
}
2000df56:	bf00      	nop
2000df58:	3708      	adds	r7, #8
2000df5a:	46bd      	mov	sp, r7
2000df5c:	bd80      	pop	{r7, pc}

2000df5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
2000df5e:	b580      	push	{r7, lr}
2000df60:	b086      	sub	sp, #24
2000df62:	af00      	add	r7, sp, #0
2000df64:	4603      	mov	r3, r0
2000df66:	60b9      	str	r1, [r7, #8]
2000df68:	607a      	str	r2, [r7, #4]
2000df6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
2000df6c:	2300      	movs	r3, #0
2000df6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
2000df70:	f7ff ff5c 	bl	2000de2c <__NVIC_GetPriorityGrouping>
2000df74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
2000df76:	687a      	ldr	r2, [r7, #4]
2000df78:	68b9      	ldr	r1, [r7, #8]
2000df7a:	6978      	ldr	r0, [r7, #20]
2000df7c:	f7ff ff8e 	bl	2000de9c <NVIC_EncodePriority>
2000df80:	4602      	mov	r2, r0
2000df82:	f997 300f 	ldrsb.w	r3, [r7, #15]
2000df86:	4611      	mov	r1, r2
2000df88:	4618      	mov	r0, r3
2000df8a:	f7ff ff5d 	bl	2000de48 <__NVIC_SetPriority>
}
2000df8e:	bf00      	nop
2000df90:	3718      	adds	r7, #24
2000df92:	46bd      	mov	sp, r7
2000df94:	bd80      	pop	{r7, pc}

2000df96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
2000df96:	b580      	push	{r7, lr}
2000df98:	b082      	sub	sp, #8
2000df9a:	af00      	add	r7, sp, #0
2000df9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000df9e:	6878      	ldr	r0, [r7, #4]
2000dfa0:	f7ff ffb0 	bl	2000df04 <SysTick_Config>
2000dfa4:	4603      	mov	r3, r0
}
2000dfa6:	4618      	mov	r0, r3
2000dfa8:	3708      	adds	r7, #8
2000dfaa:	46bd      	mov	sp, r7
2000dfac:	bd80      	pop	{r7, pc}
	...

2000dfb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000dfb0:	b480      	push	{r7}
2000dfb2:	b089      	sub	sp, #36	; 0x24
2000dfb4:	af00      	add	r7, sp, #0
2000dfb6:	6078      	str	r0, [r7, #4]
2000dfb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
2000dfba:	2300      	movs	r3, #0
2000dfbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
2000dfbe:	2300      	movs	r3, #0
2000dfc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
2000dfc2:	2300      	movs	r3, #0
2000dfc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
2000dfc6:	2300      	movs	r3, #0
2000dfc8:	61fb      	str	r3, [r7, #28]
2000dfca:	e16b      	b.n	2000e2a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
2000dfcc:	2201      	movs	r2, #1
2000dfce:	69fb      	ldr	r3, [r7, #28]
2000dfd0:	fa02 f303 	lsl.w	r3, r2, r3
2000dfd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
2000dfd6:	683b      	ldr	r3, [r7, #0]
2000dfd8:	681b      	ldr	r3, [r3, #0]
2000dfda:	697a      	ldr	r2, [r7, #20]
2000dfdc:	4013      	ands	r3, r2
2000dfde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
2000dfe0:	693a      	ldr	r2, [r7, #16]
2000dfe2:	697b      	ldr	r3, [r7, #20]
2000dfe4:	429a      	cmp	r2, r3
2000dfe6:	f040 815a 	bne.w	2000e29e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000dfea:	683b      	ldr	r3, [r7, #0]
2000dfec:	685b      	ldr	r3, [r3, #4]
2000dfee:	2b01      	cmp	r3, #1
2000dff0:	d00b      	beq.n	2000e00a <HAL_GPIO_Init+0x5a>
2000dff2:	683b      	ldr	r3, [r7, #0]
2000dff4:	685b      	ldr	r3, [r3, #4]
2000dff6:	2b02      	cmp	r3, #2
2000dff8:	d007      	beq.n	2000e00a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000dffa:	683b      	ldr	r3, [r7, #0]
2000dffc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
2000dffe:	2b11      	cmp	r3, #17
2000e000:	d003      	beq.n	2000e00a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e002:	683b      	ldr	r3, [r7, #0]
2000e004:	685b      	ldr	r3, [r3, #4]
2000e006:	2b12      	cmp	r3, #18
2000e008:	d130      	bne.n	2000e06c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
2000e00a:	687b      	ldr	r3, [r7, #4]
2000e00c:	689b      	ldr	r3, [r3, #8]
2000e00e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
2000e010:	69fb      	ldr	r3, [r7, #28]
2000e012:	005b      	lsls	r3, r3, #1
2000e014:	2203      	movs	r2, #3
2000e016:	fa02 f303 	lsl.w	r3, r2, r3
2000e01a:	43db      	mvns	r3, r3
2000e01c:	69ba      	ldr	r2, [r7, #24]
2000e01e:	4013      	ands	r3, r2
2000e020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2000e022:	683b      	ldr	r3, [r7, #0]
2000e024:	68da      	ldr	r2, [r3, #12]
2000e026:	69fb      	ldr	r3, [r7, #28]
2000e028:	005b      	lsls	r3, r3, #1
2000e02a:	fa02 f303 	lsl.w	r3, r2, r3
2000e02e:	69ba      	ldr	r2, [r7, #24]
2000e030:	4313      	orrs	r3, r2
2000e032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2000e034:	687b      	ldr	r3, [r7, #4]
2000e036:	69ba      	ldr	r2, [r7, #24]
2000e038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
2000e03a:	687b      	ldr	r3, [r7, #4]
2000e03c:	685b      	ldr	r3, [r3, #4]
2000e03e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
2000e040:	2201      	movs	r2, #1
2000e042:	69fb      	ldr	r3, [r7, #28]
2000e044:	fa02 f303 	lsl.w	r3, r2, r3
2000e048:	43db      	mvns	r3, r3
2000e04a:	69ba      	ldr	r2, [r7, #24]
2000e04c:	4013      	ands	r3, r2
2000e04e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2000e050:	683b      	ldr	r3, [r7, #0]
2000e052:	685b      	ldr	r3, [r3, #4]
2000e054:	091b      	lsrs	r3, r3, #4
2000e056:	f003 0201 	and.w	r2, r3, #1
2000e05a:	69fb      	ldr	r3, [r7, #28]
2000e05c:	fa02 f303 	lsl.w	r3, r2, r3
2000e060:	69ba      	ldr	r2, [r7, #24]
2000e062:	4313      	orrs	r3, r2
2000e064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
2000e066:	687b      	ldr	r3, [r7, #4]
2000e068:	69ba      	ldr	r2, [r7, #24]
2000e06a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
2000e06c:	687b      	ldr	r3, [r7, #4]
2000e06e:	68db      	ldr	r3, [r3, #12]
2000e070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
2000e072:	69fb      	ldr	r3, [r7, #28]
2000e074:	005b      	lsls	r3, r3, #1
2000e076:	2203      	movs	r2, #3
2000e078:	fa02 f303 	lsl.w	r3, r2, r3
2000e07c:	43db      	mvns	r3, r3
2000e07e:	69ba      	ldr	r2, [r7, #24]
2000e080:	4013      	ands	r3, r2
2000e082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
2000e084:	683b      	ldr	r3, [r7, #0]
2000e086:	689a      	ldr	r2, [r3, #8]
2000e088:	69fb      	ldr	r3, [r7, #28]
2000e08a:	005b      	lsls	r3, r3, #1
2000e08c:	fa02 f303 	lsl.w	r3, r2, r3
2000e090:	69ba      	ldr	r2, [r7, #24]
2000e092:	4313      	orrs	r3, r2
2000e094:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
2000e096:	687b      	ldr	r3, [r7, #4]
2000e098:	69ba      	ldr	r2, [r7, #24]
2000e09a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2000e09c:	683b      	ldr	r3, [r7, #0]
2000e09e:	685b      	ldr	r3, [r3, #4]
2000e0a0:	2b02      	cmp	r3, #2
2000e0a2:	d003      	beq.n	2000e0ac <HAL_GPIO_Init+0xfc>
2000e0a4:	683b      	ldr	r3, [r7, #0]
2000e0a6:	685b      	ldr	r3, [r3, #4]
2000e0a8:	2b12      	cmp	r3, #18
2000e0aa:	d123      	bne.n	2000e0f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
2000e0ac:	69fb      	ldr	r3, [r7, #28]
2000e0ae:	08da      	lsrs	r2, r3, #3
2000e0b0:	687b      	ldr	r3, [r7, #4]
2000e0b2:	3208      	adds	r2, #8
2000e0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
2000e0b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
2000e0ba:	69fb      	ldr	r3, [r7, #28]
2000e0bc:	f003 0307 	and.w	r3, r3, #7
2000e0c0:	009b      	lsls	r3, r3, #2
2000e0c2:	220f      	movs	r2, #15
2000e0c4:	fa02 f303 	lsl.w	r3, r2, r3
2000e0c8:	43db      	mvns	r3, r3
2000e0ca:	69ba      	ldr	r2, [r7, #24]
2000e0cc:	4013      	ands	r3, r2
2000e0ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
2000e0d0:	683b      	ldr	r3, [r7, #0]
2000e0d2:	691a      	ldr	r2, [r3, #16]
2000e0d4:	69fb      	ldr	r3, [r7, #28]
2000e0d6:	f003 0307 	and.w	r3, r3, #7
2000e0da:	009b      	lsls	r3, r3, #2
2000e0dc:	fa02 f303 	lsl.w	r3, r2, r3
2000e0e0:	69ba      	ldr	r2, [r7, #24]
2000e0e2:	4313      	orrs	r3, r2
2000e0e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
2000e0e6:	69fb      	ldr	r3, [r7, #28]
2000e0e8:	08da      	lsrs	r2, r3, #3
2000e0ea:	687b      	ldr	r3, [r7, #4]
2000e0ec:	3208      	adds	r2, #8
2000e0ee:	69b9      	ldr	r1, [r7, #24]
2000e0f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000e0f4:	687b      	ldr	r3, [r7, #4]
2000e0f6:	681b      	ldr	r3, [r3, #0]
2000e0f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
2000e0fa:	69fb      	ldr	r3, [r7, #28]
2000e0fc:	005b      	lsls	r3, r3, #1
2000e0fe:	2203      	movs	r2, #3
2000e100:	fa02 f303 	lsl.w	r3, r2, r3
2000e104:	43db      	mvns	r3, r3
2000e106:	69ba      	ldr	r2, [r7, #24]
2000e108:	4013      	ands	r3, r2
2000e10a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
2000e10c:	683b      	ldr	r3, [r7, #0]
2000e10e:	685b      	ldr	r3, [r3, #4]
2000e110:	f003 0203 	and.w	r2, r3, #3
2000e114:	69fb      	ldr	r3, [r7, #28]
2000e116:	005b      	lsls	r3, r3, #1
2000e118:	fa02 f303 	lsl.w	r3, r2, r3
2000e11c:	69ba      	ldr	r2, [r7, #24]
2000e11e:	4313      	orrs	r3, r2
2000e120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2000e122:	687b      	ldr	r3, [r7, #4]
2000e124:	69ba      	ldr	r2, [r7, #24]
2000e126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
2000e128:	683b      	ldr	r3, [r7, #0]
2000e12a:	685b      	ldr	r3, [r3, #4]
2000e12c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e130:	2b00      	cmp	r3, #0
2000e132:	f000 80b4 	beq.w	2000e29e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
2000e136:	2300      	movs	r3, #0
2000e138:	60fb      	str	r3, [r7, #12]
2000e13a:	4b60      	ldr	r3, [pc, #384]	; (2000e2bc <HAL_GPIO_Init+0x30c>)
2000e13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e13e:	4a5f      	ldr	r2, [pc, #380]	; (2000e2bc <HAL_GPIO_Init+0x30c>)
2000e140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
2000e144:	6453      	str	r3, [r2, #68]	; 0x44
2000e146:	4b5d      	ldr	r3, [pc, #372]	; (2000e2bc <HAL_GPIO_Init+0x30c>)
2000e148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2000e14a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
2000e14e:	60fb      	str	r3, [r7, #12]
2000e150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2000e152:	4a5b      	ldr	r2, [pc, #364]	; (2000e2c0 <HAL_GPIO_Init+0x310>)
2000e154:	69fb      	ldr	r3, [r7, #28]
2000e156:	089b      	lsrs	r3, r3, #2
2000e158:	3302      	adds	r3, #2
2000e15a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2000e15e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
2000e160:	69fb      	ldr	r3, [r7, #28]
2000e162:	f003 0303 	and.w	r3, r3, #3
2000e166:	009b      	lsls	r3, r3, #2
2000e168:	220f      	movs	r2, #15
2000e16a:	fa02 f303 	lsl.w	r3, r2, r3
2000e16e:	43db      	mvns	r3, r3
2000e170:	69ba      	ldr	r2, [r7, #24]
2000e172:	4013      	ands	r3, r2
2000e174:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
2000e176:	687b      	ldr	r3, [r7, #4]
2000e178:	4a52      	ldr	r2, [pc, #328]	; (2000e2c4 <HAL_GPIO_Init+0x314>)
2000e17a:	4293      	cmp	r3, r2
2000e17c:	d02b      	beq.n	2000e1d6 <HAL_GPIO_Init+0x226>
2000e17e:	687b      	ldr	r3, [r7, #4]
2000e180:	4a51      	ldr	r2, [pc, #324]	; (2000e2c8 <HAL_GPIO_Init+0x318>)
2000e182:	4293      	cmp	r3, r2
2000e184:	d025      	beq.n	2000e1d2 <HAL_GPIO_Init+0x222>
2000e186:	687b      	ldr	r3, [r7, #4]
2000e188:	4a50      	ldr	r2, [pc, #320]	; (2000e2cc <HAL_GPIO_Init+0x31c>)
2000e18a:	4293      	cmp	r3, r2
2000e18c:	d01f      	beq.n	2000e1ce <HAL_GPIO_Init+0x21e>
2000e18e:	687b      	ldr	r3, [r7, #4]
2000e190:	4a4f      	ldr	r2, [pc, #316]	; (2000e2d0 <HAL_GPIO_Init+0x320>)
2000e192:	4293      	cmp	r3, r2
2000e194:	d019      	beq.n	2000e1ca <HAL_GPIO_Init+0x21a>
2000e196:	687b      	ldr	r3, [r7, #4]
2000e198:	4a4e      	ldr	r2, [pc, #312]	; (2000e2d4 <HAL_GPIO_Init+0x324>)
2000e19a:	4293      	cmp	r3, r2
2000e19c:	d013      	beq.n	2000e1c6 <HAL_GPIO_Init+0x216>
2000e19e:	687b      	ldr	r3, [r7, #4]
2000e1a0:	4a4d      	ldr	r2, [pc, #308]	; (2000e2d8 <HAL_GPIO_Init+0x328>)
2000e1a2:	4293      	cmp	r3, r2
2000e1a4:	d00d      	beq.n	2000e1c2 <HAL_GPIO_Init+0x212>
2000e1a6:	687b      	ldr	r3, [r7, #4]
2000e1a8:	4a4c      	ldr	r2, [pc, #304]	; (2000e2dc <HAL_GPIO_Init+0x32c>)
2000e1aa:	4293      	cmp	r3, r2
2000e1ac:	d007      	beq.n	2000e1be <HAL_GPIO_Init+0x20e>
2000e1ae:	687b      	ldr	r3, [r7, #4]
2000e1b0:	4a4b      	ldr	r2, [pc, #300]	; (2000e2e0 <HAL_GPIO_Init+0x330>)
2000e1b2:	4293      	cmp	r3, r2
2000e1b4:	d101      	bne.n	2000e1ba <HAL_GPIO_Init+0x20a>
2000e1b6:	2307      	movs	r3, #7
2000e1b8:	e00e      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1ba:	2308      	movs	r3, #8
2000e1bc:	e00c      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1be:	2306      	movs	r3, #6
2000e1c0:	e00a      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1c2:	2305      	movs	r3, #5
2000e1c4:	e008      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1c6:	2304      	movs	r3, #4
2000e1c8:	e006      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1ca:	2303      	movs	r3, #3
2000e1cc:	e004      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1ce:	2302      	movs	r3, #2
2000e1d0:	e002      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1d2:	2301      	movs	r3, #1
2000e1d4:	e000      	b.n	2000e1d8 <HAL_GPIO_Init+0x228>
2000e1d6:	2300      	movs	r3, #0
2000e1d8:	69fa      	ldr	r2, [r7, #28]
2000e1da:	f002 0203 	and.w	r2, r2, #3
2000e1de:	0092      	lsls	r2, r2, #2
2000e1e0:	4093      	lsls	r3, r2
2000e1e2:	69ba      	ldr	r2, [r7, #24]
2000e1e4:	4313      	orrs	r3, r2
2000e1e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
2000e1e8:	4935      	ldr	r1, [pc, #212]	; (2000e2c0 <HAL_GPIO_Init+0x310>)
2000e1ea:	69fb      	ldr	r3, [r7, #28]
2000e1ec:	089b      	lsrs	r3, r3, #2
2000e1ee:	3302      	adds	r3, #2
2000e1f0:	69ba      	ldr	r2, [r7, #24]
2000e1f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
2000e1f6:	4b3b      	ldr	r3, [pc, #236]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e1f8:	681b      	ldr	r3, [r3, #0]
2000e1fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e1fc:	693b      	ldr	r3, [r7, #16]
2000e1fe:	43db      	mvns	r3, r3
2000e200:	69ba      	ldr	r2, [r7, #24]
2000e202:	4013      	ands	r3, r2
2000e204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
2000e206:	683b      	ldr	r3, [r7, #0]
2000e208:	685b      	ldr	r3, [r3, #4]
2000e20a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000e20e:	2b00      	cmp	r3, #0
2000e210:	d003      	beq.n	2000e21a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
2000e212:	69ba      	ldr	r2, [r7, #24]
2000e214:	693b      	ldr	r3, [r7, #16]
2000e216:	4313      	orrs	r3, r2
2000e218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
2000e21a:	4a32      	ldr	r2, [pc, #200]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e21c:	69bb      	ldr	r3, [r7, #24]
2000e21e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
2000e220:	4b30      	ldr	r3, [pc, #192]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e222:	685b      	ldr	r3, [r3, #4]
2000e224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e226:	693b      	ldr	r3, [r7, #16]
2000e228:	43db      	mvns	r3, r3
2000e22a:	69ba      	ldr	r2, [r7, #24]
2000e22c:	4013      	ands	r3, r2
2000e22e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
2000e230:	683b      	ldr	r3, [r7, #0]
2000e232:	685b      	ldr	r3, [r3, #4]
2000e234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e238:	2b00      	cmp	r3, #0
2000e23a:	d003      	beq.n	2000e244 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
2000e23c:	69ba      	ldr	r2, [r7, #24]
2000e23e:	693b      	ldr	r3, [r7, #16]
2000e240:	4313      	orrs	r3, r2
2000e242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
2000e244:	4a27      	ldr	r2, [pc, #156]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e246:	69bb      	ldr	r3, [r7, #24]
2000e248:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
2000e24a:	4b26      	ldr	r3, [pc, #152]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e24c:	689b      	ldr	r3, [r3, #8]
2000e24e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e250:	693b      	ldr	r3, [r7, #16]
2000e252:	43db      	mvns	r3, r3
2000e254:	69ba      	ldr	r2, [r7, #24]
2000e256:	4013      	ands	r3, r2
2000e258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
2000e25a:	683b      	ldr	r3, [r7, #0]
2000e25c:	685b      	ldr	r3, [r3, #4]
2000e25e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000e262:	2b00      	cmp	r3, #0
2000e264:	d003      	beq.n	2000e26e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
2000e266:	69ba      	ldr	r2, [r7, #24]
2000e268:	693b      	ldr	r3, [r7, #16]
2000e26a:	4313      	orrs	r3, r2
2000e26c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
2000e26e:	4a1d      	ldr	r2, [pc, #116]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e270:	69bb      	ldr	r3, [r7, #24]
2000e272:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
2000e274:	4b1b      	ldr	r3, [pc, #108]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e276:	68db      	ldr	r3, [r3, #12]
2000e278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
2000e27a:	693b      	ldr	r3, [r7, #16]
2000e27c:	43db      	mvns	r3, r3
2000e27e:	69ba      	ldr	r2, [r7, #24]
2000e280:	4013      	ands	r3, r2
2000e282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
2000e284:	683b      	ldr	r3, [r7, #0]
2000e286:	685b      	ldr	r3, [r3, #4]
2000e288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2000e28c:	2b00      	cmp	r3, #0
2000e28e:	d003      	beq.n	2000e298 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
2000e290:	69ba      	ldr	r2, [r7, #24]
2000e292:	693b      	ldr	r3, [r7, #16]
2000e294:	4313      	orrs	r3, r2
2000e296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
2000e298:	4a12      	ldr	r2, [pc, #72]	; (2000e2e4 <HAL_GPIO_Init+0x334>)
2000e29a:	69bb      	ldr	r3, [r7, #24]
2000e29c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
2000e29e:	69fb      	ldr	r3, [r7, #28]
2000e2a0:	3301      	adds	r3, #1
2000e2a2:	61fb      	str	r3, [r7, #28]
2000e2a4:	69fb      	ldr	r3, [r7, #28]
2000e2a6:	2b0f      	cmp	r3, #15
2000e2a8:	f67f ae90 	bls.w	2000dfcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
2000e2ac:	bf00      	nop
2000e2ae:	bf00      	nop
2000e2b0:	3724      	adds	r7, #36	; 0x24
2000e2b2:	46bd      	mov	sp, r7
2000e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e2b8:	4770      	bx	lr
2000e2ba:	bf00      	nop
2000e2bc:	40023800 	.word	0x40023800
2000e2c0:	40013800 	.word	0x40013800
2000e2c4:	40020000 	.word	0x40020000
2000e2c8:	40020400 	.word	0x40020400
2000e2cc:	40020800 	.word	0x40020800
2000e2d0:	40020c00 	.word	0x40020c00
2000e2d4:	40021000 	.word	0x40021000
2000e2d8:	40021400 	.word	0x40021400
2000e2dc:	40021800 	.word	0x40021800
2000e2e0:	40021c00 	.word	0x40021c00
2000e2e4:	40013c00 	.word	0x40013c00

2000e2e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000e2e8:	b480      	push	{r7}
2000e2ea:	b085      	sub	sp, #20
2000e2ec:	af00      	add	r7, sp, #0
2000e2ee:	6078      	str	r0, [r7, #4]
2000e2f0:	460b      	mov	r3, r1
2000e2f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
2000e2f4:	687b      	ldr	r3, [r7, #4]
2000e2f6:	691a      	ldr	r2, [r3, #16]
2000e2f8:	887b      	ldrh	r3, [r7, #2]
2000e2fa:	4013      	ands	r3, r2
2000e2fc:	2b00      	cmp	r3, #0
2000e2fe:	d002      	beq.n	2000e306 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
2000e300:	2301      	movs	r3, #1
2000e302:	73fb      	strb	r3, [r7, #15]
2000e304:	e001      	b.n	2000e30a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2000e306:	2300      	movs	r3, #0
2000e308:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2000e30a:	7bfb      	ldrb	r3, [r7, #15]
}
2000e30c:	4618      	mov	r0, r3
2000e30e:	3714      	adds	r7, #20
2000e310:	46bd      	mov	sp, r7
2000e312:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e316:	4770      	bx	lr

2000e318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2000e318:	b480      	push	{r7}
2000e31a:	b083      	sub	sp, #12
2000e31c:	af00      	add	r7, sp, #0
2000e31e:	6078      	str	r0, [r7, #4]
2000e320:	460b      	mov	r3, r1
2000e322:	807b      	strh	r3, [r7, #2]
2000e324:	4613      	mov	r3, r2
2000e326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
2000e328:	787b      	ldrb	r3, [r7, #1]
2000e32a:	2b00      	cmp	r3, #0
2000e32c:	d003      	beq.n	2000e336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
2000e32e:	887a      	ldrh	r2, [r7, #2]
2000e330:	687b      	ldr	r3, [r7, #4]
2000e332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
2000e334:	e003      	b.n	2000e33e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
2000e336:	887b      	ldrh	r3, [r7, #2]
2000e338:	041a      	lsls	r2, r3, #16
2000e33a:	687b      	ldr	r3, [r7, #4]
2000e33c:	619a      	str	r2, [r3, #24]
}
2000e33e:	bf00      	nop
2000e340:	370c      	adds	r7, #12
2000e342:	46bd      	mov	sp, r7
2000e344:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e348:	4770      	bx	lr

2000e34a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
2000e34a:	b480      	push	{r7}
2000e34c:	b083      	sub	sp, #12
2000e34e:	af00      	add	r7, sp, #0
2000e350:	6078      	str	r0, [r7, #4]
2000e352:	460b      	mov	r3, r1
2000e354:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
2000e356:	687b      	ldr	r3, [r7, #4]
2000e358:	695a      	ldr	r2, [r3, #20]
2000e35a:	887b      	ldrh	r3, [r7, #2]
2000e35c:	401a      	ands	r2, r3
2000e35e:	887b      	ldrh	r3, [r7, #2]
2000e360:	429a      	cmp	r2, r3
2000e362:	d104      	bne.n	2000e36e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
2000e364:	887b      	ldrh	r3, [r7, #2]
2000e366:	041a      	lsls	r2, r3, #16
2000e368:	687b      	ldr	r3, [r7, #4]
2000e36a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
2000e36c:	e002      	b.n	2000e374 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
2000e36e:	887a      	ldrh	r2, [r7, #2]
2000e370:	687b      	ldr	r3, [r7, #4]
2000e372:	619a      	str	r2, [r3, #24]
}
2000e374:	bf00      	nop
2000e376:	370c      	adds	r7, #12
2000e378:	46bd      	mov	sp, r7
2000e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000e37e:	4770      	bx	lr

2000e380 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
2000e380:	b580      	push	{r7, lr}
2000e382:	b084      	sub	sp, #16
2000e384:	af00      	add	r7, sp, #0
2000e386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
2000e388:	687b      	ldr	r3, [r7, #4]
2000e38a:	2b00      	cmp	r3, #0
2000e38c:	d101      	bne.n	2000e392 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
2000e38e:	2301      	movs	r3, #1
2000e390:	e02b      	b.n	2000e3ea <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
2000e392:	687b      	ldr	r3, [r7, #4]
2000e394:	681b      	ldr	r3, [r3, #0]
2000e396:	f64c 42cc 	movw	r2, #52428	; 0xcccc
2000e39a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
2000e39c:	687b      	ldr	r3, [r7, #4]
2000e39e:	681b      	ldr	r3, [r3, #0]
2000e3a0:	f245 5255 	movw	r2, #21845	; 0x5555
2000e3a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
2000e3a6:	687b      	ldr	r3, [r7, #4]
2000e3a8:	681b      	ldr	r3, [r3, #0]
2000e3aa:	687a      	ldr	r2, [r7, #4]
2000e3ac:	6852      	ldr	r2, [r2, #4]
2000e3ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
2000e3b0:	687b      	ldr	r3, [r7, #4]
2000e3b2:	681b      	ldr	r3, [r3, #0]
2000e3b4:	687a      	ldr	r2, [r7, #4]
2000e3b6:	6892      	ldr	r2, [r2, #8]
2000e3b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
2000e3ba:	f7ff fce3 	bl	2000dd84 <HAL_GetTick>
2000e3be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
2000e3c0:	e008      	b.n	2000e3d4 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
2000e3c2:	f7ff fcdf 	bl	2000dd84 <HAL_GetTick>
2000e3c6:	4602      	mov	r2, r0
2000e3c8:	68fb      	ldr	r3, [r7, #12]
2000e3ca:	1ad3      	subs	r3, r2, r3
2000e3cc:	2b30      	cmp	r3, #48	; 0x30
2000e3ce:	d901      	bls.n	2000e3d4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
2000e3d0:	2303      	movs	r3, #3
2000e3d2:	e00a      	b.n	2000e3ea <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
2000e3d4:	687b      	ldr	r3, [r7, #4]
2000e3d6:	681b      	ldr	r3, [r3, #0]
2000e3d8:	68db      	ldr	r3, [r3, #12]
2000e3da:	2b00      	cmp	r3, #0
2000e3dc:	d1f1      	bne.n	2000e3c2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
2000e3de:	687b      	ldr	r3, [r7, #4]
2000e3e0:	681b      	ldr	r3, [r3, #0]
2000e3e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
2000e3e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
2000e3e8:	2300      	movs	r3, #0
}
2000e3ea:	4618      	mov	r0, r3
2000e3ec:	3710      	adds	r7, #16
2000e3ee:	46bd      	mov	sp, r7
2000e3f0:	bd80      	pop	{r7, pc}
	...

2000e3f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
2000e3f4:	b580      	push	{r7, lr}
2000e3f6:	b086      	sub	sp, #24
2000e3f8:	af00      	add	r7, sp, #0
2000e3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
2000e3fc:	687b      	ldr	r3, [r7, #4]
2000e3fe:	2b00      	cmp	r3, #0
2000e400:	d101      	bne.n	2000e406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
2000e402:	2301      	movs	r3, #1
2000e404:	e25b      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000e406:	687b      	ldr	r3, [r7, #4]
2000e408:	681b      	ldr	r3, [r3, #0]
2000e40a:	f003 0301 	and.w	r3, r3, #1
2000e40e:	2b00      	cmp	r3, #0
2000e410:	d075      	beq.n	2000e4fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e412:	4ba3      	ldr	r3, [pc, #652]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e414:	689b      	ldr	r3, [r3, #8]
2000e416:	f003 030c 	and.w	r3, r3, #12
2000e41a:	2b04      	cmp	r3, #4
2000e41c:	d00c      	beq.n	2000e438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e41e:	4ba0      	ldr	r3, [pc, #640]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e420:	689b      	ldr	r3, [r3, #8]
2000e422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
2000e426:	2b08      	cmp	r3, #8
2000e428:	d112      	bne.n	2000e450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
2000e42a:	4b9d      	ldr	r3, [pc, #628]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e42c:	685b      	ldr	r3, [r3, #4]
2000e42e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
2000e436:	d10b      	bne.n	2000e450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e438:	4b99      	ldr	r3, [pc, #612]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e43a:	681b      	ldr	r3, [r3, #0]
2000e43c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e440:	2b00      	cmp	r3, #0
2000e442:	d05b      	beq.n	2000e4fc <HAL_RCC_OscConfig+0x108>
2000e444:	687b      	ldr	r3, [r7, #4]
2000e446:	685b      	ldr	r3, [r3, #4]
2000e448:	2b00      	cmp	r3, #0
2000e44a:	d157      	bne.n	2000e4fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
2000e44c:	2301      	movs	r3, #1
2000e44e:	e236      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
2000e450:	687b      	ldr	r3, [r7, #4]
2000e452:	685b      	ldr	r3, [r3, #4]
2000e454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000e458:	d106      	bne.n	2000e468 <HAL_RCC_OscConfig+0x74>
2000e45a:	4b91      	ldr	r3, [pc, #580]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e45c:	681b      	ldr	r3, [r3, #0]
2000e45e:	4a90      	ldr	r2, [pc, #576]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e464:	6013      	str	r3, [r2, #0]
2000e466:	e01d      	b.n	2000e4a4 <HAL_RCC_OscConfig+0xb0>
2000e468:	687b      	ldr	r3, [r7, #4]
2000e46a:	685b      	ldr	r3, [r3, #4]
2000e46c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
2000e470:	d10c      	bne.n	2000e48c <HAL_RCC_OscConfig+0x98>
2000e472:	4b8b      	ldr	r3, [pc, #556]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e474:	681b      	ldr	r3, [r3, #0]
2000e476:	4a8a      	ldr	r2, [pc, #552]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2000e47c:	6013      	str	r3, [r2, #0]
2000e47e:	4b88      	ldr	r3, [pc, #544]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e480:	681b      	ldr	r3, [r3, #0]
2000e482:	4a87      	ldr	r2, [pc, #540]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000e488:	6013      	str	r3, [r2, #0]
2000e48a:	e00b      	b.n	2000e4a4 <HAL_RCC_OscConfig+0xb0>
2000e48c:	4b84      	ldr	r3, [pc, #528]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e48e:	681b      	ldr	r3, [r3, #0]
2000e490:	4a83      	ldr	r2, [pc, #524]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000e496:	6013      	str	r3, [r2, #0]
2000e498:	4b81      	ldr	r3, [pc, #516]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e49a:	681b      	ldr	r3, [r3, #0]
2000e49c:	4a80      	ldr	r2, [pc, #512]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e49e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2000e4a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
2000e4a4:	687b      	ldr	r3, [r7, #4]
2000e4a6:	685b      	ldr	r3, [r3, #4]
2000e4a8:	2b00      	cmp	r3, #0
2000e4aa:	d013      	beq.n	2000e4d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e4ac:	f7ff fc6a 	bl	2000dd84 <HAL_GetTick>
2000e4b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e4b2:	e008      	b.n	2000e4c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e4b4:	f7ff fc66 	bl	2000dd84 <HAL_GetTick>
2000e4b8:	4602      	mov	r2, r0
2000e4ba:	693b      	ldr	r3, [r7, #16]
2000e4bc:	1ad3      	subs	r3, r2, r3
2000e4be:	2b64      	cmp	r3, #100	; 0x64
2000e4c0:	d901      	bls.n	2000e4c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
2000e4c2:	2303      	movs	r3, #3
2000e4c4:	e1fb      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e4c6:	4b76      	ldr	r3, [pc, #472]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e4c8:	681b      	ldr	r3, [r3, #0]
2000e4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e4ce:	2b00      	cmp	r3, #0
2000e4d0:	d0f0      	beq.n	2000e4b4 <HAL_RCC_OscConfig+0xc0>
2000e4d2:	e014      	b.n	2000e4fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e4d4:	f7ff fc56 	bl	2000dd84 <HAL_GetTick>
2000e4d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e4da:	e008      	b.n	2000e4ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2000e4dc:	f7ff fc52 	bl	2000dd84 <HAL_GetTick>
2000e4e0:	4602      	mov	r2, r0
2000e4e2:	693b      	ldr	r3, [r7, #16]
2000e4e4:	1ad3      	subs	r3, r2, r3
2000e4e6:	2b64      	cmp	r3, #100	; 0x64
2000e4e8:	d901      	bls.n	2000e4ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
2000e4ea:	2303      	movs	r3, #3
2000e4ec:	e1e7      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
2000e4ee:	4b6c      	ldr	r3, [pc, #432]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e4f0:	681b      	ldr	r3, [r3, #0]
2000e4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e4f6:	2b00      	cmp	r3, #0
2000e4f8:	d1f0      	bne.n	2000e4dc <HAL_RCC_OscConfig+0xe8>
2000e4fa:	e000      	b.n	2000e4fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000e4fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
2000e4fe:	687b      	ldr	r3, [r7, #4]
2000e500:	681b      	ldr	r3, [r3, #0]
2000e502:	f003 0302 	and.w	r3, r3, #2
2000e506:	2b00      	cmp	r3, #0
2000e508:	d063      	beq.n	2000e5d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e50a:	4b65      	ldr	r3, [pc, #404]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e50c:	689b      	ldr	r3, [r3, #8]
2000e50e:	f003 030c 	and.w	r3, r3, #12
2000e512:	2b00      	cmp	r3, #0
2000e514:	d00b      	beq.n	2000e52e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e516:	4b62      	ldr	r3, [pc, #392]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e518:	689b      	ldr	r3, [r3, #8]
2000e51a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
2000e51e:	2b08      	cmp	r3, #8
2000e520:	d11c      	bne.n	2000e55c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
2000e522:	4b5f      	ldr	r3, [pc, #380]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e524:	685b      	ldr	r3, [r3, #4]
2000e526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
2000e52a:	2b00      	cmp	r3, #0
2000e52c:	d116      	bne.n	2000e55c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e52e:	4b5c      	ldr	r3, [pc, #368]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e530:	681b      	ldr	r3, [r3, #0]
2000e532:	f003 0302 	and.w	r3, r3, #2
2000e536:	2b00      	cmp	r3, #0
2000e538:	d005      	beq.n	2000e546 <HAL_RCC_OscConfig+0x152>
2000e53a:	687b      	ldr	r3, [r7, #4]
2000e53c:	68db      	ldr	r3, [r3, #12]
2000e53e:	2b01      	cmp	r3, #1
2000e540:	d001      	beq.n	2000e546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
2000e542:	2301      	movs	r3, #1
2000e544:	e1bb      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e546:	4b56      	ldr	r3, [pc, #344]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e548:	681b      	ldr	r3, [r3, #0]
2000e54a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e54e:	687b      	ldr	r3, [r7, #4]
2000e550:	691b      	ldr	r3, [r3, #16]
2000e552:	00db      	lsls	r3, r3, #3
2000e554:	4952      	ldr	r1, [pc, #328]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e556:	4313      	orrs	r3, r2
2000e558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
2000e55a:	e03a      	b.n	2000e5d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
2000e55c:	687b      	ldr	r3, [r7, #4]
2000e55e:	68db      	ldr	r3, [r3, #12]
2000e560:	2b00      	cmp	r3, #0
2000e562:	d020      	beq.n	2000e5a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000e564:	4b4f      	ldr	r3, [pc, #316]	; (2000e6a4 <HAL_RCC_OscConfig+0x2b0>)
2000e566:	2201      	movs	r2, #1
2000e568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e56a:	f7ff fc0b 	bl	2000dd84 <HAL_GetTick>
2000e56e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e570:	e008      	b.n	2000e584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e572:	f7ff fc07 	bl	2000dd84 <HAL_GetTick>
2000e576:	4602      	mov	r2, r0
2000e578:	693b      	ldr	r3, [r7, #16]
2000e57a:	1ad3      	subs	r3, r2, r3
2000e57c:	2b02      	cmp	r3, #2
2000e57e:	d901      	bls.n	2000e584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
2000e580:	2303      	movs	r3, #3
2000e582:	e19c      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e584:	4b46      	ldr	r3, [pc, #280]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e586:	681b      	ldr	r3, [r3, #0]
2000e588:	f003 0302 	and.w	r3, r3, #2
2000e58c:	2b00      	cmp	r3, #0
2000e58e:	d0f0      	beq.n	2000e572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000e590:	4b43      	ldr	r3, [pc, #268]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e592:	681b      	ldr	r3, [r3, #0]
2000e594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
2000e598:	687b      	ldr	r3, [r7, #4]
2000e59a:	691b      	ldr	r3, [r3, #16]
2000e59c:	00db      	lsls	r3, r3, #3
2000e59e:	4940      	ldr	r1, [pc, #256]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e5a0:	4313      	orrs	r3, r2
2000e5a2:	600b      	str	r3, [r1, #0]
2000e5a4:	e015      	b.n	2000e5d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2000e5a6:	4b3f      	ldr	r3, [pc, #252]	; (2000e6a4 <HAL_RCC_OscConfig+0x2b0>)
2000e5a8:	2200      	movs	r2, #0
2000e5aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2000e5ac:	f7ff fbea 	bl	2000dd84 <HAL_GetTick>
2000e5b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e5b2:	e008      	b.n	2000e5c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
2000e5b4:	f7ff fbe6 	bl	2000dd84 <HAL_GetTick>
2000e5b8:	4602      	mov	r2, r0
2000e5ba:	693b      	ldr	r3, [r7, #16]
2000e5bc:	1ad3      	subs	r3, r2, r3
2000e5be:	2b02      	cmp	r3, #2
2000e5c0:	d901      	bls.n	2000e5c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
2000e5c2:	2303      	movs	r3, #3
2000e5c4:	e17b      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
2000e5c6:	4b36      	ldr	r3, [pc, #216]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e5c8:	681b      	ldr	r3, [r3, #0]
2000e5ca:	f003 0302 	and.w	r3, r3, #2
2000e5ce:	2b00      	cmp	r3, #0
2000e5d0:	d1f0      	bne.n	2000e5b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
2000e5d2:	687b      	ldr	r3, [r7, #4]
2000e5d4:	681b      	ldr	r3, [r3, #0]
2000e5d6:	f003 0308 	and.w	r3, r3, #8
2000e5da:	2b00      	cmp	r3, #0
2000e5dc:	d030      	beq.n	2000e640 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2000e5de:	687b      	ldr	r3, [r7, #4]
2000e5e0:	695b      	ldr	r3, [r3, #20]
2000e5e2:	2b00      	cmp	r3, #0
2000e5e4:	d016      	beq.n	2000e614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000e5e6:	4b30      	ldr	r3, [pc, #192]	; (2000e6a8 <HAL_RCC_OscConfig+0x2b4>)
2000e5e8:	2201      	movs	r2, #1
2000e5ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e5ec:	f7ff fbca 	bl	2000dd84 <HAL_GetTick>
2000e5f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e5f2:	e008      	b.n	2000e606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e5f4:	f7ff fbc6 	bl	2000dd84 <HAL_GetTick>
2000e5f8:	4602      	mov	r2, r0
2000e5fa:	693b      	ldr	r3, [r7, #16]
2000e5fc:	1ad3      	subs	r3, r2, r3
2000e5fe:	2b02      	cmp	r3, #2
2000e600:	d901      	bls.n	2000e606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
2000e602:	2303      	movs	r3, #3
2000e604:	e15b      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
2000e606:	4b26      	ldr	r3, [pc, #152]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e60a:	f003 0302 	and.w	r3, r3, #2
2000e60e:	2b00      	cmp	r3, #0
2000e610:	d0f0      	beq.n	2000e5f4 <HAL_RCC_OscConfig+0x200>
2000e612:	e015      	b.n	2000e640 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
2000e614:	4b24      	ldr	r3, [pc, #144]	; (2000e6a8 <HAL_RCC_OscConfig+0x2b4>)
2000e616:	2200      	movs	r2, #0
2000e618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e61a:	f7ff fbb3 	bl	2000dd84 <HAL_GetTick>
2000e61e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e620:	e008      	b.n	2000e634 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2000e622:	f7ff fbaf 	bl	2000dd84 <HAL_GetTick>
2000e626:	4602      	mov	r2, r0
2000e628:	693b      	ldr	r3, [r7, #16]
2000e62a:	1ad3      	subs	r3, r2, r3
2000e62c:	2b02      	cmp	r3, #2
2000e62e:	d901      	bls.n	2000e634 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
2000e630:	2303      	movs	r3, #3
2000e632:	e144      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
2000e634:	4b1a      	ldr	r3, [pc, #104]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2000e638:	f003 0302 	and.w	r3, r3, #2
2000e63c:	2b00      	cmp	r3, #0
2000e63e:	d1f0      	bne.n	2000e622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000e640:	687b      	ldr	r3, [r7, #4]
2000e642:	681b      	ldr	r3, [r3, #0]
2000e644:	f003 0304 	and.w	r3, r3, #4
2000e648:	2b00      	cmp	r3, #0
2000e64a:	f000 80a0 	beq.w	2000e78e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
2000e64e:	2300      	movs	r3, #0
2000e650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
2000e652:	4b13      	ldr	r3, [pc, #76]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e65a:	2b00      	cmp	r3, #0
2000e65c:	d10f      	bne.n	2000e67e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
2000e65e:	2300      	movs	r3, #0
2000e660:	60bb      	str	r3, [r7, #8]
2000e662:	4b0f      	ldr	r3, [pc, #60]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e666:	4a0e      	ldr	r2, [pc, #56]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2000e66c:	6413      	str	r3, [r2, #64]	; 0x40
2000e66e:	4b0c      	ldr	r3, [pc, #48]	; (2000e6a0 <HAL_RCC_OscConfig+0x2ac>)
2000e670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2000e676:	60bb      	str	r3, [r7, #8]
2000e678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
2000e67a:	2301      	movs	r3, #1
2000e67c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e67e:	4b0b      	ldr	r3, [pc, #44]	; (2000e6ac <HAL_RCC_OscConfig+0x2b8>)
2000e680:	681b      	ldr	r3, [r3, #0]
2000e682:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e686:	2b00      	cmp	r3, #0
2000e688:	d121      	bne.n	2000e6ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
2000e68a:	4b08      	ldr	r3, [pc, #32]	; (2000e6ac <HAL_RCC_OscConfig+0x2b8>)
2000e68c:	681b      	ldr	r3, [r3, #0]
2000e68e:	4a07      	ldr	r2, [pc, #28]	; (2000e6ac <HAL_RCC_OscConfig+0x2b8>)
2000e690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2000e694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
2000e696:	f7ff fb75 	bl	2000dd84 <HAL_GetTick>
2000e69a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e69c:	e011      	b.n	2000e6c2 <HAL_RCC_OscConfig+0x2ce>
2000e69e:	bf00      	nop
2000e6a0:	40023800 	.word	0x40023800
2000e6a4:	42470000 	.word	0x42470000
2000e6a8:	42470e80 	.word	0x42470e80
2000e6ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
2000e6b0:	f7ff fb68 	bl	2000dd84 <HAL_GetTick>
2000e6b4:	4602      	mov	r2, r0
2000e6b6:	693b      	ldr	r3, [r7, #16]
2000e6b8:	1ad3      	subs	r3, r2, r3
2000e6ba:	2b02      	cmp	r3, #2
2000e6bc:	d901      	bls.n	2000e6c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
2000e6be:	2303      	movs	r3, #3
2000e6c0:	e0fd      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
2000e6c2:	4b81      	ldr	r3, [pc, #516]	; (2000e8c8 <HAL_RCC_OscConfig+0x4d4>)
2000e6c4:	681b      	ldr	r3, [r3, #0]
2000e6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
2000e6ca:	2b00      	cmp	r3, #0
2000e6cc:	d0f0      	beq.n	2000e6b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2000e6ce:	687b      	ldr	r3, [r7, #4]
2000e6d0:	689b      	ldr	r3, [r3, #8]
2000e6d2:	2b01      	cmp	r3, #1
2000e6d4:	d106      	bne.n	2000e6e4 <HAL_RCC_OscConfig+0x2f0>
2000e6d6:	4b7d      	ldr	r3, [pc, #500]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e6da:	4a7c      	ldr	r2, [pc, #496]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6dc:	f043 0301 	orr.w	r3, r3, #1
2000e6e0:	6713      	str	r3, [r2, #112]	; 0x70
2000e6e2:	e01c      	b.n	2000e71e <HAL_RCC_OscConfig+0x32a>
2000e6e4:	687b      	ldr	r3, [r7, #4]
2000e6e6:	689b      	ldr	r3, [r3, #8]
2000e6e8:	2b05      	cmp	r3, #5
2000e6ea:	d10c      	bne.n	2000e706 <HAL_RCC_OscConfig+0x312>
2000e6ec:	4b77      	ldr	r3, [pc, #476]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e6f0:	4a76      	ldr	r2, [pc, #472]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6f2:	f043 0304 	orr.w	r3, r3, #4
2000e6f6:	6713      	str	r3, [r2, #112]	; 0x70
2000e6f8:	4b74      	ldr	r3, [pc, #464]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e6fc:	4a73      	ldr	r2, [pc, #460]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e6fe:	f043 0301 	orr.w	r3, r3, #1
2000e702:	6713      	str	r3, [r2, #112]	; 0x70
2000e704:	e00b      	b.n	2000e71e <HAL_RCC_OscConfig+0x32a>
2000e706:	4b71      	ldr	r3, [pc, #452]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e70a:	4a70      	ldr	r2, [pc, #448]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e70c:	f023 0301 	bic.w	r3, r3, #1
2000e710:	6713      	str	r3, [r2, #112]	; 0x70
2000e712:	4b6e      	ldr	r3, [pc, #440]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e716:	4a6d      	ldr	r2, [pc, #436]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e718:	f023 0304 	bic.w	r3, r3, #4
2000e71c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
2000e71e:	687b      	ldr	r3, [r7, #4]
2000e720:	689b      	ldr	r3, [r3, #8]
2000e722:	2b00      	cmp	r3, #0
2000e724:	d015      	beq.n	2000e752 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000e726:	f7ff fb2d 	bl	2000dd84 <HAL_GetTick>
2000e72a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e72c:	e00a      	b.n	2000e744 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e72e:	f7ff fb29 	bl	2000dd84 <HAL_GetTick>
2000e732:	4602      	mov	r2, r0
2000e734:	693b      	ldr	r3, [r7, #16]
2000e736:	1ad3      	subs	r3, r2, r3
2000e738:	f241 3288 	movw	r2, #5000	; 0x1388
2000e73c:	4293      	cmp	r3, r2
2000e73e:	d901      	bls.n	2000e744 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
2000e740:	2303      	movs	r3, #3
2000e742:	e0bc      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
2000e744:	4b61      	ldr	r3, [pc, #388]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e748:	f003 0302 	and.w	r3, r3, #2
2000e74c:	2b00      	cmp	r3, #0
2000e74e:	d0ee      	beq.n	2000e72e <HAL_RCC_OscConfig+0x33a>
2000e750:	e014      	b.n	2000e77c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
2000e752:	f7ff fb17 	bl	2000dd84 <HAL_GetTick>
2000e756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e758:	e00a      	b.n	2000e770 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2000e75a:	f7ff fb13 	bl	2000dd84 <HAL_GetTick>
2000e75e:	4602      	mov	r2, r0
2000e760:	693b      	ldr	r3, [r7, #16]
2000e762:	1ad3      	subs	r3, r2, r3
2000e764:	f241 3288 	movw	r2, #5000	; 0x1388
2000e768:	4293      	cmp	r3, r2
2000e76a:	d901      	bls.n	2000e770 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
2000e76c:	2303      	movs	r3, #3
2000e76e:	e0a6      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
2000e770:	4b56      	ldr	r3, [pc, #344]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2000e774:	f003 0302 	and.w	r3, r3, #2
2000e778:	2b00      	cmp	r3, #0
2000e77a:	d1ee      	bne.n	2000e75a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
2000e77c:	7dfb      	ldrb	r3, [r7, #23]
2000e77e:	2b01      	cmp	r3, #1
2000e780:	d105      	bne.n	2000e78e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
2000e782:	4b52      	ldr	r3, [pc, #328]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000e786:	4a51      	ldr	r2, [pc, #324]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2000e78c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2000e78e:	687b      	ldr	r3, [r7, #4]
2000e790:	699b      	ldr	r3, [r3, #24]
2000e792:	2b00      	cmp	r3, #0
2000e794:	f000 8092 	beq.w	2000e8bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
2000e798:	4b4c      	ldr	r3, [pc, #304]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e79a:	689b      	ldr	r3, [r3, #8]
2000e79c:	f003 030c 	and.w	r3, r3, #12
2000e7a0:	2b08      	cmp	r3, #8
2000e7a2:	d05c      	beq.n	2000e85e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
2000e7a4:	687b      	ldr	r3, [r7, #4]
2000e7a6:	699b      	ldr	r3, [r3, #24]
2000e7a8:	2b02      	cmp	r3, #2
2000e7aa:	d141      	bne.n	2000e830 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e7ac:	4b48      	ldr	r3, [pc, #288]	; (2000e8d0 <HAL_RCC_OscConfig+0x4dc>)
2000e7ae:	2200      	movs	r2, #0
2000e7b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e7b2:	f7ff fae7 	bl	2000dd84 <HAL_GetTick>
2000e7b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e7b8:	e008      	b.n	2000e7cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e7ba:	f7ff fae3 	bl	2000dd84 <HAL_GetTick>
2000e7be:	4602      	mov	r2, r0
2000e7c0:	693b      	ldr	r3, [r7, #16]
2000e7c2:	1ad3      	subs	r3, r2, r3
2000e7c4:	2b02      	cmp	r3, #2
2000e7c6:	d901      	bls.n	2000e7cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
2000e7c8:	2303      	movs	r3, #3
2000e7ca:	e078      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e7cc:	4b3f      	ldr	r3, [pc, #252]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e7ce:	681b      	ldr	r3, [r3, #0]
2000e7d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e7d4:	2b00      	cmp	r3, #0
2000e7d6:	d1f0      	bne.n	2000e7ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
2000e7d8:	687b      	ldr	r3, [r7, #4]
2000e7da:	69da      	ldr	r2, [r3, #28]
2000e7dc:	687b      	ldr	r3, [r7, #4]
2000e7de:	6a1b      	ldr	r3, [r3, #32]
2000e7e0:	431a      	orrs	r2, r3
2000e7e2:	687b      	ldr	r3, [r7, #4]
2000e7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000e7e6:	019b      	lsls	r3, r3, #6
2000e7e8:	431a      	orrs	r2, r3
2000e7ea:	687b      	ldr	r3, [r7, #4]
2000e7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000e7ee:	085b      	lsrs	r3, r3, #1
2000e7f0:	3b01      	subs	r3, #1
2000e7f2:	041b      	lsls	r3, r3, #16
2000e7f4:	431a      	orrs	r2, r3
2000e7f6:	687b      	ldr	r3, [r7, #4]
2000e7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2000e7fa:	061b      	lsls	r3, r3, #24
2000e7fc:	4933      	ldr	r1, [pc, #204]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e7fe:	4313      	orrs	r3, r2
2000e800:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
2000e802:	4b33      	ldr	r3, [pc, #204]	; (2000e8d0 <HAL_RCC_OscConfig+0x4dc>)
2000e804:	2201      	movs	r2, #1
2000e806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e808:	f7ff fabc 	bl	2000dd84 <HAL_GetTick>
2000e80c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e80e:	e008      	b.n	2000e822 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e810:	f7ff fab8 	bl	2000dd84 <HAL_GetTick>
2000e814:	4602      	mov	r2, r0
2000e816:	693b      	ldr	r3, [r7, #16]
2000e818:	1ad3      	subs	r3, r2, r3
2000e81a:	2b02      	cmp	r3, #2
2000e81c:	d901      	bls.n	2000e822 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
2000e81e:	2303      	movs	r3, #3
2000e820:	e04d      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e822:	4b2a      	ldr	r3, [pc, #168]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e824:	681b      	ldr	r3, [r3, #0]
2000e826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e82a:	2b00      	cmp	r3, #0
2000e82c:	d0f0      	beq.n	2000e810 <HAL_RCC_OscConfig+0x41c>
2000e82e:	e045      	b.n	2000e8bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2000e830:	4b27      	ldr	r3, [pc, #156]	; (2000e8d0 <HAL_RCC_OscConfig+0x4dc>)
2000e832:	2200      	movs	r2, #0
2000e834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
2000e836:	f7ff faa5 	bl	2000dd84 <HAL_GetTick>
2000e83a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e83c:	e008      	b.n	2000e850 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
2000e83e:	f7ff faa1 	bl	2000dd84 <HAL_GetTick>
2000e842:	4602      	mov	r2, r0
2000e844:	693b      	ldr	r3, [r7, #16]
2000e846:	1ad3      	subs	r3, r2, r3
2000e848:	2b02      	cmp	r3, #2
2000e84a:	d901      	bls.n	2000e850 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
2000e84c:	2303      	movs	r3, #3
2000e84e:	e036      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
2000e850:	4b1e      	ldr	r3, [pc, #120]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e852:	681b      	ldr	r3, [r3, #0]
2000e854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e858:	2b00      	cmp	r3, #0
2000e85a:	d1f0      	bne.n	2000e83e <HAL_RCC_OscConfig+0x44a>
2000e85c:	e02e      	b.n	2000e8bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
2000e85e:	687b      	ldr	r3, [r7, #4]
2000e860:	699b      	ldr	r3, [r3, #24]
2000e862:	2b01      	cmp	r3, #1
2000e864:	d101      	bne.n	2000e86a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
2000e866:	2301      	movs	r3, #1
2000e868:	e029      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
2000e86a:	4b18      	ldr	r3, [pc, #96]	; (2000e8cc <HAL_RCC_OscConfig+0x4d8>)
2000e86c:	685b      	ldr	r3, [r3, #4]
2000e86e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e870:	68fb      	ldr	r3, [r7, #12]
2000e872:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
2000e876:	687b      	ldr	r3, [r7, #4]
2000e878:	69db      	ldr	r3, [r3, #28]
2000e87a:	429a      	cmp	r2, r3
2000e87c:	d11c      	bne.n	2000e8b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e87e:	68fb      	ldr	r3, [r7, #12]
2000e880:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2000e884:	687b      	ldr	r3, [r7, #4]
2000e886:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
2000e888:	429a      	cmp	r2, r3
2000e88a:	d115      	bne.n	2000e8b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e88c:	68fa      	ldr	r2, [r7, #12]
2000e88e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
2000e892:	4013      	ands	r3, r2
2000e894:	687a      	ldr	r2, [r7, #4]
2000e896:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
2000e898:	4293      	cmp	r3, r2
2000e89a:	d10d      	bne.n	2000e8b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e89c:	68fb      	ldr	r3, [r7, #12]
2000e89e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
2000e8a2:	687b      	ldr	r3, [r7, #4]
2000e8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
2000e8a6:	429a      	cmp	r2, r3
2000e8a8:	d106      	bne.n	2000e8b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
2000e8aa:	68fb      	ldr	r3, [r7, #12]
2000e8ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
2000e8b0:	687b      	ldr	r3, [r7, #4]
2000e8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
2000e8b4:	429a      	cmp	r2, r3
2000e8b6:	d001      	beq.n	2000e8bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
2000e8b8:	2301      	movs	r3, #1
2000e8ba:	e000      	b.n	2000e8be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
2000e8bc:	2300      	movs	r3, #0
}
2000e8be:	4618      	mov	r0, r3
2000e8c0:	3718      	adds	r7, #24
2000e8c2:	46bd      	mov	sp, r7
2000e8c4:	bd80      	pop	{r7, pc}
2000e8c6:	bf00      	nop
2000e8c8:	40007000 	.word	0x40007000
2000e8cc:	40023800 	.word	0x40023800
2000e8d0:	42470060 	.word	0x42470060

2000e8d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
2000e8d4:	b580      	push	{r7, lr}
2000e8d6:	b084      	sub	sp, #16
2000e8d8:	af00      	add	r7, sp, #0
2000e8da:	6078      	str	r0, [r7, #4]
2000e8dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
2000e8de:	687b      	ldr	r3, [r7, #4]
2000e8e0:	2b00      	cmp	r3, #0
2000e8e2:	d101      	bne.n	2000e8e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
2000e8e4:	2301      	movs	r3, #1
2000e8e6:	e0cc      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
2000e8e8:	4b68      	ldr	r3, [pc, #416]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000e8ea:	681b      	ldr	r3, [r3, #0]
2000e8ec:	f003 030f 	and.w	r3, r3, #15
2000e8f0:	683a      	ldr	r2, [r7, #0]
2000e8f2:	429a      	cmp	r2, r3
2000e8f4:	d90c      	bls.n	2000e910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000e8f6:	4b65      	ldr	r3, [pc, #404]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000e8f8:	683a      	ldr	r2, [r7, #0]
2000e8fa:	b2d2      	uxtb	r2, r2
2000e8fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000e8fe:	4b63      	ldr	r3, [pc, #396]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000e900:	681b      	ldr	r3, [r3, #0]
2000e902:	f003 030f 	and.w	r3, r3, #15
2000e906:	683a      	ldr	r2, [r7, #0]
2000e908:	429a      	cmp	r2, r3
2000e90a:	d001      	beq.n	2000e910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
2000e90c:	2301      	movs	r3, #1
2000e90e:	e0b8      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
2000e910:	687b      	ldr	r3, [r7, #4]
2000e912:	681b      	ldr	r3, [r3, #0]
2000e914:	f003 0302 	and.w	r3, r3, #2
2000e918:	2b00      	cmp	r3, #0
2000e91a:	d020      	beq.n	2000e95e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000e91c:	687b      	ldr	r3, [r7, #4]
2000e91e:	681b      	ldr	r3, [r3, #0]
2000e920:	f003 0304 	and.w	r3, r3, #4
2000e924:	2b00      	cmp	r3, #0
2000e926:	d005      	beq.n	2000e934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
2000e928:	4b59      	ldr	r3, [pc, #356]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e92a:	689b      	ldr	r3, [r3, #8]
2000e92c:	4a58      	ldr	r2, [pc, #352]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e92e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
2000e932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000e934:	687b      	ldr	r3, [r7, #4]
2000e936:	681b      	ldr	r3, [r3, #0]
2000e938:	f003 0308 	and.w	r3, r3, #8
2000e93c:	2b00      	cmp	r3, #0
2000e93e:	d005      	beq.n	2000e94c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
2000e940:	4b53      	ldr	r3, [pc, #332]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e942:	689b      	ldr	r3, [r3, #8]
2000e944:	4a52      	ldr	r2, [pc, #328]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
2000e94a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
2000e94c:	4b50      	ldr	r3, [pc, #320]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e94e:	689b      	ldr	r3, [r3, #8]
2000e950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
2000e954:	687b      	ldr	r3, [r7, #4]
2000e956:	689b      	ldr	r3, [r3, #8]
2000e958:	494d      	ldr	r1, [pc, #308]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e95a:	4313      	orrs	r3, r2
2000e95c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
2000e95e:	687b      	ldr	r3, [r7, #4]
2000e960:	681b      	ldr	r3, [r3, #0]
2000e962:	f003 0301 	and.w	r3, r3, #1
2000e966:	2b00      	cmp	r3, #0
2000e968:	d044      	beq.n	2000e9f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
2000e96a:	687b      	ldr	r3, [r7, #4]
2000e96c:	685b      	ldr	r3, [r3, #4]
2000e96e:	2b01      	cmp	r3, #1
2000e970:	d107      	bne.n	2000e982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
2000e972:	4b47      	ldr	r3, [pc, #284]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e974:	681b      	ldr	r3, [r3, #0]
2000e976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2000e97a:	2b00      	cmp	r3, #0
2000e97c:	d119      	bne.n	2000e9b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000e97e:	2301      	movs	r3, #1
2000e980:	e07f      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000e982:	687b      	ldr	r3, [r7, #4]
2000e984:	685b      	ldr	r3, [r3, #4]
2000e986:	2b02      	cmp	r3, #2
2000e988:	d003      	beq.n	2000e992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
2000e98a:	687b      	ldr	r3, [r7, #4]
2000e98c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
2000e98e:	2b03      	cmp	r3, #3
2000e990:	d107      	bne.n	2000e9a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
2000e992:	4b3f      	ldr	r3, [pc, #252]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e994:	681b      	ldr	r3, [r3, #0]
2000e996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2000e99a:	2b00      	cmp	r3, #0
2000e99c:	d109      	bne.n	2000e9b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000e99e:	2301      	movs	r3, #1
2000e9a0:	e06f      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
2000e9a2:	4b3b      	ldr	r3, [pc, #236]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e9a4:	681b      	ldr	r3, [r3, #0]
2000e9a6:	f003 0302 	and.w	r3, r3, #2
2000e9aa:	2b00      	cmp	r3, #0
2000e9ac:	d101      	bne.n	2000e9b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
2000e9ae:	2301      	movs	r3, #1
2000e9b0:	e067      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
2000e9b2:	4b37      	ldr	r3, [pc, #220]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e9b4:	689b      	ldr	r3, [r3, #8]
2000e9b6:	f023 0203 	bic.w	r2, r3, #3
2000e9ba:	687b      	ldr	r3, [r7, #4]
2000e9bc:	685b      	ldr	r3, [r3, #4]
2000e9be:	4934      	ldr	r1, [pc, #208]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e9c0:	4313      	orrs	r3, r2
2000e9c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
2000e9c4:	f7ff f9de 	bl	2000dd84 <HAL_GetTick>
2000e9c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000e9ca:	e00a      	b.n	2000e9e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
2000e9cc:	f7ff f9da 	bl	2000dd84 <HAL_GetTick>
2000e9d0:	4602      	mov	r2, r0
2000e9d2:	68fb      	ldr	r3, [r7, #12]
2000e9d4:	1ad3      	subs	r3, r2, r3
2000e9d6:	f241 3288 	movw	r2, #5000	; 0x1388
2000e9da:	4293      	cmp	r3, r2
2000e9dc:	d901      	bls.n	2000e9e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
2000e9de:	2303      	movs	r3, #3
2000e9e0:	e04f      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
2000e9e2:	4b2b      	ldr	r3, [pc, #172]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000e9e4:	689b      	ldr	r3, [r3, #8]
2000e9e6:	f003 020c 	and.w	r2, r3, #12
2000e9ea:	687b      	ldr	r3, [r7, #4]
2000e9ec:	685b      	ldr	r3, [r3, #4]
2000e9ee:	009b      	lsls	r3, r3, #2
2000e9f0:	429a      	cmp	r2, r3
2000e9f2:	d1eb      	bne.n	2000e9cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
2000e9f4:	4b25      	ldr	r3, [pc, #148]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000e9f6:	681b      	ldr	r3, [r3, #0]
2000e9f8:	f003 030f 	and.w	r3, r3, #15
2000e9fc:	683a      	ldr	r2, [r7, #0]
2000e9fe:	429a      	cmp	r2, r3
2000ea00:	d20c      	bcs.n	2000ea1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
2000ea02:	4b22      	ldr	r3, [pc, #136]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000ea04:	683a      	ldr	r2, [r7, #0]
2000ea06:	b2d2      	uxtb	r2, r2
2000ea08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
2000ea0a:	4b20      	ldr	r3, [pc, #128]	; (2000ea8c <HAL_RCC_ClockConfig+0x1b8>)
2000ea0c:	681b      	ldr	r3, [r3, #0]
2000ea0e:	f003 030f 	and.w	r3, r3, #15
2000ea12:	683a      	ldr	r2, [r7, #0]
2000ea14:	429a      	cmp	r2, r3
2000ea16:	d001      	beq.n	2000ea1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
2000ea18:	2301      	movs	r3, #1
2000ea1a:	e032      	b.n	2000ea82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
2000ea1c:	687b      	ldr	r3, [r7, #4]
2000ea1e:	681b      	ldr	r3, [r3, #0]
2000ea20:	f003 0304 	and.w	r3, r3, #4
2000ea24:	2b00      	cmp	r3, #0
2000ea26:	d008      	beq.n	2000ea3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
2000ea28:	4b19      	ldr	r3, [pc, #100]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000ea2a:	689b      	ldr	r3, [r3, #8]
2000ea2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2000ea30:	687b      	ldr	r3, [r7, #4]
2000ea32:	68db      	ldr	r3, [r3, #12]
2000ea34:	4916      	ldr	r1, [pc, #88]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000ea36:	4313      	orrs	r3, r2
2000ea38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
2000ea3a:	687b      	ldr	r3, [r7, #4]
2000ea3c:	681b      	ldr	r3, [r3, #0]
2000ea3e:	f003 0308 	and.w	r3, r3, #8
2000ea42:	2b00      	cmp	r3, #0
2000ea44:	d009      	beq.n	2000ea5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
2000ea46:	4b12      	ldr	r3, [pc, #72]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000ea48:	689b      	ldr	r3, [r3, #8]
2000ea4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
2000ea4e:	687b      	ldr	r3, [r7, #4]
2000ea50:	691b      	ldr	r3, [r3, #16]
2000ea52:	00db      	lsls	r3, r3, #3
2000ea54:	490e      	ldr	r1, [pc, #56]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000ea56:	4313      	orrs	r3, r2
2000ea58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
2000ea5a:	f000 f821 	bl	2000eaa0 <HAL_RCC_GetSysClockFreq>
2000ea5e:	4602      	mov	r2, r0
2000ea60:	4b0b      	ldr	r3, [pc, #44]	; (2000ea90 <HAL_RCC_ClockConfig+0x1bc>)
2000ea62:	689b      	ldr	r3, [r3, #8]
2000ea64:	091b      	lsrs	r3, r3, #4
2000ea66:	f003 030f 	and.w	r3, r3, #15
2000ea6a:	490a      	ldr	r1, [pc, #40]	; (2000ea94 <HAL_RCC_ClockConfig+0x1c0>)
2000ea6c:	5ccb      	ldrb	r3, [r1, r3]
2000ea6e:	fa22 f303 	lsr.w	r3, r2, r3
2000ea72:	4a09      	ldr	r2, [pc, #36]	; (2000ea98 <HAL_RCC_ClockConfig+0x1c4>)
2000ea74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
2000ea76:	4b09      	ldr	r3, [pc, #36]	; (2000ea9c <HAL_RCC_ClockConfig+0x1c8>)
2000ea78:	681b      	ldr	r3, [r3, #0]
2000ea7a:	4618      	mov	r0, r3
2000ea7c:	f7ff f93e 	bl	2000dcfc <HAL_InitTick>

  return HAL_OK;
2000ea80:	2300      	movs	r3, #0
}
2000ea82:	4618      	mov	r0, r3
2000ea84:	3710      	adds	r7, #16
2000ea86:	46bd      	mov	sp, r7
2000ea88:	bd80      	pop	{r7, pc}
2000ea8a:	bf00      	nop
2000ea8c:	40023c00 	.word	0x40023c00
2000ea90:	40023800 	.word	0x40023800
2000ea94:	2000f91c 	.word	0x2000f91c
2000ea98:	2000f970 	.word	0x2000f970
2000ea9c:	2000f984 	.word	0x2000f984

2000eaa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
2000eaa0:	b5b0      	push	{r4, r5, r7, lr}
2000eaa2:	b084      	sub	sp, #16
2000eaa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
2000eaa6:	2100      	movs	r1, #0
2000eaa8:	6079      	str	r1, [r7, #4]
2000eaaa:	2100      	movs	r1, #0
2000eaac:	60f9      	str	r1, [r7, #12]
2000eaae:	2100      	movs	r1, #0
2000eab0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
2000eab2:	2100      	movs	r1, #0
2000eab4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
2000eab6:	4952      	ldr	r1, [pc, #328]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000eab8:	6889      	ldr	r1, [r1, #8]
2000eaba:	f001 010c 	and.w	r1, r1, #12
2000eabe:	2908      	cmp	r1, #8
2000eac0:	d00d      	beq.n	2000eade <HAL_RCC_GetSysClockFreq+0x3e>
2000eac2:	2908      	cmp	r1, #8
2000eac4:	f200 8094 	bhi.w	2000ebf0 <HAL_RCC_GetSysClockFreq+0x150>
2000eac8:	2900      	cmp	r1, #0
2000eaca:	d002      	beq.n	2000ead2 <HAL_RCC_GetSysClockFreq+0x32>
2000eacc:	2904      	cmp	r1, #4
2000eace:	d003      	beq.n	2000ead8 <HAL_RCC_GetSysClockFreq+0x38>
2000ead0:	e08e      	b.n	2000ebf0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
2000ead2:	4b4c      	ldr	r3, [pc, #304]	; (2000ec04 <HAL_RCC_GetSysClockFreq+0x164>)
2000ead4:	60bb      	str	r3, [r7, #8]
       break;
2000ead6:	e08e      	b.n	2000ebf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
2000ead8:	4b4b      	ldr	r3, [pc, #300]	; (2000ec08 <HAL_RCC_GetSysClockFreq+0x168>)
2000eada:	60bb      	str	r3, [r7, #8]
      break;
2000eadc:	e08b      	b.n	2000ebf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
2000eade:	4948      	ldr	r1, [pc, #288]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000eae0:	6849      	ldr	r1, [r1, #4]
2000eae2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
2000eae6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
2000eae8:	4945      	ldr	r1, [pc, #276]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000eaea:	6849      	ldr	r1, [r1, #4]
2000eaec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
2000eaf0:	2900      	cmp	r1, #0
2000eaf2:	d024      	beq.n	2000eb3e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000eaf4:	4942      	ldr	r1, [pc, #264]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000eaf6:	6849      	ldr	r1, [r1, #4]
2000eaf8:	0989      	lsrs	r1, r1, #6
2000eafa:	4608      	mov	r0, r1
2000eafc:	f04f 0100 	mov.w	r1, #0
2000eb00:	f240 14ff 	movw	r4, #511	; 0x1ff
2000eb04:	f04f 0500 	mov.w	r5, #0
2000eb08:	ea00 0204 	and.w	r2, r0, r4
2000eb0c:	ea01 0305 	and.w	r3, r1, r5
2000eb10:	493d      	ldr	r1, [pc, #244]	; (2000ec08 <HAL_RCC_GetSysClockFreq+0x168>)
2000eb12:	fb01 f003 	mul.w	r0, r1, r3
2000eb16:	2100      	movs	r1, #0
2000eb18:	fb01 f102 	mul.w	r1, r1, r2
2000eb1c:	1844      	adds	r4, r0, r1
2000eb1e:	493a      	ldr	r1, [pc, #232]	; (2000ec08 <HAL_RCC_GetSysClockFreq+0x168>)
2000eb20:	fba2 0101 	umull	r0, r1, r2, r1
2000eb24:	1863      	adds	r3, r4, r1
2000eb26:	4619      	mov	r1, r3
2000eb28:	687b      	ldr	r3, [r7, #4]
2000eb2a:	461a      	mov	r2, r3
2000eb2c:	f04f 0300 	mov.w	r3, #0
2000eb30:	f7fe fba6 	bl	2000d280 <__aeabi_uldivmod>
2000eb34:	4602      	mov	r2, r0
2000eb36:	460b      	mov	r3, r1
2000eb38:	4613      	mov	r3, r2
2000eb3a:	60fb      	str	r3, [r7, #12]
2000eb3c:	e04a      	b.n	2000ebd4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
2000eb3e:	4b30      	ldr	r3, [pc, #192]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000eb40:	685b      	ldr	r3, [r3, #4]
2000eb42:	099b      	lsrs	r3, r3, #6
2000eb44:	461a      	mov	r2, r3
2000eb46:	f04f 0300 	mov.w	r3, #0
2000eb4a:	f240 10ff 	movw	r0, #511	; 0x1ff
2000eb4e:	f04f 0100 	mov.w	r1, #0
2000eb52:	ea02 0400 	and.w	r4, r2, r0
2000eb56:	ea03 0501 	and.w	r5, r3, r1
2000eb5a:	4620      	mov	r0, r4
2000eb5c:	4629      	mov	r1, r5
2000eb5e:	f04f 0200 	mov.w	r2, #0
2000eb62:	f04f 0300 	mov.w	r3, #0
2000eb66:	014b      	lsls	r3, r1, #5
2000eb68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
2000eb6c:	0142      	lsls	r2, r0, #5
2000eb6e:	4610      	mov	r0, r2
2000eb70:	4619      	mov	r1, r3
2000eb72:	1b00      	subs	r0, r0, r4
2000eb74:	eb61 0105 	sbc.w	r1, r1, r5
2000eb78:	f04f 0200 	mov.w	r2, #0
2000eb7c:	f04f 0300 	mov.w	r3, #0
2000eb80:	018b      	lsls	r3, r1, #6
2000eb82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
2000eb86:	0182      	lsls	r2, r0, #6
2000eb88:	1a12      	subs	r2, r2, r0
2000eb8a:	eb63 0301 	sbc.w	r3, r3, r1
2000eb8e:	f04f 0000 	mov.w	r0, #0
2000eb92:	f04f 0100 	mov.w	r1, #0
2000eb96:	00d9      	lsls	r1, r3, #3
2000eb98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
2000eb9c:	00d0      	lsls	r0, r2, #3
2000eb9e:	4602      	mov	r2, r0
2000eba0:	460b      	mov	r3, r1
2000eba2:	1912      	adds	r2, r2, r4
2000eba4:	eb45 0303 	adc.w	r3, r5, r3
2000eba8:	f04f 0000 	mov.w	r0, #0
2000ebac:	f04f 0100 	mov.w	r1, #0
2000ebb0:	0299      	lsls	r1, r3, #10
2000ebb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
2000ebb6:	0290      	lsls	r0, r2, #10
2000ebb8:	4602      	mov	r2, r0
2000ebba:	460b      	mov	r3, r1
2000ebbc:	4610      	mov	r0, r2
2000ebbe:	4619      	mov	r1, r3
2000ebc0:	687b      	ldr	r3, [r7, #4]
2000ebc2:	461a      	mov	r2, r3
2000ebc4:	f04f 0300 	mov.w	r3, #0
2000ebc8:	f7fe fb5a 	bl	2000d280 <__aeabi_uldivmod>
2000ebcc:	4602      	mov	r2, r0
2000ebce:	460b      	mov	r3, r1
2000ebd0:	4613      	mov	r3, r2
2000ebd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
2000ebd4:	4b0a      	ldr	r3, [pc, #40]	; (2000ec00 <HAL_RCC_GetSysClockFreq+0x160>)
2000ebd6:	685b      	ldr	r3, [r3, #4]
2000ebd8:	0c1b      	lsrs	r3, r3, #16
2000ebda:	f003 0303 	and.w	r3, r3, #3
2000ebde:	3301      	adds	r3, #1
2000ebe0:	005b      	lsls	r3, r3, #1
2000ebe2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
2000ebe4:	68fa      	ldr	r2, [r7, #12]
2000ebe6:	683b      	ldr	r3, [r7, #0]
2000ebe8:	fbb2 f3f3 	udiv	r3, r2, r3
2000ebec:	60bb      	str	r3, [r7, #8]
      break;
2000ebee:	e002      	b.n	2000ebf6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
2000ebf0:	4b04      	ldr	r3, [pc, #16]	; (2000ec04 <HAL_RCC_GetSysClockFreq+0x164>)
2000ebf2:	60bb      	str	r3, [r7, #8]
      break;
2000ebf4:	bf00      	nop
    }
  }
  return sysclockfreq;
2000ebf6:	68bb      	ldr	r3, [r7, #8]
}
2000ebf8:	4618      	mov	r0, r3
2000ebfa:	3710      	adds	r7, #16
2000ebfc:	46bd      	mov	sp, r7
2000ebfe:	bdb0      	pop	{r4, r5, r7, pc}
2000ec00:	40023800 	.word	0x40023800
2000ec04:	00f42400 	.word	0x00f42400
2000ec08:	017d7840 	.word	0x017d7840

2000ec0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
2000ec0c:	b480      	push	{r7}
2000ec0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
2000ec10:	4b03      	ldr	r3, [pc, #12]	; (2000ec20 <HAL_RCC_GetHCLKFreq+0x14>)
2000ec12:	681b      	ldr	r3, [r3, #0]
}
2000ec14:	4618      	mov	r0, r3
2000ec16:	46bd      	mov	sp, r7
2000ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
2000ec1c:	4770      	bx	lr
2000ec1e:	bf00      	nop
2000ec20:	2000f970 	.word	0x2000f970

2000ec24 <__errno>:
2000ec24:	4b01      	ldr	r3, [pc, #4]	; (2000ec2c <__errno+0x8>)
2000ec26:	6818      	ldr	r0, [r3, #0]
2000ec28:	4770      	bx	lr
2000ec2a:	bf00      	nop
2000ec2c:	2000f98c 	.word	0x2000f98c

2000ec30 <__libc_init_array>:
2000ec30:	b570      	push	{r4, r5, r6, lr}
2000ec32:	4d0d      	ldr	r5, [pc, #52]	; (2000ec68 <__libc_init_array+0x38>)
2000ec34:	4c0d      	ldr	r4, [pc, #52]	; (2000ec6c <__libc_init_array+0x3c>)
2000ec36:	1b64      	subs	r4, r4, r5
2000ec38:	10a4      	asrs	r4, r4, #2
2000ec3a:	2600      	movs	r6, #0
2000ec3c:	42a6      	cmp	r6, r4
2000ec3e:	d109      	bne.n	2000ec54 <__libc_init_array+0x24>
2000ec40:	4d0b      	ldr	r5, [pc, #44]	; (2000ec70 <__libc_init_array+0x40>)
2000ec42:	4c0c      	ldr	r4, [pc, #48]	; (2000ec74 <__libc_init_array+0x44>)
2000ec44:	f000 fc4e 	bl	2000f4e4 <_init>
2000ec48:	1b64      	subs	r4, r4, r5
2000ec4a:	10a4      	asrs	r4, r4, #2
2000ec4c:	2600      	movs	r6, #0
2000ec4e:	42a6      	cmp	r6, r4
2000ec50:	d105      	bne.n	2000ec5e <__libc_init_array+0x2e>
2000ec52:	bd70      	pop	{r4, r5, r6, pc}
2000ec54:	f855 3b04 	ldr.w	r3, [r5], #4
2000ec58:	4798      	blx	r3
2000ec5a:	3601      	adds	r6, #1
2000ec5c:	e7ee      	b.n	2000ec3c <__libc_init_array+0xc>
2000ec5e:	f855 3b04 	ldr.w	r3, [r5], #4
2000ec62:	4798      	blx	r3
2000ec64:	3601      	adds	r6, #1
2000ec66:	e7f2      	b.n	2000ec4e <__libc_init_array+0x1e>
2000ec68:	2000f968 	.word	0x2000f968
2000ec6c:	2000f968 	.word	0x2000f968
2000ec70:	2000f968 	.word	0x2000f968
2000ec74:	2000f96c 	.word	0x2000f96c

2000ec78 <memset>:
2000ec78:	4402      	add	r2, r0
2000ec7a:	4603      	mov	r3, r0
2000ec7c:	4293      	cmp	r3, r2
2000ec7e:	d100      	bne.n	2000ec82 <memset+0xa>
2000ec80:	4770      	bx	lr
2000ec82:	f803 1b01 	strb.w	r1, [r3], #1
2000ec86:	e7f9      	b.n	2000ec7c <memset+0x4>

2000ec88 <_vsiprintf_r>:
2000ec88:	b500      	push	{lr}
2000ec8a:	b09b      	sub	sp, #108	; 0x6c
2000ec8c:	9100      	str	r1, [sp, #0]
2000ec8e:	9104      	str	r1, [sp, #16]
2000ec90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
2000ec94:	9105      	str	r1, [sp, #20]
2000ec96:	9102      	str	r1, [sp, #8]
2000ec98:	4905      	ldr	r1, [pc, #20]	; (2000ecb0 <_vsiprintf_r+0x28>)
2000ec9a:	9103      	str	r1, [sp, #12]
2000ec9c:	4669      	mov	r1, sp
2000ec9e:	f000 f86f 	bl	2000ed80 <_svfiprintf_r>
2000eca2:	9b00      	ldr	r3, [sp, #0]
2000eca4:	2200      	movs	r2, #0
2000eca6:	701a      	strb	r2, [r3, #0]
2000eca8:	b01b      	add	sp, #108	; 0x6c
2000ecaa:	f85d fb04 	ldr.w	pc, [sp], #4
2000ecae:	bf00      	nop
2000ecb0:	ffff0208 	.word	0xffff0208

2000ecb4 <vsiprintf>:
2000ecb4:	4613      	mov	r3, r2
2000ecb6:	460a      	mov	r2, r1
2000ecb8:	4601      	mov	r1, r0
2000ecba:	4802      	ldr	r0, [pc, #8]	; (2000ecc4 <vsiprintf+0x10>)
2000ecbc:	6800      	ldr	r0, [r0, #0]
2000ecbe:	f7ff bfe3 	b.w	2000ec88 <_vsiprintf_r>
2000ecc2:	bf00      	nop
2000ecc4:	2000f98c 	.word	0x2000f98c

2000ecc8 <__ssputs_r>:
2000ecc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000eccc:	688e      	ldr	r6, [r1, #8]
2000ecce:	429e      	cmp	r6, r3
2000ecd0:	4682      	mov	sl, r0
2000ecd2:	460c      	mov	r4, r1
2000ecd4:	4690      	mov	r8, r2
2000ecd6:	461f      	mov	r7, r3
2000ecd8:	d838      	bhi.n	2000ed4c <__ssputs_r+0x84>
2000ecda:	898a      	ldrh	r2, [r1, #12]
2000ecdc:	f412 6f90 	tst.w	r2, #1152	; 0x480
2000ece0:	d032      	beq.n	2000ed48 <__ssputs_r+0x80>
2000ece2:	6825      	ldr	r5, [r4, #0]
2000ece4:	6909      	ldr	r1, [r1, #16]
2000ece6:	eba5 0901 	sub.w	r9, r5, r1
2000ecea:	6965      	ldr	r5, [r4, #20]
2000ecec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
2000ecf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
2000ecf4:	3301      	adds	r3, #1
2000ecf6:	444b      	add	r3, r9
2000ecf8:	106d      	asrs	r5, r5, #1
2000ecfa:	429d      	cmp	r5, r3
2000ecfc:	bf38      	it	cc
2000ecfe:	461d      	movcc	r5, r3
2000ed00:	0553      	lsls	r3, r2, #21
2000ed02:	d531      	bpl.n	2000ed68 <__ssputs_r+0xa0>
2000ed04:	4629      	mov	r1, r5
2000ed06:	f000 fb47 	bl	2000f398 <_malloc_r>
2000ed0a:	4606      	mov	r6, r0
2000ed0c:	b950      	cbnz	r0, 2000ed24 <__ssputs_r+0x5c>
2000ed0e:	230c      	movs	r3, #12
2000ed10:	f8ca 3000 	str.w	r3, [sl]
2000ed14:	89a3      	ldrh	r3, [r4, #12]
2000ed16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
2000ed1a:	81a3      	strh	r3, [r4, #12]
2000ed1c:	f04f 30ff 	mov.w	r0, #4294967295
2000ed20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000ed24:	6921      	ldr	r1, [r4, #16]
2000ed26:	464a      	mov	r2, r9
2000ed28:	f000 fabe 	bl	2000f2a8 <memcpy>
2000ed2c:	89a3      	ldrh	r3, [r4, #12]
2000ed2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
2000ed32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2000ed36:	81a3      	strh	r3, [r4, #12]
2000ed38:	6126      	str	r6, [r4, #16]
2000ed3a:	6165      	str	r5, [r4, #20]
2000ed3c:	444e      	add	r6, r9
2000ed3e:	eba5 0509 	sub.w	r5, r5, r9
2000ed42:	6026      	str	r6, [r4, #0]
2000ed44:	60a5      	str	r5, [r4, #8]
2000ed46:	463e      	mov	r6, r7
2000ed48:	42be      	cmp	r6, r7
2000ed4a:	d900      	bls.n	2000ed4e <__ssputs_r+0x86>
2000ed4c:	463e      	mov	r6, r7
2000ed4e:	4632      	mov	r2, r6
2000ed50:	6820      	ldr	r0, [r4, #0]
2000ed52:	4641      	mov	r1, r8
2000ed54:	f000 fab6 	bl	2000f2c4 <memmove>
2000ed58:	68a3      	ldr	r3, [r4, #8]
2000ed5a:	6822      	ldr	r2, [r4, #0]
2000ed5c:	1b9b      	subs	r3, r3, r6
2000ed5e:	4432      	add	r2, r6
2000ed60:	60a3      	str	r3, [r4, #8]
2000ed62:	6022      	str	r2, [r4, #0]
2000ed64:	2000      	movs	r0, #0
2000ed66:	e7db      	b.n	2000ed20 <__ssputs_r+0x58>
2000ed68:	462a      	mov	r2, r5
2000ed6a:	f000 fb6f 	bl	2000f44c <_realloc_r>
2000ed6e:	4606      	mov	r6, r0
2000ed70:	2800      	cmp	r0, #0
2000ed72:	d1e1      	bne.n	2000ed38 <__ssputs_r+0x70>
2000ed74:	6921      	ldr	r1, [r4, #16]
2000ed76:	4650      	mov	r0, sl
2000ed78:	f000 fabe 	bl	2000f2f8 <_free_r>
2000ed7c:	e7c7      	b.n	2000ed0e <__ssputs_r+0x46>
	...

2000ed80 <_svfiprintf_r>:
2000ed80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
2000ed84:	4698      	mov	r8, r3
2000ed86:	898b      	ldrh	r3, [r1, #12]
2000ed88:	061b      	lsls	r3, r3, #24
2000ed8a:	b09d      	sub	sp, #116	; 0x74
2000ed8c:	4607      	mov	r7, r0
2000ed8e:	460d      	mov	r5, r1
2000ed90:	4614      	mov	r4, r2
2000ed92:	d50e      	bpl.n	2000edb2 <_svfiprintf_r+0x32>
2000ed94:	690b      	ldr	r3, [r1, #16]
2000ed96:	b963      	cbnz	r3, 2000edb2 <_svfiprintf_r+0x32>
2000ed98:	2140      	movs	r1, #64	; 0x40
2000ed9a:	f000 fafd 	bl	2000f398 <_malloc_r>
2000ed9e:	6028      	str	r0, [r5, #0]
2000eda0:	6128      	str	r0, [r5, #16]
2000eda2:	b920      	cbnz	r0, 2000edae <_svfiprintf_r+0x2e>
2000eda4:	230c      	movs	r3, #12
2000eda6:	603b      	str	r3, [r7, #0]
2000eda8:	f04f 30ff 	mov.w	r0, #4294967295
2000edac:	e0d1      	b.n	2000ef52 <_svfiprintf_r+0x1d2>
2000edae:	2340      	movs	r3, #64	; 0x40
2000edb0:	616b      	str	r3, [r5, #20]
2000edb2:	2300      	movs	r3, #0
2000edb4:	9309      	str	r3, [sp, #36]	; 0x24
2000edb6:	2320      	movs	r3, #32
2000edb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
2000edbc:	f8cd 800c 	str.w	r8, [sp, #12]
2000edc0:	2330      	movs	r3, #48	; 0x30
2000edc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2000ef6c <_svfiprintf_r+0x1ec>
2000edc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
2000edca:	f04f 0901 	mov.w	r9, #1
2000edce:	4623      	mov	r3, r4
2000edd0:	469a      	mov	sl, r3
2000edd2:	f813 2b01 	ldrb.w	r2, [r3], #1
2000edd6:	b10a      	cbz	r2, 2000eddc <_svfiprintf_r+0x5c>
2000edd8:	2a25      	cmp	r2, #37	; 0x25
2000edda:	d1f9      	bne.n	2000edd0 <_svfiprintf_r+0x50>
2000eddc:	ebba 0b04 	subs.w	fp, sl, r4
2000ede0:	d00b      	beq.n	2000edfa <_svfiprintf_r+0x7a>
2000ede2:	465b      	mov	r3, fp
2000ede4:	4622      	mov	r2, r4
2000ede6:	4629      	mov	r1, r5
2000ede8:	4638      	mov	r0, r7
2000edea:	f7ff ff6d 	bl	2000ecc8 <__ssputs_r>
2000edee:	3001      	adds	r0, #1
2000edf0:	f000 80aa 	beq.w	2000ef48 <_svfiprintf_r+0x1c8>
2000edf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
2000edf6:	445a      	add	r2, fp
2000edf8:	9209      	str	r2, [sp, #36]	; 0x24
2000edfa:	f89a 3000 	ldrb.w	r3, [sl]
2000edfe:	2b00      	cmp	r3, #0
2000ee00:	f000 80a2 	beq.w	2000ef48 <_svfiprintf_r+0x1c8>
2000ee04:	2300      	movs	r3, #0
2000ee06:	f04f 32ff 	mov.w	r2, #4294967295
2000ee0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
2000ee0e:	f10a 0a01 	add.w	sl, sl, #1
2000ee12:	9304      	str	r3, [sp, #16]
2000ee14:	9307      	str	r3, [sp, #28]
2000ee16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
2000ee1a:	931a      	str	r3, [sp, #104]	; 0x68
2000ee1c:	4654      	mov	r4, sl
2000ee1e:	2205      	movs	r2, #5
2000ee20:	f814 1b01 	ldrb.w	r1, [r4], #1
2000ee24:	4851      	ldr	r0, [pc, #324]	; (2000ef6c <_svfiprintf_r+0x1ec>)
2000ee26:	f7fe f9db 	bl	2000d1e0 <memchr>
2000ee2a:	9a04      	ldr	r2, [sp, #16]
2000ee2c:	b9d8      	cbnz	r0, 2000ee66 <_svfiprintf_r+0xe6>
2000ee2e:	06d0      	lsls	r0, r2, #27
2000ee30:	bf44      	itt	mi
2000ee32:	2320      	movmi	r3, #32
2000ee34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000ee38:	0711      	lsls	r1, r2, #28
2000ee3a:	bf44      	itt	mi
2000ee3c:	232b      	movmi	r3, #43	; 0x2b
2000ee3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
2000ee42:	f89a 3000 	ldrb.w	r3, [sl]
2000ee46:	2b2a      	cmp	r3, #42	; 0x2a
2000ee48:	d015      	beq.n	2000ee76 <_svfiprintf_r+0xf6>
2000ee4a:	9a07      	ldr	r2, [sp, #28]
2000ee4c:	4654      	mov	r4, sl
2000ee4e:	2000      	movs	r0, #0
2000ee50:	f04f 0c0a 	mov.w	ip, #10
2000ee54:	4621      	mov	r1, r4
2000ee56:	f811 3b01 	ldrb.w	r3, [r1], #1
2000ee5a:	3b30      	subs	r3, #48	; 0x30
2000ee5c:	2b09      	cmp	r3, #9
2000ee5e:	d94e      	bls.n	2000eefe <_svfiprintf_r+0x17e>
2000ee60:	b1b0      	cbz	r0, 2000ee90 <_svfiprintf_r+0x110>
2000ee62:	9207      	str	r2, [sp, #28]
2000ee64:	e014      	b.n	2000ee90 <_svfiprintf_r+0x110>
2000ee66:	eba0 0308 	sub.w	r3, r0, r8
2000ee6a:	fa09 f303 	lsl.w	r3, r9, r3
2000ee6e:	4313      	orrs	r3, r2
2000ee70:	9304      	str	r3, [sp, #16]
2000ee72:	46a2      	mov	sl, r4
2000ee74:	e7d2      	b.n	2000ee1c <_svfiprintf_r+0x9c>
2000ee76:	9b03      	ldr	r3, [sp, #12]
2000ee78:	1d19      	adds	r1, r3, #4
2000ee7a:	681b      	ldr	r3, [r3, #0]
2000ee7c:	9103      	str	r1, [sp, #12]
2000ee7e:	2b00      	cmp	r3, #0
2000ee80:	bfbb      	ittet	lt
2000ee82:	425b      	neglt	r3, r3
2000ee84:	f042 0202 	orrlt.w	r2, r2, #2
2000ee88:	9307      	strge	r3, [sp, #28]
2000ee8a:	9307      	strlt	r3, [sp, #28]
2000ee8c:	bfb8      	it	lt
2000ee8e:	9204      	strlt	r2, [sp, #16]
2000ee90:	7823      	ldrb	r3, [r4, #0]
2000ee92:	2b2e      	cmp	r3, #46	; 0x2e
2000ee94:	d10c      	bne.n	2000eeb0 <_svfiprintf_r+0x130>
2000ee96:	7863      	ldrb	r3, [r4, #1]
2000ee98:	2b2a      	cmp	r3, #42	; 0x2a
2000ee9a:	d135      	bne.n	2000ef08 <_svfiprintf_r+0x188>
2000ee9c:	9b03      	ldr	r3, [sp, #12]
2000ee9e:	1d1a      	adds	r2, r3, #4
2000eea0:	681b      	ldr	r3, [r3, #0]
2000eea2:	9203      	str	r2, [sp, #12]
2000eea4:	2b00      	cmp	r3, #0
2000eea6:	bfb8      	it	lt
2000eea8:	f04f 33ff 	movlt.w	r3, #4294967295
2000eeac:	3402      	adds	r4, #2
2000eeae:	9305      	str	r3, [sp, #20]
2000eeb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2000ef7c <_svfiprintf_r+0x1fc>
2000eeb4:	7821      	ldrb	r1, [r4, #0]
2000eeb6:	2203      	movs	r2, #3
2000eeb8:	4650      	mov	r0, sl
2000eeba:	f7fe f991 	bl	2000d1e0 <memchr>
2000eebe:	b140      	cbz	r0, 2000eed2 <_svfiprintf_r+0x152>
2000eec0:	2340      	movs	r3, #64	; 0x40
2000eec2:	eba0 000a 	sub.w	r0, r0, sl
2000eec6:	fa03 f000 	lsl.w	r0, r3, r0
2000eeca:	9b04      	ldr	r3, [sp, #16]
2000eecc:	4303      	orrs	r3, r0
2000eece:	3401      	adds	r4, #1
2000eed0:	9304      	str	r3, [sp, #16]
2000eed2:	f814 1b01 	ldrb.w	r1, [r4], #1
2000eed6:	4826      	ldr	r0, [pc, #152]	; (2000ef70 <_svfiprintf_r+0x1f0>)
2000eed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
2000eedc:	2206      	movs	r2, #6
2000eede:	f7fe f97f 	bl	2000d1e0 <memchr>
2000eee2:	2800      	cmp	r0, #0
2000eee4:	d038      	beq.n	2000ef58 <_svfiprintf_r+0x1d8>
2000eee6:	4b23      	ldr	r3, [pc, #140]	; (2000ef74 <_svfiprintf_r+0x1f4>)
2000eee8:	bb1b      	cbnz	r3, 2000ef32 <_svfiprintf_r+0x1b2>
2000eeea:	9b03      	ldr	r3, [sp, #12]
2000eeec:	3307      	adds	r3, #7
2000eeee:	f023 0307 	bic.w	r3, r3, #7
2000eef2:	3308      	adds	r3, #8
2000eef4:	9303      	str	r3, [sp, #12]
2000eef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
2000eef8:	4433      	add	r3, r6
2000eefa:	9309      	str	r3, [sp, #36]	; 0x24
2000eefc:	e767      	b.n	2000edce <_svfiprintf_r+0x4e>
2000eefe:	fb0c 3202 	mla	r2, ip, r2, r3
2000ef02:	460c      	mov	r4, r1
2000ef04:	2001      	movs	r0, #1
2000ef06:	e7a5      	b.n	2000ee54 <_svfiprintf_r+0xd4>
2000ef08:	2300      	movs	r3, #0
2000ef0a:	3401      	adds	r4, #1
2000ef0c:	9305      	str	r3, [sp, #20]
2000ef0e:	4619      	mov	r1, r3
2000ef10:	f04f 0c0a 	mov.w	ip, #10
2000ef14:	4620      	mov	r0, r4
2000ef16:	f810 2b01 	ldrb.w	r2, [r0], #1
2000ef1a:	3a30      	subs	r2, #48	; 0x30
2000ef1c:	2a09      	cmp	r2, #9
2000ef1e:	d903      	bls.n	2000ef28 <_svfiprintf_r+0x1a8>
2000ef20:	2b00      	cmp	r3, #0
2000ef22:	d0c5      	beq.n	2000eeb0 <_svfiprintf_r+0x130>
2000ef24:	9105      	str	r1, [sp, #20]
2000ef26:	e7c3      	b.n	2000eeb0 <_svfiprintf_r+0x130>
2000ef28:	fb0c 2101 	mla	r1, ip, r1, r2
2000ef2c:	4604      	mov	r4, r0
2000ef2e:	2301      	movs	r3, #1
2000ef30:	e7f0      	b.n	2000ef14 <_svfiprintf_r+0x194>
2000ef32:	ab03      	add	r3, sp, #12
2000ef34:	9300      	str	r3, [sp, #0]
2000ef36:	462a      	mov	r2, r5
2000ef38:	4b0f      	ldr	r3, [pc, #60]	; (2000ef78 <_svfiprintf_r+0x1f8>)
2000ef3a:	a904      	add	r1, sp, #16
2000ef3c:	4638      	mov	r0, r7
2000ef3e:	f3af 8000 	nop.w
2000ef42:	1c42      	adds	r2, r0, #1
2000ef44:	4606      	mov	r6, r0
2000ef46:	d1d6      	bne.n	2000eef6 <_svfiprintf_r+0x176>
2000ef48:	89ab      	ldrh	r3, [r5, #12]
2000ef4a:	065b      	lsls	r3, r3, #25
2000ef4c:	f53f af2c 	bmi.w	2000eda8 <_svfiprintf_r+0x28>
2000ef50:	9809      	ldr	r0, [sp, #36]	; 0x24
2000ef52:	b01d      	add	sp, #116	; 0x74
2000ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
2000ef58:	ab03      	add	r3, sp, #12
2000ef5a:	9300      	str	r3, [sp, #0]
2000ef5c:	462a      	mov	r2, r5
2000ef5e:	4b06      	ldr	r3, [pc, #24]	; (2000ef78 <_svfiprintf_r+0x1f8>)
2000ef60:	a904      	add	r1, sp, #16
2000ef62:	4638      	mov	r0, r7
2000ef64:	f000 f87a 	bl	2000f05c <_printf_i>
2000ef68:	e7eb      	b.n	2000ef42 <_svfiprintf_r+0x1c2>
2000ef6a:	bf00      	nop
2000ef6c:	2000f92c 	.word	0x2000f92c
2000ef70:	2000f936 	.word	0x2000f936
2000ef74:	00000000 	.word	0x00000000
2000ef78:	2000ecc9 	.word	0x2000ecc9
2000ef7c:	2000f932 	.word	0x2000f932

2000ef80 <_printf_common>:
2000ef80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2000ef84:	4616      	mov	r6, r2
2000ef86:	4699      	mov	r9, r3
2000ef88:	688a      	ldr	r2, [r1, #8]
2000ef8a:	690b      	ldr	r3, [r1, #16]
2000ef8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
2000ef90:	4293      	cmp	r3, r2
2000ef92:	bfb8      	it	lt
2000ef94:	4613      	movlt	r3, r2
2000ef96:	6033      	str	r3, [r6, #0]
2000ef98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
2000ef9c:	4607      	mov	r7, r0
2000ef9e:	460c      	mov	r4, r1
2000efa0:	b10a      	cbz	r2, 2000efa6 <_printf_common+0x26>
2000efa2:	3301      	adds	r3, #1
2000efa4:	6033      	str	r3, [r6, #0]
2000efa6:	6823      	ldr	r3, [r4, #0]
2000efa8:	0699      	lsls	r1, r3, #26
2000efaa:	bf42      	ittt	mi
2000efac:	6833      	ldrmi	r3, [r6, #0]
2000efae:	3302      	addmi	r3, #2
2000efb0:	6033      	strmi	r3, [r6, #0]
2000efb2:	6825      	ldr	r5, [r4, #0]
2000efb4:	f015 0506 	ands.w	r5, r5, #6
2000efb8:	d106      	bne.n	2000efc8 <_printf_common+0x48>
2000efba:	f104 0a19 	add.w	sl, r4, #25
2000efbe:	68e3      	ldr	r3, [r4, #12]
2000efc0:	6832      	ldr	r2, [r6, #0]
2000efc2:	1a9b      	subs	r3, r3, r2
2000efc4:	42ab      	cmp	r3, r5
2000efc6:	dc26      	bgt.n	2000f016 <_printf_common+0x96>
2000efc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
2000efcc:	1e13      	subs	r3, r2, #0
2000efce:	6822      	ldr	r2, [r4, #0]
2000efd0:	bf18      	it	ne
2000efd2:	2301      	movne	r3, #1
2000efd4:	0692      	lsls	r2, r2, #26
2000efd6:	d42b      	bmi.n	2000f030 <_printf_common+0xb0>
2000efd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000efdc:	4649      	mov	r1, r9
2000efde:	4638      	mov	r0, r7
2000efe0:	47c0      	blx	r8
2000efe2:	3001      	adds	r0, #1
2000efe4:	d01e      	beq.n	2000f024 <_printf_common+0xa4>
2000efe6:	6823      	ldr	r3, [r4, #0]
2000efe8:	68e5      	ldr	r5, [r4, #12]
2000efea:	6832      	ldr	r2, [r6, #0]
2000efec:	f003 0306 	and.w	r3, r3, #6
2000eff0:	2b04      	cmp	r3, #4
2000eff2:	bf08      	it	eq
2000eff4:	1aad      	subeq	r5, r5, r2
2000eff6:	68a3      	ldr	r3, [r4, #8]
2000eff8:	6922      	ldr	r2, [r4, #16]
2000effa:	bf0c      	ite	eq
2000effc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
2000f000:	2500      	movne	r5, #0
2000f002:	4293      	cmp	r3, r2
2000f004:	bfc4      	itt	gt
2000f006:	1a9b      	subgt	r3, r3, r2
2000f008:	18ed      	addgt	r5, r5, r3
2000f00a:	2600      	movs	r6, #0
2000f00c:	341a      	adds	r4, #26
2000f00e:	42b5      	cmp	r5, r6
2000f010:	d11a      	bne.n	2000f048 <_printf_common+0xc8>
2000f012:	2000      	movs	r0, #0
2000f014:	e008      	b.n	2000f028 <_printf_common+0xa8>
2000f016:	2301      	movs	r3, #1
2000f018:	4652      	mov	r2, sl
2000f01a:	4649      	mov	r1, r9
2000f01c:	4638      	mov	r0, r7
2000f01e:	47c0      	blx	r8
2000f020:	3001      	adds	r0, #1
2000f022:	d103      	bne.n	2000f02c <_printf_common+0xac>
2000f024:	f04f 30ff 	mov.w	r0, #4294967295
2000f028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f02c:	3501      	adds	r5, #1
2000f02e:	e7c6      	b.n	2000efbe <_printf_common+0x3e>
2000f030:	18e1      	adds	r1, r4, r3
2000f032:	1c5a      	adds	r2, r3, #1
2000f034:	2030      	movs	r0, #48	; 0x30
2000f036:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
2000f03a:	4422      	add	r2, r4
2000f03c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
2000f040:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
2000f044:	3302      	adds	r3, #2
2000f046:	e7c7      	b.n	2000efd8 <_printf_common+0x58>
2000f048:	2301      	movs	r3, #1
2000f04a:	4622      	mov	r2, r4
2000f04c:	4649      	mov	r1, r9
2000f04e:	4638      	mov	r0, r7
2000f050:	47c0      	blx	r8
2000f052:	3001      	adds	r0, #1
2000f054:	d0e6      	beq.n	2000f024 <_printf_common+0xa4>
2000f056:	3601      	adds	r6, #1
2000f058:	e7d9      	b.n	2000f00e <_printf_common+0x8e>
	...

2000f05c <_printf_i>:
2000f05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
2000f060:	460c      	mov	r4, r1
2000f062:	4691      	mov	r9, r2
2000f064:	7e27      	ldrb	r7, [r4, #24]
2000f066:	990c      	ldr	r1, [sp, #48]	; 0x30
2000f068:	2f78      	cmp	r7, #120	; 0x78
2000f06a:	4680      	mov	r8, r0
2000f06c:	469a      	mov	sl, r3
2000f06e:	f104 0243 	add.w	r2, r4, #67	; 0x43
2000f072:	d807      	bhi.n	2000f084 <_printf_i+0x28>
2000f074:	2f62      	cmp	r7, #98	; 0x62
2000f076:	d80a      	bhi.n	2000f08e <_printf_i+0x32>
2000f078:	2f00      	cmp	r7, #0
2000f07a:	f000 80d8 	beq.w	2000f22e <_printf_i+0x1d2>
2000f07e:	2f58      	cmp	r7, #88	; 0x58
2000f080:	f000 80a3 	beq.w	2000f1ca <_printf_i+0x16e>
2000f084:	f104 0642 	add.w	r6, r4, #66	; 0x42
2000f088:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
2000f08c:	e03a      	b.n	2000f104 <_printf_i+0xa8>
2000f08e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
2000f092:	2b15      	cmp	r3, #21
2000f094:	d8f6      	bhi.n	2000f084 <_printf_i+0x28>
2000f096:	a001      	add	r0, pc, #4	; (adr r0, 2000f09c <_printf_i+0x40>)
2000f098:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
2000f09c:	2000f0f5 	.word	0x2000f0f5
2000f0a0:	2000f109 	.word	0x2000f109
2000f0a4:	2000f085 	.word	0x2000f085
2000f0a8:	2000f085 	.word	0x2000f085
2000f0ac:	2000f085 	.word	0x2000f085
2000f0b0:	2000f085 	.word	0x2000f085
2000f0b4:	2000f109 	.word	0x2000f109
2000f0b8:	2000f085 	.word	0x2000f085
2000f0bc:	2000f085 	.word	0x2000f085
2000f0c0:	2000f085 	.word	0x2000f085
2000f0c4:	2000f085 	.word	0x2000f085
2000f0c8:	2000f215 	.word	0x2000f215
2000f0cc:	2000f139 	.word	0x2000f139
2000f0d0:	2000f1f7 	.word	0x2000f1f7
2000f0d4:	2000f085 	.word	0x2000f085
2000f0d8:	2000f085 	.word	0x2000f085
2000f0dc:	2000f237 	.word	0x2000f237
2000f0e0:	2000f085 	.word	0x2000f085
2000f0e4:	2000f139 	.word	0x2000f139
2000f0e8:	2000f085 	.word	0x2000f085
2000f0ec:	2000f085 	.word	0x2000f085
2000f0f0:	2000f1ff 	.word	0x2000f1ff
2000f0f4:	680b      	ldr	r3, [r1, #0]
2000f0f6:	1d1a      	adds	r2, r3, #4
2000f0f8:	681b      	ldr	r3, [r3, #0]
2000f0fa:	600a      	str	r2, [r1, #0]
2000f0fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
2000f100:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
2000f104:	2301      	movs	r3, #1
2000f106:	e0a3      	b.n	2000f250 <_printf_i+0x1f4>
2000f108:	6825      	ldr	r5, [r4, #0]
2000f10a:	6808      	ldr	r0, [r1, #0]
2000f10c:	062e      	lsls	r6, r5, #24
2000f10e:	f100 0304 	add.w	r3, r0, #4
2000f112:	d50a      	bpl.n	2000f12a <_printf_i+0xce>
2000f114:	6805      	ldr	r5, [r0, #0]
2000f116:	600b      	str	r3, [r1, #0]
2000f118:	2d00      	cmp	r5, #0
2000f11a:	da03      	bge.n	2000f124 <_printf_i+0xc8>
2000f11c:	232d      	movs	r3, #45	; 0x2d
2000f11e:	426d      	negs	r5, r5
2000f120:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000f124:	485e      	ldr	r0, [pc, #376]	; (2000f2a0 <_printf_i+0x244>)
2000f126:	230a      	movs	r3, #10
2000f128:	e019      	b.n	2000f15e <_printf_i+0x102>
2000f12a:	f015 0f40 	tst.w	r5, #64	; 0x40
2000f12e:	6805      	ldr	r5, [r0, #0]
2000f130:	600b      	str	r3, [r1, #0]
2000f132:	bf18      	it	ne
2000f134:	b22d      	sxthne	r5, r5
2000f136:	e7ef      	b.n	2000f118 <_printf_i+0xbc>
2000f138:	680b      	ldr	r3, [r1, #0]
2000f13a:	6825      	ldr	r5, [r4, #0]
2000f13c:	1d18      	adds	r0, r3, #4
2000f13e:	6008      	str	r0, [r1, #0]
2000f140:	0628      	lsls	r0, r5, #24
2000f142:	d501      	bpl.n	2000f148 <_printf_i+0xec>
2000f144:	681d      	ldr	r5, [r3, #0]
2000f146:	e002      	b.n	2000f14e <_printf_i+0xf2>
2000f148:	0669      	lsls	r1, r5, #25
2000f14a:	d5fb      	bpl.n	2000f144 <_printf_i+0xe8>
2000f14c:	881d      	ldrh	r5, [r3, #0]
2000f14e:	4854      	ldr	r0, [pc, #336]	; (2000f2a0 <_printf_i+0x244>)
2000f150:	2f6f      	cmp	r7, #111	; 0x6f
2000f152:	bf0c      	ite	eq
2000f154:	2308      	moveq	r3, #8
2000f156:	230a      	movne	r3, #10
2000f158:	2100      	movs	r1, #0
2000f15a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
2000f15e:	6866      	ldr	r6, [r4, #4]
2000f160:	60a6      	str	r6, [r4, #8]
2000f162:	2e00      	cmp	r6, #0
2000f164:	bfa2      	ittt	ge
2000f166:	6821      	ldrge	r1, [r4, #0]
2000f168:	f021 0104 	bicge.w	r1, r1, #4
2000f16c:	6021      	strge	r1, [r4, #0]
2000f16e:	b90d      	cbnz	r5, 2000f174 <_printf_i+0x118>
2000f170:	2e00      	cmp	r6, #0
2000f172:	d04d      	beq.n	2000f210 <_printf_i+0x1b4>
2000f174:	4616      	mov	r6, r2
2000f176:	fbb5 f1f3 	udiv	r1, r5, r3
2000f17a:	fb03 5711 	mls	r7, r3, r1, r5
2000f17e:	5dc7      	ldrb	r7, [r0, r7]
2000f180:	f806 7d01 	strb.w	r7, [r6, #-1]!
2000f184:	462f      	mov	r7, r5
2000f186:	42bb      	cmp	r3, r7
2000f188:	460d      	mov	r5, r1
2000f18a:	d9f4      	bls.n	2000f176 <_printf_i+0x11a>
2000f18c:	2b08      	cmp	r3, #8
2000f18e:	d10b      	bne.n	2000f1a8 <_printf_i+0x14c>
2000f190:	6823      	ldr	r3, [r4, #0]
2000f192:	07df      	lsls	r7, r3, #31
2000f194:	d508      	bpl.n	2000f1a8 <_printf_i+0x14c>
2000f196:	6923      	ldr	r3, [r4, #16]
2000f198:	6861      	ldr	r1, [r4, #4]
2000f19a:	4299      	cmp	r1, r3
2000f19c:	bfde      	ittt	le
2000f19e:	2330      	movle	r3, #48	; 0x30
2000f1a0:	f806 3c01 	strble.w	r3, [r6, #-1]
2000f1a4:	f106 36ff 	addle.w	r6, r6, #4294967295
2000f1a8:	1b92      	subs	r2, r2, r6
2000f1aa:	6122      	str	r2, [r4, #16]
2000f1ac:	f8cd a000 	str.w	sl, [sp]
2000f1b0:	464b      	mov	r3, r9
2000f1b2:	aa03      	add	r2, sp, #12
2000f1b4:	4621      	mov	r1, r4
2000f1b6:	4640      	mov	r0, r8
2000f1b8:	f7ff fee2 	bl	2000ef80 <_printf_common>
2000f1bc:	3001      	adds	r0, #1
2000f1be:	d14c      	bne.n	2000f25a <_printf_i+0x1fe>
2000f1c0:	f04f 30ff 	mov.w	r0, #4294967295
2000f1c4:	b004      	add	sp, #16
2000f1c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
2000f1ca:	4835      	ldr	r0, [pc, #212]	; (2000f2a0 <_printf_i+0x244>)
2000f1cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
2000f1d0:	6823      	ldr	r3, [r4, #0]
2000f1d2:	680e      	ldr	r6, [r1, #0]
2000f1d4:	061f      	lsls	r7, r3, #24
2000f1d6:	f856 5b04 	ldr.w	r5, [r6], #4
2000f1da:	600e      	str	r6, [r1, #0]
2000f1dc:	d514      	bpl.n	2000f208 <_printf_i+0x1ac>
2000f1de:	07d9      	lsls	r1, r3, #31
2000f1e0:	bf44      	itt	mi
2000f1e2:	f043 0320 	orrmi.w	r3, r3, #32
2000f1e6:	6023      	strmi	r3, [r4, #0]
2000f1e8:	b91d      	cbnz	r5, 2000f1f2 <_printf_i+0x196>
2000f1ea:	6823      	ldr	r3, [r4, #0]
2000f1ec:	f023 0320 	bic.w	r3, r3, #32
2000f1f0:	6023      	str	r3, [r4, #0]
2000f1f2:	2310      	movs	r3, #16
2000f1f4:	e7b0      	b.n	2000f158 <_printf_i+0xfc>
2000f1f6:	6823      	ldr	r3, [r4, #0]
2000f1f8:	f043 0320 	orr.w	r3, r3, #32
2000f1fc:	6023      	str	r3, [r4, #0]
2000f1fe:	2378      	movs	r3, #120	; 0x78
2000f200:	4828      	ldr	r0, [pc, #160]	; (2000f2a4 <_printf_i+0x248>)
2000f202:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
2000f206:	e7e3      	b.n	2000f1d0 <_printf_i+0x174>
2000f208:	065e      	lsls	r6, r3, #25
2000f20a:	bf48      	it	mi
2000f20c:	b2ad      	uxthmi	r5, r5
2000f20e:	e7e6      	b.n	2000f1de <_printf_i+0x182>
2000f210:	4616      	mov	r6, r2
2000f212:	e7bb      	b.n	2000f18c <_printf_i+0x130>
2000f214:	680b      	ldr	r3, [r1, #0]
2000f216:	6826      	ldr	r6, [r4, #0]
2000f218:	6960      	ldr	r0, [r4, #20]
2000f21a:	1d1d      	adds	r5, r3, #4
2000f21c:	600d      	str	r5, [r1, #0]
2000f21e:	0635      	lsls	r5, r6, #24
2000f220:	681b      	ldr	r3, [r3, #0]
2000f222:	d501      	bpl.n	2000f228 <_printf_i+0x1cc>
2000f224:	6018      	str	r0, [r3, #0]
2000f226:	e002      	b.n	2000f22e <_printf_i+0x1d2>
2000f228:	0671      	lsls	r1, r6, #25
2000f22a:	d5fb      	bpl.n	2000f224 <_printf_i+0x1c8>
2000f22c:	8018      	strh	r0, [r3, #0]
2000f22e:	2300      	movs	r3, #0
2000f230:	6123      	str	r3, [r4, #16]
2000f232:	4616      	mov	r6, r2
2000f234:	e7ba      	b.n	2000f1ac <_printf_i+0x150>
2000f236:	680b      	ldr	r3, [r1, #0]
2000f238:	1d1a      	adds	r2, r3, #4
2000f23a:	600a      	str	r2, [r1, #0]
2000f23c:	681e      	ldr	r6, [r3, #0]
2000f23e:	6862      	ldr	r2, [r4, #4]
2000f240:	2100      	movs	r1, #0
2000f242:	4630      	mov	r0, r6
2000f244:	f7fd ffcc 	bl	2000d1e0 <memchr>
2000f248:	b108      	cbz	r0, 2000f24e <_printf_i+0x1f2>
2000f24a:	1b80      	subs	r0, r0, r6
2000f24c:	6060      	str	r0, [r4, #4]
2000f24e:	6863      	ldr	r3, [r4, #4]
2000f250:	6123      	str	r3, [r4, #16]
2000f252:	2300      	movs	r3, #0
2000f254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
2000f258:	e7a8      	b.n	2000f1ac <_printf_i+0x150>
2000f25a:	6923      	ldr	r3, [r4, #16]
2000f25c:	4632      	mov	r2, r6
2000f25e:	4649      	mov	r1, r9
2000f260:	4640      	mov	r0, r8
2000f262:	47d0      	blx	sl
2000f264:	3001      	adds	r0, #1
2000f266:	d0ab      	beq.n	2000f1c0 <_printf_i+0x164>
2000f268:	6823      	ldr	r3, [r4, #0]
2000f26a:	079b      	lsls	r3, r3, #30
2000f26c:	d413      	bmi.n	2000f296 <_printf_i+0x23a>
2000f26e:	68e0      	ldr	r0, [r4, #12]
2000f270:	9b03      	ldr	r3, [sp, #12]
2000f272:	4298      	cmp	r0, r3
2000f274:	bfb8      	it	lt
2000f276:	4618      	movlt	r0, r3
2000f278:	e7a4      	b.n	2000f1c4 <_printf_i+0x168>
2000f27a:	2301      	movs	r3, #1
2000f27c:	4632      	mov	r2, r6
2000f27e:	4649      	mov	r1, r9
2000f280:	4640      	mov	r0, r8
2000f282:	47d0      	blx	sl
2000f284:	3001      	adds	r0, #1
2000f286:	d09b      	beq.n	2000f1c0 <_printf_i+0x164>
2000f288:	3501      	adds	r5, #1
2000f28a:	68e3      	ldr	r3, [r4, #12]
2000f28c:	9903      	ldr	r1, [sp, #12]
2000f28e:	1a5b      	subs	r3, r3, r1
2000f290:	42ab      	cmp	r3, r5
2000f292:	dcf2      	bgt.n	2000f27a <_printf_i+0x21e>
2000f294:	e7eb      	b.n	2000f26e <_printf_i+0x212>
2000f296:	2500      	movs	r5, #0
2000f298:	f104 0619 	add.w	r6, r4, #25
2000f29c:	e7f5      	b.n	2000f28a <_printf_i+0x22e>
2000f29e:	bf00      	nop
2000f2a0:	2000f93d 	.word	0x2000f93d
2000f2a4:	2000f94e 	.word	0x2000f94e

2000f2a8 <memcpy>:
2000f2a8:	440a      	add	r2, r1
2000f2aa:	4291      	cmp	r1, r2
2000f2ac:	f100 33ff 	add.w	r3, r0, #4294967295
2000f2b0:	d100      	bne.n	2000f2b4 <memcpy+0xc>
2000f2b2:	4770      	bx	lr
2000f2b4:	b510      	push	{r4, lr}
2000f2b6:	f811 4b01 	ldrb.w	r4, [r1], #1
2000f2ba:	f803 4f01 	strb.w	r4, [r3, #1]!
2000f2be:	4291      	cmp	r1, r2
2000f2c0:	d1f9      	bne.n	2000f2b6 <memcpy+0xe>
2000f2c2:	bd10      	pop	{r4, pc}

2000f2c4 <memmove>:
2000f2c4:	4288      	cmp	r0, r1
2000f2c6:	b510      	push	{r4, lr}
2000f2c8:	eb01 0402 	add.w	r4, r1, r2
2000f2cc:	d902      	bls.n	2000f2d4 <memmove+0x10>
2000f2ce:	4284      	cmp	r4, r0
2000f2d0:	4623      	mov	r3, r4
2000f2d2:	d807      	bhi.n	2000f2e4 <memmove+0x20>
2000f2d4:	1e43      	subs	r3, r0, #1
2000f2d6:	42a1      	cmp	r1, r4
2000f2d8:	d008      	beq.n	2000f2ec <memmove+0x28>
2000f2da:	f811 2b01 	ldrb.w	r2, [r1], #1
2000f2de:	f803 2f01 	strb.w	r2, [r3, #1]!
2000f2e2:	e7f8      	b.n	2000f2d6 <memmove+0x12>
2000f2e4:	4402      	add	r2, r0
2000f2e6:	4601      	mov	r1, r0
2000f2e8:	428a      	cmp	r2, r1
2000f2ea:	d100      	bne.n	2000f2ee <memmove+0x2a>
2000f2ec:	bd10      	pop	{r4, pc}
2000f2ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
2000f2f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
2000f2f6:	e7f7      	b.n	2000f2e8 <memmove+0x24>

2000f2f8 <_free_r>:
2000f2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
2000f2fa:	2900      	cmp	r1, #0
2000f2fc:	d048      	beq.n	2000f390 <_free_r+0x98>
2000f2fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f302:	9001      	str	r0, [sp, #4]
2000f304:	2b00      	cmp	r3, #0
2000f306:	f1a1 0404 	sub.w	r4, r1, #4
2000f30a:	bfb8      	it	lt
2000f30c:	18e4      	addlt	r4, r4, r3
2000f30e:	f000 f8d3 	bl	2000f4b8 <__malloc_lock>
2000f312:	4a20      	ldr	r2, [pc, #128]	; (2000f394 <_free_r+0x9c>)
2000f314:	9801      	ldr	r0, [sp, #4]
2000f316:	6813      	ldr	r3, [r2, #0]
2000f318:	4615      	mov	r5, r2
2000f31a:	b933      	cbnz	r3, 2000f32a <_free_r+0x32>
2000f31c:	6063      	str	r3, [r4, #4]
2000f31e:	6014      	str	r4, [r2, #0]
2000f320:	b003      	add	sp, #12
2000f322:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
2000f326:	f000 b8cd 	b.w	2000f4c4 <__malloc_unlock>
2000f32a:	42a3      	cmp	r3, r4
2000f32c:	d90b      	bls.n	2000f346 <_free_r+0x4e>
2000f32e:	6821      	ldr	r1, [r4, #0]
2000f330:	1862      	adds	r2, r4, r1
2000f332:	4293      	cmp	r3, r2
2000f334:	bf04      	itt	eq
2000f336:	681a      	ldreq	r2, [r3, #0]
2000f338:	685b      	ldreq	r3, [r3, #4]
2000f33a:	6063      	str	r3, [r4, #4]
2000f33c:	bf04      	itt	eq
2000f33e:	1852      	addeq	r2, r2, r1
2000f340:	6022      	streq	r2, [r4, #0]
2000f342:	602c      	str	r4, [r5, #0]
2000f344:	e7ec      	b.n	2000f320 <_free_r+0x28>
2000f346:	461a      	mov	r2, r3
2000f348:	685b      	ldr	r3, [r3, #4]
2000f34a:	b10b      	cbz	r3, 2000f350 <_free_r+0x58>
2000f34c:	42a3      	cmp	r3, r4
2000f34e:	d9fa      	bls.n	2000f346 <_free_r+0x4e>
2000f350:	6811      	ldr	r1, [r2, #0]
2000f352:	1855      	adds	r5, r2, r1
2000f354:	42a5      	cmp	r5, r4
2000f356:	d10b      	bne.n	2000f370 <_free_r+0x78>
2000f358:	6824      	ldr	r4, [r4, #0]
2000f35a:	4421      	add	r1, r4
2000f35c:	1854      	adds	r4, r2, r1
2000f35e:	42a3      	cmp	r3, r4
2000f360:	6011      	str	r1, [r2, #0]
2000f362:	d1dd      	bne.n	2000f320 <_free_r+0x28>
2000f364:	681c      	ldr	r4, [r3, #0]
2000f366:	685b      	ldr	r3, [r3, #4]
2000f368:	6053      	str	r3, [r2, #4]
2000f36a:	4421      	add	r1, r4
2000f36c:	6011      	str	r1, [r2, #0]
2000f36e:	e7d7      	b.n	2000f320 <_free_r+0x28>
2000f370:	d902      	bls.n	2000f378 <_free_r+0x80>
2000f372:	230c      	movs	r3, #12
2000f374:	6003      	str	r3, [r0, #0]
2000f376:	e7d3      	b.n	2000f320 <_free_r+0x28>
2000f378:	6825      	ldr	r5, [r4, #0]
2000f37a:	1961      	adds	r1, r4, r5
2000f37c:	428b      	cmp	r3, r1
2000f37e:	bf04      	itt	eq
2000f380:	6819      	ldreq	r1, [r3, #0]
2000f382:	685b      	ldreq	r3, [r3, #4]
2000f384:	6063      	str	r3, [r4, #4]
2000f386:	bf04      	itt	eq
2000f388:	1949      	addeq	r1, r1, r5
2000f38a:	6021      	streq	r1, [r4, #0]
2000f38c:	6054      	str	r4, [r2, #4]
2000f38e:	e7c7      	b.n	2000f320 <_free_r+0x28>
2000f390:	b003      	add	sp, #12
2000f392:	bd30      	pop	{r4, r5, pc}
2000f394:	2000fa14 	.word	0x2000fa14

2000f398 <_malloc_r>:
2000f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f39a:	1ccd      	adds	r5, r1, #3
2000f39c:	f025 0503 	bic.w	r5, r5, #3
2000f3a0:	3508      	adds	r5, #8
2000f3a2:	2d0c      	cmp	r5, #12
2000f3a4:	bf38      	it	cc
2000f3a6:	250c      	movcc	r5, #12
2000f3a8:	2d00      	cmp	r5, #0
2000f3aa:	4606      	mov	r6, r0
2000f3ac:	db01      	blt.n	2000f3b2 <_malloc_r+0x1a>
2000f3ae:	42a9      	cmp	r1, r5
2000f3b0:	d903      	bls.n	2000f3ba <_malloc_r+0x22>
2000f3b2:	230c      	movs	r3, #12
2000f3b4:	6033      	str	r3, [r6, #0]
2000f3b6:	2000      	movs	r0, #0
2000f3b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000f3ba:	f000 f87d 	bl	2000f4b8 <__malloc_lock>
2000f3be:	4921      	ldr	r1, [pc, #132]	; (2000f444 <_malloc_r+0xac>)
2000f3c0:	680a      	ldr	r2, [r1, #0]
2000f3c2:	4614      	mov	r4, r2
2000f3c4:	b99c      	cbnz	r4, 2000f3ee <_malloc_r+0x56>
2000f3c6:	4f20      	ldr	r7, [pc, #128]	; (2000f448 <_malloc_r+0xb0>)
2000f3c8:	683b      	ldr	r3, [r7, #0]
2000f3ca:	b923      	cbnz	r3, 2000f3d6 <_malloc_r+0x3e>
2000f3cc:	4621      	mov	r1, r4
2000f3ce:	4630      	mov	r0, r6
2000f3d0:	f000 f862 	bl	2000f498 <_sbrk_r>
2000f3d4:	6038      	str	r0, [r7, #0]
2000f3d6:	4629      	mov	r1, r5
2000f3d8:	4630      	mov	r0, r6
2000f3da:	f000 f85d 	bl	2000f498 <_sbrk_r>
2000f3de:	1c43      	adds	r3, r0, #1
2000f3e0:	d123      	bne.n	2000f42a <_malloc_r+0x92>
2000f3e2:	230c      	movs	r3, #12
2000f3e4:	6033      	str	r3, [r6, #0]
2000f3e6:	4630      	mov	r0, r6
2000f3e8:	f000 f86c 	bl	2000f4c4 <__malloc_unlock>
2000f3ec:	e7e3      	b.n	2000f3b6 <_malloc_r+0x1e>
2000f3ee:	6823      	ldr	r3, [r4, #0]
2000f3f0:	1b5b      	subs	r3, r3, r5
2000f3f2:	d417      	bmi.n	2000f424 <_malloc_r+0x8c>
2000f3f4:	2b0b      	cmp	r3, #11
2000f3f6:	d903      	bls.n	2000f400 <_malloc_r+0x68>
2000f3f8:	6023      	str	r3, [r4, #0]
2000f3fa:	441c      	add	r4, r3
2000f3fc:	6025      	str	r5, [r4, #0]
2000f3fe:	e004      	b.n	2000f40a <_malloc_r+0x72>
2000f400:	6863      	ldr	r3, [r4, #4]
2000f402:	42a2      	cmp	r2, r4
2000f404:	bf0c      	ite	eq
2000f406:	600b      	streq	r3, [r1, #0]
2000f408:	6053      	strne	r3, [r2, #4]
2000f40a:	4630      	mov	r0, r6
2000f40c:	f000 f85a 	bl	2000f4c4 <__malloc_unlock>
2000f410:	f104 000b 	add.w	r0, r4, #11
2000f414:	1d23      	adds	r3, r4, #4
2000f416:	f020 0007 	bic.w	r0, r0, #7
2000f41a:	1ac2      	subs	r2, r0, r3
2000f41c:	d0cc      	beq.n	2000f3b8 <_malloc_r+0x20>
2000f41e:	1a1b      	subs	r3, r3, r0
2000f420:	50a3      	str	r3, [r4, r2]
2000f422:	e7c9      	b.n	2000f3b8 <_malloc_r+0x20>
2000f424:	4622      	mov	r2, r4
2000f426:	6864      	ldr	r4, [r4, #4]
2000f428:	e7cc      	b.n	2000f3c4 <_malloc_r+0x2c>
2000f42a:	1cc4      	adds	r4, r0, #3
2000f42c:	f024 0403 	bic.w	r4, r4, #3
2000f430:	42a0      	cmp	r0, r4
2000f432:	d0e3      	beq.n	2000f3fc <_malloc_r+0x64>
2000f434:	1a21      	subs	r1, r4, r0
2000f436:	4630      	mov	r0, r6
2000f438:	f000 f82e 	bl	2000f498 <_sbrk_r>
2000f43c:	3001      	adds	r0, #1
2000f43e:	d1dd      	bne.n	2000f3fc <_malloc_r+0x64>
2000f440:	e7cf      	b.n	2000f3e2 <_malloc_r+0x4a>
2000f442:	bf00      	nop
2000f444:	2000fa14 	.word	0x2000fa14
2000f448:	2000fa18 	.word	0x2000fa18

2000f44c <_realloc_r>:
2000f44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f44e:	4607      	mov	r7, r0
2000f450:	4614      	mov	r4, r2
2000f452:	460e      	mov	r6, r1
2000f454:	b921      	cbnz	r1, 2000f460 <_realloc_r+0x14>
2000f456:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
2000f45a:	4611      	mov	r1, r2
2000f45c:	f7ff bf9c 	b.w	2000f398 <_malloc_r>
2000f460:	b922      	cbnz	r2, 2000f46c <_realloc_r+0x20>
2000f462:	f7ff ff49 	bl	2000f2f8 <_free_r>
2000f466:	4625      	mov	r5, r4
2000f468:	4628      	mov	r0, r5
2000f46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
2000f46c:	f000 f830 	bl	2000f4d0 <_malloc_usable_size_r>
2000f470:	42a0      	cmp	r0, r4
2000f472:	d20f      	bcs.n	2000f494 <_realloc_r+0x48>
2000f474:	4621      	mov	r1, r4
2000f476:	4638      	mov	r0, r7
2000f478:	f7ff ff8e 	bl	2000f398 <_malloc_r>
2000f47c:	4605      	mov	r5, r0
2000f47e:	2800      	cmp	r0, #0
2000f480:	d0f2      	beq.n	2000f468 <_realloc_r+0x1c>
2000f482:	4631      	mov	r1, r6
2000f484:	4622      	mov	r2, r4
2000f486:	f7ff ff0f 	bl	2000f2a8 <memcpy>
2000f48a:	4631      	mov	r1, r6
2000f48c:	4638      	mov	r0, r7
2000f48e:	f7ff ff33 	bl	2000f2f8 <_free_r>
2000f492:	e7e9      	b.n	2000f468 <_realloc_r+0x1c>
2000f494:	4635      	mov	r5, r6
2000f496:	e7e7      	b.n	2000f468 <_realloc_r+0x1c>

2000f498 <_sbrk_r>:
2000f498:	b538      	push	{r3, r4, r5, lr}
2000f49a:	4d06      	ldr	r5, [pc, #24]	; (2000f4b4 <_sbrk_r+0x1c>)
2000f49c:	2300      	movs	r3, #0
2000f49e:	4604      	mov	r4, r0
2000f4a0:	4608      	mov	r0, r1
2000f4a2:	602b      	str	r3, [r5, #0]
2000f4a4:	f7fe fa80 	bl	2000d9a8 <_sbrk>
2000f4a8:	1c43      	adds	r3, r0, #1
2000f4aa:	d102      	bne.n	2000f4b2 <_sbrk_r+0x1a>
2000f4ac:	682b      	ldr	r3, [r5, #0]
2000f4ae:	b103      	cbz	r3, 2000f4b2 <_sbrk_r+0x1a>
2000f4b0:	6023      	str	r3, [r4, #0]
2000f4b2:	bd38      	pop	{r3, r4, r5, pc}
2000f4b4:	2000fb2c 	.word	0x2000fb2c

2000f4b8 <__malloc_lock>:
2000f4b8:	4801      	ldr	r0, [pc, #4]	; (2000f4c0 <__malloc_lock+0x8>)
2000f4ba:	f000 b811 	b.w	2000f4e0 <__retarget_lock_acquire_recursive>
2000f4be:	bf00      	nop
2000f4c0:	2000fb34 	.word	0x2000fb34

2000f4c4 <__malloc_unlock>:
2000f4c4:	4801      	ldr	r0, [pc, #4]	; (2000f4cc <__malloc_unlock+0x8>)
2000f4c6:	f000 b80c 	b.w	2000f4e2 <__retarget_lock_release_recursive>
2000f4ca:	bf00      	nop
2000f4cc:	2000fb34 	.word	0x2000fb34

2000f4d0 <_malloc_usable_size_r>:
2000f4d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
2000f4d4:	1f18      	subs	r0, r3, #4
2000f4d6:	2b00      	cmp	r3, #0
2000f4d8:	bfbc      	itt	lt
2000f4da:	580b      	ldrlt	r3, [r1, r0]
2000f4dc:	18c0      	addlt	r0, r0, r3
2000f4de:	4770      	bx	lr

2000f4e0 <__retarget_lock_acquire_recursive>:
2000f4e0:	4770      	bx	lr

2000f4e2 <__retarget_lock_release_recursive>:
2000f4e2:	4770      	bx	lr

2000f4e4 <_init>:
2000f4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f4e6:	bf00      	nop
2000f4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f4ea:	bc08      	pop	{r3}
2000f4ec:	469e      	mov	lr, r3
2000f4ee:	4770      	bx	lr

2000f4f0 <_fini>:
2000f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2000f4f2:	bf00      	nop
2000f4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
2000f4f6:	bc08      	pop	{r3}
2000f4f8:	469e      	mov	lr, r3
2000f4fa:	4770      	bx	lr
